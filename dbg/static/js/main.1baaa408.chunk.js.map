{"version":3,"sources":["components/Address.jsx","components/Balance.jsx","helpers/Transactor.js","helpers/Web3ModalSetup.js","components/Blockie.jsx","components/AddressInput.jsx","components/EtherInput.jsx","components/Wallet.jsx","components/Account.jsx","components/BytesStringInput.jsx","components/Contract/utils.jsx","components/Contract/DisplayVariable.jsx","components/Contract/FunctionForm.jsx","components/Contract/index.jsx","components/Events.jsx","components/Faucet.jsx","components/GasGauge.jsx","components/Header.jsx","components/Ramp.jsx","hooks/useStaticJsonRPC.js","helpers/loadAppContracts.js","components/Swap.jsx","components/ThemeSwitch.jsx","components/Timeline.jsx","components/L2Bridge.jsx","components/NetworkDisplay.jsx","components/FaucetHint.jsx","components/NetworkSwitch.jsx","views/Home.jsx","views/OrcsUI.jsx","views/Hints.jsx","views/Subgraph.jsx","App.jsx","index.jsx","contracts/external_contracts.js","constants.js"],"names":["Text","Typography","Address","props","currentTheme","useThemeSwitcher","address","value","ens","useLookupAddress","ensProvider","ensSplit","split","validEnsCheck","length","etherscanLink","blockExplorer","blockExplorerLink","displayAddress","substr","size","minimized","style","verticalAlign","color","target","href","rel","seed","toLowerCase","scale","fontSize","paddingLeft","onChange","editable","copyable","text","avatar","paragraph","rows","utils","require","Balance","useState","dollarMode","setDollarMode","balance","useBalance","provider","floatBalance","parseFloat","usingBalance","etherBalance","formatEther","toFixed","displayBalance","price","dollarMultiplier","padding","cursor","onClick","ethers","callbacks","Transactor","providerOrSigner","gasPrice","etherscan","tx","callback","a","Signer","isSigner","signer","getNetwork","network","_isProvider","getSigner","console","log","notify","options","dappId","BLOCKNATIVE_DAPPID","system","networkId","chainId","transactionHandler","txInformation","possibleFunction","transaction","hash","Notify","etherscanNetwork","name","etherscanTxUrl","Promise","result","parseUnits","gasLimit","hexlify","sendTransaction","indexOf","emitter","on","onclick","window","open","notification","info","message","description","placement","txResult","listeningInterval","setInterval","getTransactionReceipt","currentTransactionReceipt","confirmations","clearInterval","wait","data","error","JSON","parse","stringify","body","obj","errorObj","e","walletLinkProvider","WalletLink","appName","makeWeb3Provider","ALCHEMY_KEY","web3ModalSetup","Web3Modal","cacheProvider","theme","providerOptions","walletconnect","package","WalletConnectProvider","bridge","infuraId","INFURA_ID","rpc","portis","display","logo","Portis","id","fortmatic","Fortmatic","key","connector","_options","enable","authereum","Authereum","Blockie","isENS","endsWith","AddressInput","setValue","scan","setScan","currentValue","updateAddress","useCallback","newValue","resolveName","possibleAddress","zIndex","position","left","top","width","delay","resolution","onError","onScan","possibleNewValue","lastIndexOf","autoComplete","autoFocus","placeholder","prefix","isAddress","addonAfter","marginTop","count","CameraOutlined","QrcodeOutlined","EtherInput","mode","setMode","setDisplay","useEffect","usdValue","ethValue","Paragraph","Wallet","signerAddress","setSignerAddress","getAddress","newAddress","receiveButton","privateKeyButton","selectedAddress","setOpen","qr","setQr","amount","setAmount","toAddress","setToAddress","pk","setPK","providerSend","title","WalletOutlined","rotate","level","includeMargin","renderAs","imageSettings","excavate","KeyOutlined","localStorage","getItem","wallet","extraPkDisplayAdded","extraPkDisplay","push","backgroundStyle","pastpk","pastwallet","currentPrivateKey","setItem","Date","now","privateKey","createRandom","_signingKey","location","reload","inputStyle","visible","float","paddingRight","onOk","onCancel","footer","type","disabled","loading","parseEther","to","SendOutlined","Account","useBurner","userSigner","localProvider","mainnetProvider","web3Modal","loadWeb3Modal","logoutOfWeb3Modal","isContract","modalButtons","cachedProvider","marginLeft","shape","constants","tryToDisplay","thing","asText","toNumber","displayable","formatUnits","overflowWrap","constructor","mostReadable","v","includes","tryToDisplayAsText","map","replaceAll","DisplayVariable","contractFunction","functionInfo","refreshRequired","triggerRefresh","variable","setVariable","refresh","funcResponse","span","textAlign","opacity","BigNumber","getFunctionInputKey","input","inputIndex","FunctionForm","form","setForm","txValue","setTxValue","returnValue","setReturnValue","inputs","buttons","isHexString","formUpdate","parseBytes32String","formatBytes32String","toUtf8String","toUtf8Bytes","trim","margin","event","suffix","txValueInput","floatValue","from","toHexString","payable","handleForm","returned","buttonIcon","defaultValue","bordered","height","args","baseType","stateMutability","overrides","noContractDisplay","className","borderRadius","fontWeight","marginRight","role","Contract","contract","customContract","account","show","contractConfig","contracts","useContractLoader","contractIsDeployed","useContractExistsAtAddress","displayedContractFunctions","useMemo","Object","entries","interface","functions","filter","fn","contractDisplay","contractFuncInfo","contractFunc","connect","injectedProvider","Events","contractName","eventName","startBlock","events","useEventListener","paddingBottom","dataSource","renderItem","item","Item","blockNumber","sender","purpose","Faucet","blockie","setAddress","faucetAddress","setFaucetAddress","getFaucetAddress","listAccounts","_faucetAddress","icon","GasGauge","parseInt","Header","subTitle","Ramp","modalUp","setModalUp","allFaucets","n","networks","faucet","DollarCircleOutlined","RampInstantSDK","hostAppName","hostLogoUrl","swapAmount","swapAsset","userAddress","createProvider","url","p","providers","StaticJsonRpcProvider","ready","useStaticJsonRPC","urlArray","setProvider","handleProviders","race","_p","Select","Option","Swap","ThemeSwitcher","isDarkMode","setIsDarkMode","switcher","themes","status","right","bottom","checked","isChecked","dark","light","NetworkDisplay","NETWORKCHECK","localChainId","selectedChainId","targetNetwork","USE_NETWORK_SELECTOR","networkDisplay","networkSelected","NETWORK","networkLocal","closable","ethereum","toString","chainName","nativeCurrency","rpcUrls","rpcUrl","blockExplorerUrls","request","method","params","switchTx","FaucetHint","faucetClicked","setFaucetClicked","yourLocalBalance","faucetTx","useGasPrice","faucetHint","_network","NetworkSwitch","Home","readContracts","useContractReader","OrcsUI","writeContracts","mintNOrcs","setMintNOrcs","border","LazyOrcs","mintOrc","update","gasUsed","gas","YourContract","setPurpose","encodeFunctionData","SyncOutlined","spin","range","defaultChecked","percent","Hints","selectedToken","setSelectedToken","listOfTokens","useTokenList","showSearch","filterOption","option","children","optionFilterProp","token","symbol","highlight","Subgraph","EXAMPLE_GRAPHQL","EXAMPLE_GQL","gql","useQuery","pollInterval","purposeColumns","dataIndex","render","record","d","toISOString","newPurpose","setNewPurpose","deployWarning","purposes","columns","rowKey","fetcher","graphQLParams","fetch","subgraphUri","headers","then","response","json","docExplorerOpen","query","initialNetwork","NETWORKS","rinkeby","Web3ModalSetup","App","networkOptions","setInjectedProvider","selectedNetwork","useLocation","process","REACT_APP_PROVIDER","clearCachedProvider","disconnect","setTimeout","useExchangeEthPrice","useUserProviderAndSigner","yourMainnetBalance","deployedContracts","externalContracts","mainnetContracts","useOnBlock","_lastBlockNumber","myMainnetDAIBalance","Web3Provider","code","reason","faucetAvailable","connection","selectedKeys","pathname","exact","path","DAI","flex","alignItems","lte","align","gutter","prevTheme","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","ApolloProvider","themeMap","defaultTheme","document","getElementById","module","exports","abi","internalType","anonymous","indexed","constant","outputs","UNI","localhost","global","hostname","mainnet","kovan","ropsten","goerli","xdai","matic","mumbai","localArbitrum","localArbitrumL1","rinkebyArbitrum","arbitrum","localOptimismL1","localOptimism","kovanOptimism","optimism","localAvalanche","fujiAvalanche","mainnetAvalanche","testnetHarmony","mainnetHarmony"],"mappings":"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","file":"static/js/main.1baaa408.chunk.js","sourcesContent":["import { Skeleton, Typography } from \"antd\";\r\nimport React from \"react\";\r\nimport Blockies from \"react-blockies\";\r\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\r\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\r\n\r\n// changed value={address} to address={address}\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays an address with a blockie image and option to copy address\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Address\r\n    address={address}\r\n    ensProvider={mainnetProvider}\r\n    blockExplorer={blockExplorer}\r\n    fontSize={fontSize}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\")\r\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\r\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\r\n  - Provide fontSize={fontSize} to change the size of address text\r\n*/\r\n\r\nconst { Text } = Typography;\r\n\r\nconst blockExplorerLink = (address, blockExplorer) => `${blockExplorer || \"https://etherscan.io/\"}address/${address}`;\r\n\r\nexport default function Address(props) {\r\n  const { currentTheme } = useThemeSwitcher();\r\n  const address = props.value || props.address;\r\n  const ens = useLookupAddress(props.ensProvider, address);\r\n  const ensSplit = ens && ens.split(\".\");\r\n  const validEnsCheck = ensSplit && ensSplit[ensSplit.length - 1] === \"eth\";\r\n  const etherscanLink = blockExplorerLink(address, props.blockExplorer);\r\n  let displayAddress = address?.substr(0, 5) + \"...\" + address?.substr(-4);\r\n\r\n  if (validEnsCheck) {\r\n    displayAddress = ens;\r\n  } else if (props.size === \"short\") {\r\n    displayAddress += \"...\" + address.substr(-4);\r\n  } else if (props.size === \"long\") {\r\n    displayAddress = address;\r\n  }\r\n\r\n  if (!address) {\r\n    return (\r\n      <span>\r\n        <Skeleton avatar paragraph={{ rows: 1 }} />\r\n      </span>\r\n    );\r\n  }\r\n\r\n  if (props.minimized) {\r\n    return (\r\n      <span style={{ verticalAlign: \"middle\" }}>\r\n        <a\r\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\r\n          target=\"_blank\"\r\n          href={etherscanLink}\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <Blockies seed={address.toLowerCase()} size={8} scale={2} />\r\n        </a>\r\n      </span>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <span>\r\n      <span style={{ verticalAlign: \"middle\" }}>\r\n        <Blockies seed={address.toLowerCase()} size={8} scale={props.fontSize ? props.fontSize / 7 : 4} />\r\n      </span>\r\n      <span style={{ verticalAlign: \"middle\", paddingLeft: 5, fontSize: props.fontSize ? props.fontSize : 28 }}>\r\n        {props.onChange ? (\r\n          <Text editable={{ onChange: props.onChange }} copyable={{ text: address }}>\r\n            <a\r\n              style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\r\n              target=\"_blank\"\r\n              href={etherscanLink}\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              {displayAddress}\r\n            </a>\r\n          </Text>\r\n        ) : (\r\n          <Text copyable={{ text: address }}>\r\n            <a\r\n              style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\r\n              target=\"_blank\"\r\n              href={etherscanLink}\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              {displayAddress}\r\n            </a>\r\n          </Text>\r\n        )}\r\n      </span>\r\n    </span>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { useBalance } from \"eth-hooks\";\r\n\r\nconst { utils } = require(\"ethers\");\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays a balance of given address in ether & dollar\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Balance\r\n    address={address}\r\n    provider={mainnetProvider}\r\n    price={price}\r\n  />\r\n\r\n  ~ If you already have the balance as a bignumber ~\r\n  <Balance\r\n    balance={balance}\r\n    price={price}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide address={address} and get balance corresponding to given address\r\n  - Provide provider={mainnetProvider} to access balance on mainnet or any other network (ex. localProvider)\r\n  - Provide price={price} of ether and get your balance converted to dollars\r\n*/\r\n\r\nexport default function Balance(props) {\r\n  const [dollarMode, setDollarMode] = useState(true);\r\n\r\n  const balance = useBalance(props.provider, props.address);\r\n  let floatBalance = parseFloat(\"0.00\");\r\n  let usingBalance = balance;\r\n\r\n  if (typeof props.balance !== \"undefined\") usingBalance = props.balance;\r\n  if (typeof props.value !== \"undefined\") usingBalance = props.value;\r\n\r\n  if (usingBalance) {\r\n    const etherBalance = utils.formatEther(usingBalance);\r\n    parseFloat(etherBalance).toFixed(2);\r\n    floatBalance = parseFloat(etherBalance);\r\n  }\r\n\r\n  let displayBalance = floatBalance.toFixed(4);\r\n\r\n  const price = props.price || props.dollarMultiplier || 1;\r\n\r\n  if (dollarMode) {\r\n    displayBalance = \"$\" + (floatBalance * price).toFixed(2);\r\n  }\r\n\r\n  return (\r\n    <span\r\n      style={{\r\n        verticalAlign: \"middle\",\r\n        fontSize: props.size ? props.size : 24,\r\n        padding: 8,\r\n        cursor: \"pointer\",\r\n      }}\r\n      onClick={() => {\r\n        setDollarMode(!dollarMode);\r\n      }}\r\n    >\r\n      {displayBalance}\r\n    </span>\r\n  );\r\n}\r\n","import { notification } from \"antd\";\r\nimport Notify from \"bnc-notify\";\r\nimport { BLOCKNATIVE_DAPPID } from \"../constants\";\r\n\r\nconst { ethers } = require(\"ethers\");\r\n\r\n// this should probably just be renamed to \"notifier\"\r\n// it is basically just a wrapper around BlockNative's wonderful Notify.js\r\n// https://docs.blocknative.com/notify\r\nconst callbacks = {};\r\n\r\nconst DEBUG = true;\r\n\r\nexport default function Transactor(providerOrSigner, gasPrice, etherscan) {\r\n  if (typeof providerOrSigner !== \"undefined\") {\r\n    // eslint-disable-next-line consistent-return\r\n    return async (tx, callback) => {\r\n      let signer;\r\n      let network;\r\n      let provider;\r\n      if (ethers.Signer.isSigner(providerOrSigner) === true) {\r\n        provider = providerOrSigner.provider;\r\n        signer = providerOrSigner;\r\n        network = providerOrSigner.provider && (await providerOrSigner.provider.getNetwork());\r\n      } else if (providerOrSigner._isProvider) {\r\n        provider = providerOrSigner;\r\n        signer = providerOrSigner.getSigner();\r\n        network = await providerOrSigner.getNetwork();\r\n      }\r\n\r\n      console.log(\"network\", network);\r\n      var options = null;\r\n      var notify = null;\r\n      options = {\r\n        dappId: BLOCKNATIVE_DAPPID, // GET YOUR OWN KEY AT https://account.blocknative.com\r\n        system: \"ethereum\",\r\n        networkId: network.chainId,\r\n        // darkMode: Boolean, // (default: false)\r\n        transactionHandler: txInformation => {\r\n          if (DEBUG) console.log(\"HANDLE TX\", txInformation);\r\n          const possibleFunction = callbacks[txInformation.transaction.hash];\r\n          if (typeof possibleFunction === \"function\") {\r\n            possibleFunction(txInformation.transaction);\r\n          }\r\n        },\r\n      };\r\n\r\n      notify = Notify(options);\r\n\r\n      let etherscanNetwork = \"\";\r\n      if (network.name && network.chainId > 1) {\r\n        etherscanNetwork = network.name + \".\";\r\n      }\r\n\r\n      let etherscanTxUrl = \"https://\" + etherscanNetwork + \"etherscan.io/tx/\";\r\n      if (network.chainId === 100) {\r\n        etherscanTxUrl = \"https://blockscout.com/poa/xdai/tx/\";\r\n      }\r\n\r\n      try {\r\n        let result;\r\n        if (tx instanceof Promise) {\r\n          if (DEBUG) console.log(\"AWAITING TX\", tx);\r\n          result = await tx;\r\n        } else {\r\n          if (!tx.gasPrice) {\r\n            tx.gasPrice = gasPrice || ethers.utils.parseUnits(\"4.1\", \"gwei\");\r\n          }\r\n          if (!tx.gasLimit) {\r\n            tx.gasLimit = ethers.utils.hexlify(120000);\r\n          }\r\n          if (DEBUG) console.log(\"RUNNING TX\", tx);\r\n          result = await signer.sendTransaction(tx);\r\n        }\r\n        if (DEBUG) console.log(\"RESULT:\", result);\r\n        // console.log(\"Notify\", notify);\r\n\r\n        if (callback) {\r\n          callbacks[result.hash] = callback;\r\n        }\r\n\r\n        // if it is a valid Notify.js network, use that, if not, just send a default notification\r\n        if (notify && [1, 3, 4, 5, 42, 100].indexOf(network.chainId) >= 0) {\r\n          const { emitter } = notify.hash(result.hash);\r\n          emitter.on(\"all\", transaction => {\r\n            return {\r\n              onclick: () => window.open((etherscan || etherscanTxUrl) + transaction.hash),\r\n            };\r\n          });\r\n        } else {\r\n          notification.info({\r\n            message: \"Local Transaction Sent\",\r\n            description: result.hash,\r\n            placement: \"bottomRight\",\r\n          });\r\n          // on most networks BlockNative will update a transaction handler,\r\n          // but locally we will set an interval to listen...\r\n          if (callback) {\r\n            const txResult = await tx;\r\n            const listeningInterval = setInterval(async () => {\r\n              console.log(\"CHECK IN ON THE TX\", txResult, provider);\r\n              const currentTransactionReceipt = await provider.getTransactionReceipt(txResult.hash);\r\n              if (currentTransactionReceipt && currentTransactionReceipt.confirmations) {\r\n                callback({ ...txResult, ...currentTransactionReceipt });\r\n                clearInterval(listeningInterval);\r\n              }\r\n            }, 500);\r\n          }\r\n        }\r\n\r\n        if (typeof result.wait === \"function\") {\r\n          await result.wait();\r\n        }\r\n\r\n        return result;\r\n      } catch (e) {\r\n        if (DEBUG) console.log(e);\r\n        // Accounts for Metamask and default signer on all networks\r\n        let message =\r\n          e.data && e.data.message\r\n            ? e.data.message\r\n            : e.error && JSON.parse(JSON.stringify(e.error)).body\r\n            ? JSON.parse(JSON.parse(JSON.stringify(e.error)).body).error.message\r\n            : e.data\r\n            ? e.data\r\n            : JSON.stringify(e);\r\n        if (!e.error && e.message) {\r\n          message = e.message;\r\n        }\r\n\r\n        console.log(\"Attempt to clean up:\", message);\r\n        try {\r\n          let obj = JSON.parse(message);\r\n          if (obj && obj.body) {\r\n            let errorObj = JSON.parse(obj.body);\r\n            if (errorObj && errorObj.error && errorObj.error.message) {\r\n              message = errorObj.error.message;\r\n            }\r\n          }\r\n        } catch (e) {\r\n          //ignore\r\n        }\r\n\r\n        notification.error({\r\n          message: \"Transaction Error\",\r\n          description: message,\r\n        });\r\n        if (callback && typeof callback === \"function\") {\r\n          callback(e);\r\n        }\r\n      }\r\n    };\r\n  }\r\n}\r\n","import Fortmatic from \"fortmatic\";\r\nimport WalletLink from \"walletlink\";\r\nimport Web3Modal from \"web3modal\";\r\nimport Portis from \"@portis/web3\";\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\r\nimport Authereum from \"authereum\";\r\nimport { INFURA_ID, ALCHEMY_KEY } from \"../constants\";\r\n\r\n// Coinbase walletLink init\r\nconst walletLink = new WalletLink({\r\n  appName: \"coinbase\",\r\n});\r\n\r\n// WalletLink provider\r\nconst walletLinkProvider = walletLink.makeWeb3Provider(`https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`, 1);\r\n\r\n// Portis ID: 6255fb2b-58c8-433b-a2c9-62098c05ddc9\r\n/*\r\n  Web3 modal helps us \"connect\" external wallets:\r\n*/\r\nconst web3ModalSetup = () =>\r\n  new Web3Modal({\r\n    network: \"mainnet\", // Optional. If using WalletConnect on xDai, change network to \"xdai\" and add RPC info below for xDai chain.\r\n    cacheProvider: true, // optional\r\n    theme: \"light\", // optional. Change to \"dark\" for a dark theme.\r\n    providerOptions: {\r\n      walletconnect: {\r\n        package: WalletConnectProvider, // required\r\n        options: {\r\n          bridge: \"https://polygon.bridge.walletconnect.org\",\r\n          infuraId: INFURA_ID,\r\n          rpc: {\r\n            1: `https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`, // mainnet // For more WalletConnect providers: https://docs.walletconnect.org/quick-start/dapps/web3-provider#required\r\n            42: `https://kovan.infura.io/v3/${INFURA_ID}`,\r\n            100: \"https://dai.poa.network\", // xDai\r\n          },\r\n        },\r\n      },\r\n      portis: {\r\n        display: {\r\n          logo: \"https://user-images.githubusercontent.com/9419140/128913641-d025bc0c-e059-42de-a57b-422f196867ce.png\",\r\n          name: \"Portis\",\r\n          description: \"Connect to Portis App\",\r\n        },\r\n        package: Portis,\r\n        options: {\r\n          id: \"6255fb2b-58c8-433b-a2c9-62098c05ddc9\",\r\n        },\r\n      },\r\n      fortmatic: {\r\n        package: Fortmatic, // required\r\n        options: {\r\n          key: \"pk_live_5A7C91B2FC585A17\", // required\r\n        },\r\n      },\r\n      // torus: {\r\n      //   package: Torus,\r\n      //   options: {\r\n      //     networkParams: {\r\n      //       host: \"https://localhost:8545\", // optional\r\n      //       chainId: 1337, // optional\r\n      //       networkId: 1337 // optional\r\n      //     },\r\n      //     config: {\r\n      //       buildEnv: \"development\" // optional\r\n      //     },\r\n      //   },\r\n      // },\r\n      \"custom-walletlink\": {\r\n        display: {\r\n          logo: \"https://play-lh.googleusercontent.com/PjoJoG27miSglVBXoXrxBSLveV6e3EeBPpNY55aiUUBM9Q1RCETKCOqdOkX2ZydqVf0\",\r\n          name: \"Coinbase\",\r\n          description: \"Connect to Coinbase Wallet (not Coinbase App)\",\r\n        },\r\n        package: walletLinkProvider,\r\n        connector: async (provider, _options) => {\r\n          await provider.enable();\r\n          return provider;\r\n        },\r\n      },\r\n      authereum: {\r\n        package: Authereum, // required\r\n      },\r\n    },\r\n  });\r\n\r\nexport default web3ModalSetup;\r\n","import React from \"react\";\r\nimport Blockies from \"react-blockies\";\r\n\r\n// provides a blockie image for the address using \"react-blockies\" library\r\n\r\nexport default function Blockie(props) {\r\n  if (!props.address || typeof props.address.toLowerCase !== \"function\") {\r\n    return <span />;\r\n  }\r\n  // eslint-disable-next-line react/jsx-props-no-spreading\r\n  return <Blockies seed={props.address.toLowerCase()} {...props} />;\r\n}\r\n","import { CameraOutlined, QrcodeOutlined } from \"@ant-design/icons\";\r\nimport { Badge, Input } from \"antd\";\r\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\r\nimport React, { useCallback, useState } from \"react\";\r\nimport QrReader from \"react-qr-reader\";\r\nimport Blockie from \"./Blockie\";\r\nimport { ethers } from \"ethers\";\r\n\r\n// probably we need to change value={toAddress} to address={toAddress}\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays an address input with QR scan option\r\n\r\n  ~ How can I use? ~\r\n\r\n  <AddressInput\r\n    autoFocus\r\n    ensProvider={mainnetProvider}\r\n    placeholder=\"Enter address\"\r\n    value={toAddress}\r\n    onChange={setToAddress}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\r\n  - Provide placeholder=\"Enter address\" value for the input\r\n  - Value of the address input is stored in value={toAddress}\r\n  - Control input change by onChange={setToAddress}\r\n                          or onChange={address => { setToAddress(address);}}\r\n*/\r\n\r\nconst isENS = (address = \"\") => address.endsWith(\".eth\") || address.endsWith(\".xyz\");\r\n\r\nexport default function AddressInput(props) {\r\n  const { ensProvider, onChange } = props;\r\n  const [value, setValue] = useState(props.value);\r\n  const [scan, setScan] = useState(false);\r\n\r\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\r\n  const ens = useLookupAddress(props.ensProvider, currentValue);\r\n\r\n  const updateAddress = useCallback(\r\n    async newValue => {\r\n      if (typeof newValue !== \"undefined\") {\r\n        let address = newValue;\r\n        if (isENS(address)) {\r\n          try {\r\n            const possibleAddress = await ensProvider.resolveName(address);\r\n            if (possibleAddress) {\r\n              address = possibleAddress;\r\n            }\r\n            // eslint-disable-next-line no-empty\r\n          } catch (e) {}\r\n        }\r\n        setValue(address);\r\n        if (typeof onChange === \"function\") {\r\n          onChange(address);\r\n        }\r\n      }\r\n    },\r\n    [ensProvider, onChange],\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {scan ? (\r\n        <div\r\n          style={{\r\n            zIndex: 256,\r\n            position: \"absolute\",\r\n            left: 0,\r\n            top: 0,\r\n            width: \"100%\",\r\n          }}\r\n          onClick={() => {\r\n            setScan(false);\r\n          }}\r\n        >\r\n          <QrReader\r\n            delay={250}\r\n            resolution={1200}\r\n            onError={e => {\r\n              console.log(\"SCAN ERROR\", e);\r\n              setScan(false);\r\n            }}\r\n            onScan={newValue => {\r\n              if (newValue) {\r\n                console.log(\"SCAN VALUE\", newValue);\r\n                let possibleNewValue = newValue;\r\n                if (possibleNewValue.indexOf(\"/\") >= 0) {\r\n                  possibleNewValue = possibleNewValue.substr(possibleNewValue.lastIndexOf(\"0x\"));\r\n                  console.log(\"CLEANED VALUE\", possibleNewValue);\r\n                }\r\n                setScan(false);\r\n                updateAddress(possibleNewValue);\r\n              }\r\n            }}\r\n            style={{ width: \"100%\" }}\r\n          />\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <Input\r\n        id=\"0xAddress\" // name it something other than address for auto fill doxxing\r\n        name=\"0xAddress\" // name it something other than address for auto fill doxxing\r\n        autoComplete=\"off\"\r\n        autoFocus={props.autoFocus}\r\n        placeholder={props.placeholder ? props.placeholder : \"address\"}\r\n        prefix={<Blockie address={currentValue} size={8} scale={3} />}\r\n        value={ethers.utils.isAddress(currentValue) && !isENS(currentValue) && isENS(ens) ? ens : currentValue}\r\n        addonAfter={\r\n          <div\r\n            style={{ marginTop: 4, cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              setScan(!scan);\r\n            }}\r\n          >\r\n            <Badge count={<CameraOutlined style={{ fontSize: 9 }} />}>\r\n              <QrcodeOutlined style={{ fontSize: 18 }} />\r\n            </Badge>{\" \"}\r\n            Scan\r\n          </div>\r\n        }\r\n        onChange={e => {\r\n          updateAddress(e.target.value);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import { Input } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n// small change in useEffect, display currentValue if it's provided by user\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays input field for ETH/USD amount, with an option to convert between ETH and USD\r\n\r\n  ~ How can I use? ~\r\n\r\n  <EtherInput\r\n    autofocus\r\n    price={price}\r\n    value=100\r\n    placeholder=\"Enter amount\"\r\n    onChange={value => {\r\n      setAmount(value);\r\n    }}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide price={price} of ether and easily convert between USD and ETH\r\n  - Provide value={value} to specify initial amount of ether\r\n  - Provide placeholder=\"Enter amount\" value for the input\r\n  - Control input change by onChange={value => { setAmount(value);}}\r\n*/\r\n\r\nexport default function EtherInput(props) {\r\n  const [mode, setMode] = useState(props.price ? \"USD\" : \"ETH\");\r\n  const [display, setDisplay] = useState();\r\n  const [value, setValue] = useState();\r\n\r\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\r\n\r\n  useEffect(() => {\r\n    if (!currentValue) {\r\n      setDisplay(\"\");\r\n    }\r\n  }, [currentValue]);\r\n\r\n  return (\r\n    <Input\r\n      placeholder={props.placeholder ? props.placeholder : \"amount in \" + mode}\r\n      autoFocus={props.autoFocus}\r\n      prefix={mode === \"USD\" ? \"$\" : \"Ξ\"}\r\n      value={display}\r\n      addonAfter={\r\n        !props.price ? (\r\n          \"\"\r\n        ) : (\r\n          <div\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              if (mode === \"USD\") {\r\n                setMode(\"ETH\");\r\n                setDisplay(currentValue);\r\n              } else {\r\n                setMode(\"USD\");\r\n                if (currentValue) {\r\n                  const usdValue = \"\" + (parseFloat(currentValue) * props.price).toFixed(2);\r\n                  setDisplay(usdValue);\r\n                } else {\r\n                  setDisplay(currentValue);\r\n                }\r\n              }\r\n            }}\r\n          >\r\n            {mode === \"USD\" ? \"USD 🔀\" : \"ETH 🔀\"}\r\n          </div>\r\n        )\r\n      }\r\n      onChange={async e => {\r\n        const newValue = e.target.value;\r\n        if (mode === \"USD\") {\r\n          const possibleNewValue = parseFloat(newValue);\r\n          if (possibleNewValue) {\r\n            const ethValue = possibleNewValue / props.price;\r\n            setValue(ethValue);\r\n            if (typeof props.onChange === \"function\") {\r\n              props.onChange(ethValue);\r\n            }\r\n            setDisplay(newValue);\r\n          } else {\r\n            setDisplay(newValue);\r\n          }\r\n        } else {\r\n          setValue(newValue);\r\n          if (typeof props.onChange === \"function\") {\r\n            props.onChange(newValue);\r\n          }\r\n          setDisplay(newValue);\r\n        }\r\n      }}\r\n    />\r\n  );\r\n}\r\n","import { KeyOutlined, QrcodeOutlined, SendOutlined, WalletOutlined } from \"@ant-design/icons\";\r\nimport { Button, Modal, Spin, Tooltip, Typography } from \"antd\";\r\nimport { ethers } from \"ethers\";\r\nimport QR from \"qrcode.react\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Transactor } from \"../helpers\";\r\nimport Address from \"./Address\";\r\nimport AddressInput from \"./AddressInput\";\r\nimport Balance from \"./Balance\";\r\nimport EtherInput from \"./EtherInput\";\r\n\r\nconst { Text, Paragraph } = Typography;\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays a wallet where you can specify address and send USD/ETH, with options to\r\n  scan address, to convert between USD and ETH, to see and generate private keys,\r\n  to send, receive and extract the burner wallet\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Wallet\r\n    provider={userProvider}\r\n    address={address}\r\n    ensProvider={mainnetProvider}\r\n    price={price}\r\n    color='red'\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide provider={userProvider} to display a wallet\r\n  - Provide address={address} if you want to specify address, otherwise\r\n                                                    your default address will be used\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\r\n  - Provide price={price} of ether and easily convert between USD and ETH\r\n  - Provide color to specify the color of wallet icon\r\n*/\r\n\r\nexport default function Wallet(props) {\r\n  const [signerAddress, setSignerAddress] = useState();\r\n  useEffect(() => {\r\n    async function getAddress() {\r\n      if (props.signer) {\r\n        const newAddress = await props.signer.getAddress();\r\n        setSignerAddress(newAddress);\r\n      }\r\n    }\r\n    getAddress();\r\n  }, [props.signer]);\r\n\r\n  const selectedAddress = props.address || signerAddress;\r\n\r\n  const [open, setOpen] = useState();\r\n  const [qr, setQr] = useState();\r\n  const [amount, setAmount] = useState();\r\n  const [toAddress, setToAddress] = useState();\r\n  const [pk, setPK] = useState();\r\n\r\n  const providerSend = props.provider ? (\r\n    <Tooltip title=\"Wallet\">\r\n      <WalletOutlined\r\n        onClick={() => {\r\n          setOpen(!open);\r\n        }}\r\n        rotate={-90}\r\n        style={{\r\n          padding: 7,\r\n          color: props.color ? props.color : \"\",\r\n          cursor: \"pointer\",\r\n          fontSize: 28,\r\n          verticalAlign: \"middle\",\r\n        }}\r\n      />\r\n    </Tooltip>\r\n  ) : (\r\n    \"\"\r\n  );\r\n\r\n  let display;\r\n  let receiveButton;\r\n  let privateKeyButton;\r\n  if (qr) {\r\n    display = (\r\n      <div>\r\n        <div>\r\n          <Text copyable>{selectedAddress}</Text>\r\n        </div>\r\n        <QR\r\n          value={selectedAddress}\r\n          size=\"450\"\r\n          level=\"H\"\r\n          includeMargin\r\n          renderAs=\"svg\"\r\n          imageSettings={{ excavate: false }}\r\n        />\r\n      </div>\r\n    );\r\n    receiveButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={() => {\r\n          setQr(\"\");\r\n        }}\r\n      >\r\n        <QrcodeOutlined /> Hide\r\n      </Button>\r\n    );\r\n    privateKeyButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={() => {\r\n          setPK(selectedAddress);\r\n          setQr(\"\");\r\n        }}\r\n      >\r\n        <KeyOutlined /> Private Key\r\n      </Button>\r\n    );\r\n  } else if (pk) {\r\n    const pk = localStorage.getItem(\"metaPrivateKey\");\r\n    const wallet = new ethers.Wallet(pk);\r\n\r\n    if (wallet.address !== selectedAddress) {\r\n      display = (\r\n        <div>\r\n          <b>*injected account*, private key unknown</b>\r\n        </div>\r\n      );\r\n    } else {\r\n      const extraPkDisplayAdded = {};\r\n      const extraPkDisplay = [];\r\n      extraPkDisplayAdded[wallet.address] = true;\r\n      extraPkDisplay.push(\r\n        <div style={{ fontSize: 16, padding: 2, backgroundStyle: \"#89e789\" }}>\r\n          <a href={\"/pk#\" + pk}>\r\n            <Address minimized address={wallet.address} ensProvider={props.ensProvider} /> {wallet.address.substr(0, 6)}\r\n          </a>\r\n        </div>,\r\n      );\r\n      for (const key in localStorage) {\r\n        if (key.indexOf(\"metaPrivateKey_backup\") >= 0) {\r\n          console.log(key);\r\n          const pastpk = localStorage.getItem(key);\r\n          const pastwallet = new ethers.Wallet(pastpk);\r\n          if (!extraPkDisplayAdded[pastwallet.address] /* && selectedAddress!=pastwallet.address */) {\r\n            extraPkDisplayAdded[pastwallet.address] = true;\r\n            extraPkDisplay.push(\r\n              <div style={{ fontSize: 16 }}>\r\n                <a href={\"/pk#\" + pastpk}>\r\n                  <Address minimized address={pastwallet.address} ensProvider={props.ensProvider} />{\" \"}\r\n                  {pastwallet.address.substr(0, 6)}\r\n                </a>\r\n              </div>,\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      display = (\r\n        <div>\r\n          <b>Private Key:</b>\r\n\r\n          <div>\r\n            <Text copyable>{pk}</Text>\r\n          </div>\r\n\r\n          <hr />\r\n\r\n          <i>\r\n            Point your camera phone at qr code to open in\r\n            <a target=\"_blank\" href={\"https://xdai.io/\" + pk} rel=\"noopener noreferrer\">\r\n              burner wallet\r\n            </a>\r\n            :\r\n          </i>\r\n          <QR\r\n            value={\"https://xdai.io/\" + pk}\r\n            size=\"450\"\r\n            level=\"H\"\r\n            includeMargin\r\n            renderAs=\"svg\"\r\n            imageSettings={{ excavate: false }}\r\n          />\r\n\r\n          <Paragraph style={{ fontSize: \"16\" }} copyable>\r\n            {\"https://xdai.io/\" + pk}\r\n          </Paragraph>\r\n\r\n          {extraPkDisplay ? (\r\n            <div>\r\n              <h3>Known Private Keys:</h3>\r\n              {extraPkDisplay}\r\n              <Button\r\n                onClick={() => {\r\n                  const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\r\n                  if (currentPrivateKey) {\r\n                    window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\r\n                  }\r\n                  const randomWallet = ethers.Wallet.createRandom();\r\n                  const privateKey = randomWallet._signingKey().privateKey;\r\n                  window.localStorage.setItem(\"metaPrivateKey\", privateKey);\r\n                  window.location.reload();\r\n                }}\r\n              >\r\n                Generate\r\n              </Button>\r\n            </div>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    receiveButton = (\r\n      <Button\r\n        key=\"receive\"\r\n        onClick={() => {\r\n          setQr(selectedAddress);\r\n          setPK(\"\");\r\n        }}\r\n      >\r\n        <QrcodeOutlined /> Receive\r\n      </Button>\r\n    );\r\n    privateKeyButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={() => {\r\n          setPK(\"\");\r\n          setQr(\"\");\r\n        }}\r\n      >\r\n        <KeyOutlined /> Hide\r\n      </Button>\r\n    );\r\n  } else {\r\n    const inputStyle = {\r\n      padding: 10,\r\n    };\r\n\r\n    display = (\r\n      <div>\r\n        <div style={inputStyle}>\r\n          <AddressInput\r\n            autoFocus\r\n            ensProvider={props.ensProvider}\r\n            placeholder=\"to address\"\r\n            address={toAddress}\r\n            onChange={setToAddress}\r\n          />\r\n        </div>\r\n        <div style={inputStyle}>\r\n          <EtherInput\r\n            price={props.price}\r\n            value={amount}\r\n            onChange={value => {\r\n              setAmount(value);\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n    receiveButton = (\r\n      <Button\r\n        key=\"receive\"\r\n        onClick={() => {\r\n          setQr(selectedAddress);\r\n          setPK(\"\");\r\n        }}\r\n      >\r\n        <QrcodeOutlined /> Receive\r\n      </Button>\r\n    );\r\n    privateKeyButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={() => {\r\n          setPK(selectedAddress);\r\n          setQr(\"\");\r\n        }}\r\n      >\r\n        <KeyOutlined /> Private Key\r\n      </Button>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <span>\r\n      {providerSend}\r\n      <Modal\r\n        visible={open}\r\n        title={\r\n          <div>\r\n            {selectedAddress ? <Address address={selectedAddress} ensProvider={props.ensProvider} /> : <Spin />}\r\n            <div style={{ float: \"right\", paddingRight: 25 }}>\r\n              <Balance address={selectedAddress} provider={props.provider} dollarMultiplier={props.price} />\r\n            </div>\r\n          </div>\r\n        }\r\n        onOk={() => {\r\n          setQr();\r\n          setPK();\r\n          setOpen(!open);\r\n        }}\r\n        onCancel={() => {\r\n          setQr();\r\n          setPK();\r\n          setOpen(!open);\r\n        }}\r\n        footer={[\r\n          privateKeyButton,\r\n          receiveButton,\r\n          <Button\r\n            key=\"submit\"\r\n            type=\"primary\"\r\n            disabled={!amount || !toAddress || qr}\r\n            loading={false}\r\n            onClick={() => {\r\n              const tx = Transactor(props.signer || props.provider);\r\n\r\n              let value;\r\n              try {\r\n                value = ethers.utils.parseEther(\"\" + amount);\r\n              } catch (e) {\r\n                // failed to parseEther, try something else\r\n                value = ethers.utils.parseEther(\"\" + parseFloat(amount).toFixed(8));\r\n              }\r\n\r\n              tx({\r\n                to: toAddress,\r\n                value,\r\n              });\r\n              setOpen(!open);\r\n              setQr();\r\n            }}\r\n          >\r\n            <SendOutlined /> Send\r\n          </Button>,\r\n        ]}\r\n      >\r\n        {display}\r\n      </Modal>\r\n    </span>\r\n  );\r\n}\r\n","import { Button } from \"antd\";\r\nimport React from \"react\";\r\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\r\nimport Address from \"./Address\";\r\nimport Balance from \"./Balance\";\r\nimport Wallet from \"./Wallet\";\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays an Address, Balance, and Wallet as one Account component,\r\n  also allows users to log in to existing accounts and log out\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Account\r\n    useBurner={boolean}\r\n    address={address}\r\n    localProvider={localProvider}\r\n    userProvider={userProvider}\r\n    mainnetProvider={mainnetProvider}\r\n    price={price}\r\n    web3Modal={web3Modal}\r\n    loadWeb3Modal={loadWeb3Modal}\r\n    logoutOfWeb3Modal={logoutOfWeb3Modal}\r\n    blockExplorer={blockExplorer}\r\n    isContract={boolean}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide address={address} and get balance corresponding to the given address\r\n  - Provide localProvider={localProvider} to access balance on local network\r\n  - Provide userProvider={userProvider} to display a wallet\r\n  - Provide mainnetProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\")\r\n  - Provide price={price} of ether and get your balance converted to dollars\r\n  - Provide web3Modal={web3Modal}, loadWeb3Modal={loadWeb3Modal}, logoutOfWeb3Modal={logoutOfWeb3Modal}\r\n              to be able to log in/log out to/from existing accounts\r\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\r\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\r\n*/\r\n\r\nexport default function Account({\r\n  useBurner,\r\n  address,\r\n  userSigner,\r\n  localProvider,\r\n  mainnetProvider,\r\n  price,\r\n  minimized,\r\n  web3Modal,\r\n  loadWeb3Modal,\r\n  logoutOfWeb3Modal,\r\n  blockExplorer,\r\n  isContract,\r\n}) {\r\n  const { currentTheme } = useThemeSwitcher();\r\n\r\n  function isValidAddress(address) {\r\n    return address && address !== \"0x0000000000000000000000000000000000000000\";\r\n  }\r\n\r\n  const modalButtons = [];\r\n  if (web3Modal) {\r\n    if (web3Modal.cachedProvider) {\r\n      modalButtons.push(\r\n        <Button\r\n          key=\"logoutbutton\"\r\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\r\n          shape=\"round\"\r\n          size=\"large\"\r\n          onClick={logoutOfWeb3Modal}\r\n        >\r\n          logout\r\n        </Button>,\r\n      );\r\n    } else {\r\n      modalButtons.push(\r\n        <Button\r\n          key=\"loginbutton\"\r\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\r\n          shape=\"round\"\r\n          size=\"large\"\r\n          /* type={minimized ? \"default\" : \"primary\"}     too many people just defaulting to MM and having a bad time */\r\n          onClick={loadWeb3Modal}\r\n        >\r\n          connect\r\n        </Button>,\r\n      );\r\n    }\r\n  }\r\n  const display = minimized ? (\r\n    \"\"\r\n  ) : (\r\n    <span>\r\n      {web3Modal && web3Modal.cachedProvider ? (\r\n        <>\r\n          {address && <Address address={address} ensProvider={mainnetProvider} blockExplorer={blockExplorer} />}\r\n          <Balance address={address} provider={localProvider} price={price} />\r\n          <Wallet\r\n            address={address}\r\n            provider={localProvider}\r\n            signer={userSigner}\r\n            ensProvider={mainnetProvider}\r\n            price={price}\r\n            color={currentTheme === \"light\" ? \"#1890ff\" : \"#2caad9\"}\r\n          />\r\n        </>\r\n      ) : useBurner ? (\r\n        \"\"\r\n      ) : isContract ? (\r\n        <>\r\n          {address && <Address address={address} ensProvider={mainnetProvider} blockExplorer={blockExplorer} />}\r\n          <Balance address={address} provider={localProvider} price={price} />\r\n        </>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      {useBurner && web3Modal && !web3Modal.cachedProvider ? (\r\n        <>\r\n          <Address address={address} ensProvider={mainnetProvider} blockExplorer={blockExplorer} />\r\n          <Balance address={address} provider={localProvider} price={price} />\r\n          <Wallet\r\n            address={address}\r\n            provider={localProvider}\r\n            signer={userSigner}\r\n            ensProvider={mainnetProvider}\r\n            price={price}\r\n            color={currentTheme === \"light\" ? \"#1890ff\" : \"#2caad9\"}\r\n          />\r\n        </>\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </span>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {display}\r\n      {modalButtons}\r\n    </div>\r\n  );\r\n}\r\n","import { Input } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nconst { utils, constants } = require(\"ethers\");\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays input field with options to convert between STRING and BYTES32\r\n\r\n  ~ How can I use? ~\r\n\r\n  <BytesStringInput\r\n    autofocus\r\n    value={\"scaffold-eth\"}\r\n    placeholder=\"Enter value...\"\r\n    onChange={value => {\r\n      setValue(value);\r\n    }}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide value={value} to specify initial string\r\n  - Provide placeholder=\"Enter value...\" value for the input\r\n  - Control input change by onChange={value => { setValue(value);}}\r\n\r\n*/\r\n\r\nexport default function BytesStringInput(props) {\r\n  const [mode, setMode] = useState(\"STRING\");\r\n  const [display, setDisplay] = useState();\r\n  const [value, setValue] = useState(constants.HashZero);\r\n\r\n  // current value is the value in bytes32\r\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\r\n\r\n  const option = title => {\r\n    return (\r\n      <div\r\n        style={{ cursor: \"pointer\" }}\r\n        onClick={() => {\r\n          if (mode === \"STRING\") {\r\n            setMode(\"BYTES32\");\r\n            if (!utils.isHexString(currentValue)) {\r\n              /* in case user enters invalid bytes32 number,\r\n                   it considers it as string and converts to bytes32 */\r\n              const changedValue = utils.formatBytes32String(currentValue);\r\n              setDisplay(changedValue);\r\n            } else {\r\n              setDisplay(currentValue);\r\n            }\r\n          } else {\r\n            setMode(\"STRING\");\r\n            if (currentValue && utils.isHexString(currentValue)) {\r\n              setDisplay(utils.parseBytes32String(currentValue));\r\n            } else {\r\n              setDisplay(currentValue);\r\n            }\r\n          }\r\n        }}\r\n      >\r\n        {title}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  let addonAfter;\r\n  if (mode === \"STRING\") {\r\n    addonAfter = option(\"STRING 🔀\");\r\n  } else {\r\n    addonAfter = option(\"BYTES32 🔀\");\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!currentValue) {\r\n      setDisplay(\"\");\r\n    }\r\n  }, [currentValue]);\r\n\r\n  return (\r\n    <Input\r\n      placeholder={props.placeholder ? props.placeholder : \"Enter value in \" + mode}\r\n      autoFocus={props.autoFocus}\r\n      value={display}\r\n      addonAfter={addonAfter}\r\n      onChange={async e => {\r\n        const newValue = e.target.value;\r\n        if (mode === \"STRING\") {\r\n          // const ethValue = parseFloat(newValue) / props.price;\r\n          // setValue(ethValue);\r\n          if (typeof props.onChange === \"function\") {\r\n            props.onChange(utils.formatBytes32String(newValue));\r\n          }\r\n          setValue(utils.formatBytes32String(newValue));\r\n          setDisplay(newValue);\r\n        } else {\r\n          if (typeof props.onChange === \"function\") {\r\n            props.onChange(newValue);\r\n          }\r\n          setValue(newValue);\r\n          setDisplay(newValue);\r\n        }\r\n      }}\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Address from \"../Address\";\r\n\r\nconst { utils } = require(\"ethers\");\r\n\r\nconst tryToDisplay = (thing, asText = false) => {\r\n  if (thing && thing.toNumber) {\r\n    try {\r\n      return thing.toNumber();\r\n    } catch (e) {\r\n      const displayable = \"Ξ\" + utils.formatUnits(thing, \"ether\");\r\n      return asText ? displayable : <span style={{ overflowWrap: \"break-word\", width: \"100%\" }}>{displayable}</span>;\r\n    }\r\n  }\r\n  if (thing && thing.indexOf && thing.indexOf(\"0x\") === 0 && thing.length === 42) {\r\n    return asText ? thing : <Address address={thing} fontSize={22} />;\r\n  }\r\n  if (thing && thing.constructor && thing.constructor.name == \"Array\") {\r\n    const mostReadable = v => ([\"number\", \"boolean\"].includes(typeof v) ? v : tryToDisplayAsText(v));\r\n    const displayable = JSON.stringify(thing.map(mostReadable));\r\n    return asText ? (\r\n      displayable\r\n    ) : (\r\n      <span style={{ overflowWrap: \"break-word\", width: \"100%\" }}>{displayable.replaceAll(\",\", \",\\n\")}</span>\r\n    );\r\n  }\r\n  return JSON.stringify(thing);\r\n};\r\n\r\nconst tryToDisplayAsText = thing => tryToDisplay(thing, true);\r\n\r\nexport { tryToDisplay, tryToDisplayAsText };\r\n","import { Col, Divider, Row } from \"antd\";\r\nimport React, { useCallback, useEffect, useState } from \"react\";\r\nimport { tryToDisplay } from \"./utils\";\r\n\r\nconst DisplayVariable = ({ contractFunction, functionInfo, refreshRequired, triggerRefresh }) => {\r\n  const [variable, setVariable] = useState(\"\");\r\n\r\n  const refresh = useCallback(async () => {\r\n    try {\r\n      const funcResponse = await contractFunction();\r\n      setVariable(funcResponse);\r\n      triggerRefresh(false);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }, [setVariable, contractFunction, triggerRefresh]);\r\n\r\n  useEffect(() => {\r\n    refresh();\r\n  }, [refresh, refreshRequired, contractFunction]);\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col\r\n          span={8}\r\n          style={{\r\n            textAlign: \"right\",\r\n            opacity: 0.333,\r\n            paddingRight: 6,\r\n            fontSize: 24,\r\n          }}\r\n        >\r\n          {functionInfo.name}\r\n        </Col>\r\n        <Col span={14}>\r\n          <h2>{tryToDisplay(variable)}</h2>\r\n        </Col>\r\n        <Col span={2}>\r\n          <h2>\r\n            <a href=\"#\" onClick={refresh}>\r\n              🔄\r\n            </a>\r\n          </h2>\r\n        </Col>\r\n      </Row>\r\n      <Divider />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DisplayVariable;\r\n","import { Button, Col, Divider, Input, Row, Tooltip } from \"antd\";\r\nimport React, { useState } from \"react\";\r\nimport Blockies from \"react-blockies\";\r\nimport { Transactor } from \"../../helpers\";\r\nimport { tryToDisplay, tryToDisplayAsText } from \"./utils\";\r\n\r\nconst { utils, BigNumber } = require(\"ethers\");\r\n\r\nconst getFunctionInputKey = (functionInfo, input, inputIndex) => {\r\n  const name = input?.name ? input.name : \"input_\" + inputIndex + \"_\";\r\n  return functionInfo.name + \"_\" + name + \"_\" + input.type;\r\n};\r\n\r\nexport default function FunctionForm({ contractFunction, functionInfo, provider, gasPrice, triggerRefresh }) {\r\n  const [form, setForm] = useState({});\r\n  const [txValue, setTxValue] = useState();\r\n  const [returnValue, setReturnValue] = useState();\r\n\r\n  const tx = Transactor(provider, gasPrice);\r\n\r\n  const inputs = functionInfo.inputs.map((input, inputIndex) => {\r\n    const key = getFunctionInputKey(functionInfo, input, inputIndex);\r\n\r\n    let buttons = \"\";\r\n    if (input.type === \"bytes32\") {\r\n      buttons = (\r\n        <Tooltip placement=\"right\" title=\"to bytes32\">\r\n          <div\r\n            type=\"dashed\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={async () => {\r\n              if (utils.isHexString(form[key])) {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.parseBytes32String(form[key]);\r\n                setForm(formUpdate);\r\n              } else {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.formatBytes32String(form[key]);\r\n                setForm(formUpdate);\r\n              }\r\n            }}\r\n          >\r\n            #️⃣\r\n          </div>\r\n        </Tooltip>\r\n      );\r\n    } else if (input.type === \"bytes\") {\r\n      buttons = (\r\n        <Tooltip placement=\"right\" title=\"to hex\">\r\n          <div\r\n            type=\"dashed\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={async () => {\r\n              if (utils.isHexString(form[key])) {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.toUtf8String(form[key]);\r\n                setForm(formUpdate);\r\n              } else {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]));\r\n                setForm(formUpdate);\r\n              }\r\n            }}\r\n          >\r\n            #️⃣\r\n          </div>\r\n        </Tooltip>\r\n      );\r\n    } else if (input.type === \"uint256\") {\r\n      buttons = (\r\n        <Tooltip placement=\"right\" title=\"* 10 ** 18\">\r\n          <div\r\n            type=\"dashed\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={async () => {\r\n              const formUpdate = { ...form };\r\n              formUpdate[key] = utils.parseEther(form[key]);\r\n              setForm(formUpdate);\r\n            }}\r\n          >\r\n            ✴️\r\n          </div>\r\n        </Tooltip>\r\n      );\r\n    } else if (input.type === \"address\") {\r\n      const possibleAddress = form[key] && form[key].toLowerCase && form[key].toLowerCase().trim();\r\n      if (possibleAddress && possibleAddress.length === 42) {\r\n        buttons = (\r\n          <Tooltip placement=\"right\" title=\"blockie\">\r\n            <Blockies seed={possibleAddress} scale={3} />\r\n          </Tooltip>\r\n        );\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div style={{ margin: 2 }} key={key}>\r\n        <Input\r\n          size=\"large\"\r\n          placeholder={input.name ? input.type + \" \" + input.name : input.type}\r\n          autoComplete=\"off\"\r\n          value={form[key]}\r\n          name={key}\r\n          onChange={event => {\r\n            const formUpdate = { ...form };\r\n            formUpdate[event.target.name] = event.target.value;\r\n            setForm(formUpdate);\r\n          }}\r\n          suffix={buttons}\r\n        />\r\n      </div>\r\n    );\r\n  });\r\n\r\n  const txValueInput = (\r\n    <div style={{ margin: 2 }} key=\"txValueInput\">\r\n      <Input\r\n        placeholder=\"transaction value\"\r\n        onChange={e => setTxValue(e.target.value)}\r\n        value={txValue}\r\n        addonAfter={\r\n          <div>\r\n            <Row>\r\n              <Col span={16}>\r\n                <Tooltip placement=\"right\" title=\" * 10^18 \">\r\n                  <div\r\n                    type=\"dashed\"\r\n                    style={{ cursor: \"pointer\" }}\r\n                    onClick={async () => {\r\n                      const floatValue = parseFloat(txValue);\r\n                      if (floatValue) setTxValue(\"\" + floatValue * 10 ** 18);\r\n                    }}\r\n                  >\r\n                    ✳️\r\n                  </div>\r\n                </Tooltip>\r\n              </Col>\r\n              <Col span={16}>\r\n                <Tooltip placement=\"right\" title=\"number to hex\">\r\n                  <div\r\n                    type=\"dashed\"\r\n                    style={{ cursor: \"pointer\" }}\r\n                    onClick={async () => {\r\n                      setTxValue(BigNumber.from(txValue).toHexString());\r\n                    }}\r\n                  >\r\n                    #️⃣\r\n                  </div>\r\n                </Tooltip>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n\r\n  if (functionInfo.payable) {\r\n    inputs.push(txValueInput);\r\n  }\r\n\r\n  const handleForm = returned => {\r\n    if (returned) {\r\n      setForm({});\r\n    }\r\n  };\r\n\r\n  const buttonIcon =\r\n    functionInfo.type === \"call\" ? (\r\n      <Button style={{ marginLeft: -32 }}>Read📡</Button>\r\n    ) : (\r\n      <Button style={{ marginLeft: -32 }}>Send💸</Button>\r\n    );\r\n  inputs.push(\r\n    <div style={{ cursor: \"pointer\", margin: 2 }} key=\"goButton\">\r\n      <Input\r\n        onChange={e => setReturnValue(e.target.value)}\r\n        defaultValue=\"\"\r\n        bordered={false}\r\n        disabled\r\n        value={returnValue}\r\n        suffix={\r\n          <div\r\n            style={{ width: 50, height: 30, margin: 0 }}\r\n            type=\"default\"\r\n            onClick={async () => {\r\n              const args = functionInfo.inputs.map((input, inputIndex) => {\r\n                const key = getFunctionInputKey(functionInfo, input, inputIndex);\r\n                let value = form[key];\r\n                if (input.baseType === \"array\") {\r\n                  value = JSON.parse(value);\r\n                } else if (input.type === \"bool\") {\r\n                  if (value === \"true\" || value === \"1\" || value === \"0x1\" || value === \"0x01\" || value === \"0x0001\") {\r\n                    value = 1;\r\n                  } else {\r\n                    value = 0;\r\n                  }\r\n                }\r\n                return value;\r\n              });\r\n\r\n              let result;\r\n              if (functionInfo.stateMutability === \"view\" || functionInfo.stateMutability === \"pure\") {\r\n                try {\r\n                  const returned = await contractFunction(...args);\r\n                  handleForm(returned);\r\n                  result = tryToDisplayAsText(returned);\r\n                } catch (err) {\r\n                  console.error(err);\r\n                }\r\n              } else {\r\n                const overrides = {};\r\n                if (txValue) {\r\n                  overrides.value = txValue; // ethers.utils.parseEther()\r\n                }\r\n                if (gasPrice) {\r\n                  overrides.gasPrice = gasPrice;\r\n                }\r\n                // Uncomment this if you want to skip the gas estimation for each transaction\r\n                // overrides.gasLimit = hexlify(1200000);\r\n\r\n                // console.log(\"Running with extras\",extras)\r\n                const returned = await tx(contractFunction(...args, overrides));\r\n                handleForm(returned);\r\n                result = tryToDisplay(returned);\r\n              }\r\n\r\n              console.log(\"SETTING RESULT:\", result);\r\n              setReturnValue(result);\r\n              triggerRefresh(true);\r\n            }}\r\n          >\r\n            {buttonIcon}\r\n          </div>\r\n        }\r\n      />\r\n    </div>,\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col\r\n          span={8}\r\n          style={{\r\n            textAlign: \"right\",\r\n            opacity: 0.333,\r\n            paddingRight: 6,\r\n            fontSize: 24,\r\n          }}\r\n        >\r\n          {functionInfo.name}\r\n        </Col>\r\n        <Col span={16}>{inputs}</Col>\r\n      </Row>\r\n      <Divider />\r\n    </div>\r\n  );\r\n}\r\n","import { Card } from \"antd\";\r\nimport React, { useMemo, useState } from \"react\";\r\nimport { useContractExistsAtAddress, useContractLoader } from \"eth-hooks\";\r\nimport Account from \"../Account\";\r\nimport DisplayVariable from \"./DisplayVariable\";\r\nimport FunctionForm from \"./FunctionForm\";\r\n\r\nconst noContractDisplay = (\r\n  <div>\r\n    Loading...{\" \"}\r\n    <div style={{ padding: 32 }}>\r\n      You need to run{\" \"}\r\n      <span\r\n        className=\"highlight\"\r\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n      >\r\n        yarn run chain\r\n      </span>{\" \"}\r\n      and{\" \"}\r\n      <span\r\n        className=\"highlight\"\r\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n      >\r\n        yarn run deploy\r\n      </span>{\" \"}\r\n      to see your contract here.\r\n    </div>\r\n    <div style={{ padding: 32 }}>\r\n      <span style={{ marginRight: 4 }} role=\"img\" aria-label=\"warning\">\r\n        ☢️\r\n      </span>\r\n      Warning: You might need to run\r\n      <span\r\n        className=\"highlight\"\r\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n      >\r\n        yarn run deploy\r\n      </span>{\" \"}\r\n      <i>again</i> after the frontend comes up!\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst isQueryable = fn => (fn.stateMutability === \"view\" || fn.stateMutability === \"pure\") && fn.inputs.length === 0;\r\n\r\nexport default function Contract({\r\n  customContract,\r\n  account,\r\n  gasPrice,\r\n  signer,\r\n  provider,\r\n  name,\r\n  show,\r\n  price,\r\n  blockExplorer,\r\n  chainId,\r\n  contractConfig,\r\n}) {\r\n  const contracts = useContractLoader(provider, contractConfig, chainId);\r\n  let contract;\r\n  if (!customContract) {\r\n    contract = contracts ? contracts[name] : \"\";\r\n  } else {\r\n    contract = customContract;\r\n  }\r\n\r\n  const address = contract ? contract.address : \"\";\r\n  const contractIsDeployed = useContractExistsAtAddress(provider, address);\r\n\r\n  const displayedContractFunctions = useMemo(() => {\r\n    const results = contract\r\n      ? Object.entries(contract.interface.functions).filter(\r\n          fn => fn[1][\"type\"] === \"function\" && !(show && show.indexOf(fn[1][\"name\"]) < 0),\r\n        )\r\n      : [];\r\n    return results;\r\n  }, [contract, show]);\r\n\r\n  const [refreshRequired, triggerRefresh] = useState(false);\r\n  const contractDisplay = displayedContractFunctions.map(contractFuncInfo => {\r\n    const contractFunc =\r\n      contractFuncInfo[1].stateMutability === \"view\" || contractFuncInfo[1].stateMutability === \"pure\"\r\n        ? contract[contractFuncInfo[0]]\r\n        : contract.connect(signer)[contractFuncInfo[0]];\r\n\r\n    if (typeof contractFunc === \"function\") {\r\n      if (isQueryable(contractFuncInfo[1])) {\r\n        // If there are no inputs, just display return value\r\n        return (\r\n          <DisplayVariable\r\n            key={contractFuncInfo[1].name}\r\n            contractFunction={contractFunc}\r\n            functionInfo={contractFuncInfo[1]}\r\n            refreshRequired={refreshRequired}\r\n            triggerRefresh={triggerRefresh}\r\n          />\r\n        );\r\n      }\r\n\r\n      // If there are inputs, display a form to allow users to provide these\r\n      return (\r\n        <FunctionForm\r\n          key={\"FF\" + contractFuncInfo[0]}\r\n          contractFunction={contractFunc}\r\n          functionInfo={contractFuncInfo[1]}\r\n          provider={provider}\r\n          gasPrice={gasPrice}\r\n          triggerRefresh={triggerRefresh}\r\n        />\r\n      );\r\n    }\r\n    return null;\r\n  });\r\n\r\n  return (\r\n    <div style={{ margin: \"auto\", width: \"70vw\" }}>\r\n      <Card\r\n        title={\r\n          <div>\r\n            {name}\r\n            <div style={{ float: \"right\" }}>\r\n              <Account\r\n                address={address}\r\n                localProvider={provider}\r\n                injectedProvider={provider}\r\n                mainnetProvider={provider}\r\n                price={price}\r\n                blockExplorer={blockExplorer}\r\n              />\r\n              {account}\r\n            </div>\r\n          </div>\r\n        }\r\n        size=\"large\"\r\n        style={{ marginTop: 25, width: \"100%\" }}\r\n        loading={contractDisplay && contractDisplay.length <= 0}\r\n      >\r\n        {contractIsDeployed ? contractDisplay : noContractDisplay}\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","import { List } from \"antd\";\r\nimport { useEventListener } from \"eth-hooks/events/useEventListener\";\r\nimport { Address } from \"../components\";\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays a lists of events\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Events\r\n    contracts={readContracts}\r\n    contractName=\"YourContract\"\r\n    eventName=\"SetPurpose\"\r\n    localProvider={localProvider}\r\n    mainnetProvider={mainnetProvider}\r\n    startBlock={1}\r\n  />\r\n*/\r\n\r\nexport default function Events({ contracts, contractName, eventName, localProvider, mainnetProvider, startBlock }) {\r\n  // 📟 Listen for broadcast events\r\n  const events = useEventListener(contracts, contractName, eventName, localProvider, startBlock);\r\n\r\n  return (\r\n    <div style={{ width: 600, margin: \"auto\", marginTop: 32, paddingBottom: 32 }}>\r\n      <h2>Events:</h2>\r\n      <List\r\n        bordered\r\n        dataSource={events}\r\n        renderItem={item => {\r\n          return (\r\n            <List.Item key={item.blockNumber + \"_\" + item.args.sender + \"_\" + item.args.purpose}>\r\n              <Address address={item.args[0]} ensProvider={mainnetProvider} fontSize={16} />\r\n              {item.args[1]}\r\n            </List.Item>\r\n          );\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import { SendOutlined } from \"@ant-design/icons\";\r\nimport { Button, Input, Tooltip } from \"antd\";\r\nimport React, { useCallback, useState, useEffect } from \"react\";\r\nimport Blockies from \"react-blockies\";\r\nimport { Transactor } from \"../helpers\";\r\nimport Wallet from \"./Wallet\";\r\n\r\nconst { utils } = require(\"ethers\");\r\n\r\n// improved a bit by converting address to ens if it exists\r\n// added option to directly input ens name\r\n// added placeholder option\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays a local faucet to send ETH to given address, also wallet is provided\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Faucet\r\n    price={price}\r\n    localProvider={localProvider}\r\n    ensProvider={mainnetProvider}\r\n    placeholder={\"Send local faucet\"}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\r\n  - Provide localProvider={localProvider} to be able to send ETH to given address\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\r\n              works both in input field & wallet\r\n  - Provide placeholder=\"Send local faucet\" value for the input\r\n*/\r\n\r\nexport default function Faucet(props) {\r\n  const [address, setAddress] = useState();\r\n  const [faucetAddress, setFaucetAddress] = useState();\r\n\r\n  const { price, placeholder, localProvider, ensProvider, onChange } = props;\r\n\r\n  useEffect(() => {\r\n    const getFaucetAddress = async () => {\r\n      if (localProvider) {\r\n        const _faucetAddress = await localProvider.listAccounts();\r\n        setFaucetAddress(_faucetAddress[0]);\r\n      }\r\n    };\r\n    getFaucetAddress();\r\n  }, [localProvider]);\r\n\r\n  let blockie;\r\n  if (address && typeof address.toLowerCase === \"function\") {\r\n    blockie = <Blockies seed={address.toLowerCase()} size={8} scale={4} />;\r\n  } else {\r\n    blockie = <div />;\r\n  }\r\n\r\n  const updateAddress = useCallback(\r\n    async newValue => {\r\n      if (typeof newValue !== \"undefined\" && utils.isAddress(newValue)) {\r\n        setAddress(newValue);\r\n      }\r\n    },\r\n    [ensProvider, onChange],\r\n  );\r\n\r\n  const tx = Transactor(localProvider);\r\n\r\n  return (\r\n    <span>\r\n      <Input\r\n        size=\"large\"\r\n        placeholder={placeholder ? placeholder : \"local faucet\"}\r\n        prefix={blockie}\r\n        value={address}\r\n        onChange={e => updateAddress(e.target.value)}\r\n        suffix={\r\n          <Tooltip title=\"Faucet: Send local ether to an address.\">\r\n            <Button\r\n              onClick={() => {\r\n                tx({\r\n                  to: address,\r\n                  value: utils.parseEther(\"0.01\"),\r\n                });\r\n                setAddress(\"\");\r\n              }}\r\n              shape=\"circle\"\r\n              icon={<SendOutlined />}\r\n            />\r\n            <Wallet\r\n              color=\"#888888\"\r\n              provider={localProvider}\r\n              ensProvider={ensProvider}\r\n              price={price}\r\n              address={faucetAddress}\r\n            />\r\n          </Tooltip>\r\n        }\r\n      />\r\n    </span>\r\n  );\r\n}\r\n","import { Button } from \"antd\";\r\nimport React from \"react\";\r\n\r\n// added display of 0 instead of NaN if gas price is not provided\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays gas gauge\r\n\r\n  ~ How can I use? ~\r\n\r\n  <GasGauge\r\n    gasPrice={gasPrice}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide gasPrice={gasPrice} and get current gas gauge\r\n*/\r\n\r\nexport default function GasGauge(props) {\r\n  return (\r\n    <Button\r\n      onClick={() => {\r\n        window.open(\"https://ethgasstation.info/\");\r\n      }}\r\n      size=\"large\"\r\n      shape=\"round\"\r\n    >\r\n      <span style={{ marginRight: 8 }}>\r\n        <span role=\"img\" aria-label=\"fuelpump\">\r\n          ⛽️\r\n        </span>\r\n      </span>\r\n      {typeof props.gasPrice === \"undefined\" ? 0 : parseInt(props.gasPrice, 10) / 10 ** 9}g\r\n    </Button>\r\n  );\r\n}\r\n","import { PageHeader } from \"antd\";\r\nimport React from \"react\";\r\n\r\n// displays a page header\r\n\r\nexport default function Header() {\r\n  return (\r\n    <a href=\"https://github.com/austintgriffith/scaffold-eth\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n      <PageHeader\r\n        title=\"🏗 scaffold-eth\"\r\n        subTitle=\"forkable Ethereum dev stack focused on fast product iteration\"\r\n        style={{ cursor: \"pointer\" }}\r\n      />\r\n    </a>\r\n  );\r\n}\r\n","import { DollarCircleOutlined } from \"@ant-design/icons\";\r\nimport { RampInstantSDK } from \"@ramp-network/ramp-instant-sdk\";\r\nimport { Button, Divider, Modal } from \"antd\";\r\nimport React, { useState } from \"react\";\r\n\r\n// added display of 0 if price={price} is not provided\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays current ETH price and gives options to buy ETH through Wyre/Ramp/Coinbase\r\n                            or get through Rinkeby/Ropsten/Kovan/Goerli\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Ramp\r\n    price={price}\r\n    address={address}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Ramp opens directly in the application, component uses RampInstantSDK\r\n  - Provide price={price} and current ETH price will be displayed\r\n  - Provide address={address} and your address will be pasted into Wyre/Ramp instantly\r\n*/\r\n\r\nexport default function Ramp(props) {\r\n  const [modalUp, setModalUp] = useState(\"down\");\r\n\r\n  const type = \"default\";\r\n\r\n  const allFaucets = [];\r\n  for (const n in props.networks) {\r\n    if (props.networks[n].chainId !== 31337 && props.networks[n].chainId !== 1) {\r\n      allFaucets.push(\r\n        <p key={props.networks[n].chainId}>\r\n          <Button\r\n            style={{ color: props.networks[n].color }}\r\n            type={type}\r\n            size=\"large\"\r\n            shape=\"round\"\r\n            onClick={() => {\r\n              window.open(props.networks[n].faucet);\r\n            }}\r\n          >\r\n            {props.networks[n].name}\r\n          </Button>\r\n        </p>,\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        size=\"large\"\r\n        shape=\"round\"\r\n        onClick={() => {\r\n          setModalUp(\"up\");\r\n        }}\r\n      >\r\n        <DollarCircleOutlined style={{ color: \"#52c41a\" }} />{\" \"}\r\n        {typeof props.price === \"undefined\" ? 0 : props.price.toFixed(2)}\r\n      </Button>\r\n      <Modal\r\n        title=\"Buy ETH\"\r\n        visible={modalUp === \"up\"}\r\n        onCancel={() => {\r\n          setModalUp(\"down\");\r\n        }}\r\n        footer={[\r\n          <Button\r\n            key=\"back\"\r\n            onClick={() => {\r\n              setModalUp(\"down\");\r\n            }}\r\n          >\r\n            cancel\r\n          </Button>,\r\n        ]}\r\n      >\r\n        <p>\r\n          <Button\r\n            type={type}\r\n            size=\"large\"\r\n            shape=\"round\"\r\n            onClick={() => {\r\n              window.open(\"https://pay.sendwyre.com/purchase?destCurrency=ETH&sourceAmount=25&dest=\" + props.address);\r\n            }}\r\n          >\r\n            <span style={{ paddingRight: 15 }} role=\"img\">\r\n              <span role=\"img\" aria-label=\"flag-us\">\r\n                🇺🇸\r\n              </span>\r\n            </span>\r\n            Wyre\r\n          </Button>\r\n        </p>\r\n        <p>\r\n          {\" \"}\r\n          <Button\r\n            type={type}\r\n            size=\"large\"\r\n            shape=\"round\"\r\n            onClick={() => {\r\n              new RampInstantSDK({\r\n                hostAppName: \"scaffold-eth\",\r\n                hostLogoUrl: \"https://scaffoldeth.io/scaffold-eth.png\",\r\n                swapAmount: \"100000000000000000\", // 0.1 ETH in wei  ?\r\n                swapAsset: \"ETH\",\r\n                userAddress: props.address,\r\n              })\r\n                .on(\"*\", event => console.log(event))\r\n                .show();\r\n            }}\r\n          >\r\n            <span style={{ paddingRight: 15 }} role=\"img\">\r\n              <span role=\"img\" aria-label=\"flag-gb\">\r\n                🇬🇧\r\n              </span>\r\n            </span>\r\n            Ramp\r\n          </Button>\r\n        </p>\r\n\r\n        <p>\r\n          <Button\r\n            type={type}\r\n            size=\"large\"\r\n            shape=\"round\"\r\n            onClick={() => {\r\n              window.open(\"https://www.coinbase.com/buy-ethereum\");\r\n            }}\r\n          >\r\n            <span style={{ paddingRight: 15 }} role=\"img\" aria-label=\"bank\">\r\n              🏦\r\n            </span>\r\n            Coinbase\r\n          </Button>\r\n        </p>\r\n\r\n        <Divider />\r\n\r\n        <h2>Testnet ETH</h2>\r\n\r\n        {allFaucets}\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","import { useCallback, useEffect, useState } from \"react\";\r\nimport { ethers } from \"ethers\";\r\n\r\nconst createProvider = async url => {\r\n  const p = new ethers.providers.StaticJsonRpcProvider(url);\r\n\r\n  await p.ready;\r\n\r\n  return p;\r\n};\r\n\r\nexport default function useStaticJsonRPC(urlArray) {\r\n  const [provider, setProvider] = useState(null);\r\n\r\n  const handleProviders = useCallback(async () => {\r\n    try {\r\n      const p = await Promise.race(urlArray.map(createProvider));\r\n      const _p = await p;\r\n\r\n      setProvider(_p);\r\n    } catch (error) {\r\n      // todo: show notification error about provider issues\r\n      console.log(error);\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    handleProviders();\r\n  }, [JSON.stringify(urlArray)]);\r\n\r\n  return provider;\r\n}\r\n","const contractListPromise = import(\"../contracts/hardhat_contracts.json\");\r\n// @ts-ignore\r\nconst externalContractsPromise = import(\"../contracts/external_contracts\");\r\n\r\nexport const loadAppContracts = async () => {\r\n  const config = {};\r\n  config.deployedContracts = (await contractListPromise).default ?? {};\r\n  config.externalContracts = (await externalContractsPromise).default ?? {};\r\n  return config;\r\n};\r\n","import { RetweetOutlined, SettingOutlined } from \"@ant-design/icons\";\r\nimport { ChainId, Fetcher, Percent, Token, TokenAmount, Trade, WETH } from \"@uniswap/sdk\";\r\nimport { abi as IUniswapV2Router02ABI } from \"@uniswap/v2-periphery/build/IUniswapV2Router02.json\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  Descriptions,\r\n  Divider,\r\n  Drawer,\r\n  InputNumber,\r\n  Modal,\r\n  notification,\r\n  Row,\r\n  Select,\r\n  Space,\r\n  Tooltip,\r\n  Typography,\r\n} from \"antd\";\r\nimport { useBlockNumber, usePoller } from \"eth-hooks\";\r\nimport { ethers } from \"ethers\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useDebounce } from \"../hooks\";\r\n\r\nconst { Option } = Select;\r\nconst { Text } = Typography;\r\n\r\nexport const ROUTER_ADDRESS = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\r\n\r\nexport const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\r\n\r\nconst erc20Abi = [\r\n  \"function balanceOf(address owner) view returns (uint256)\",\r\n  \"function approve(address _spender, uint256 _value) public returns (bool success)\",\r\n  \"function allowance(address _owner, address _spender) public view returns (uint256 remaining)\",\r\n];\r\n\r\nconst makeCall = async (callName, contract, args, metadata = {}) => {\r\n  if (contract[callName]) {\r\n    let result;\r\n    if (args) {\r\n      result = await contract[callName](...args, metadata);\r\n    } else {\r\n      result = await contract[callName]();\r\n    }\r\n    return result;\r\n  }\r\n  return undefined;\r\n  console.log(\"no call of that name!\");\r\n};\r\n\r\nconst defaultToken = \"ETH\";\r\nconst defaultTokenOut = \"DAI\";\r\nconst defaultSlippage = \"0.5\";\r\nconst defaultTimeLimit = 60 * 10;\r\n\r\nconst tokenListToObject = array =>\r\n  array.reduce((obj, item) => {\r\n    obj[item.symbol] = new Token(item.chainId, item.address, item.decimals, item.symbol, item.name);\r\n    return obj;\r\n  }, {});\r\n\r\nfunction Swap({ selectedProvider, tokenListURI }) {\r\n  const [tokenIn, setTokenIn] = useState(defaultToken);\r\n  const [tokenOut, setTokenOut] = useState(defaultTokenOut);\r\n  const [exact, setExact] = useState();\r\n  const [amountIn, setAmountIn] = useState();\r\n  const [amountInMax, setAmountInMax] = useState();\r\n  const [amountOut, setAmountOut] = useState();\r\n  const [amountOutMin, setAmountOutMin] = useState();\r\n  const [trades, setTrades] = useState();\r\n  const [routerAllowance, setRouterAllowance] = useState();\r\n  const [balanceIn, setBalanceIn] = useState();\r\n  const [balanceOut, setBalanceOut] = useState();\r\n  const [slippageTolerance, setSlippageTolerance] = useState(\r\n    new Percent(Math.round(defaultSlippage * 100).toString(), \"10000\"),\r\n  );\r\n  const [timeLimit, setTimeLimit] = useState(defaultTimeLimit);\r\n  const [swapping, setSwapping] = useState(false);\r\n  const [approving, setApproving] = useState(false);\r\n  const [settingsVisible, setSettingsVisible] = useState(false);\r\n  const [swapModalVisible, setSwapModalVisible] = useState(false);\r\n\r\n  const [tokenList, setTokenList] = useState([]);\r\n  const [tokens, setTokens] = useState();\r\n  const [invertPrice, setInvertPrice] = useState(false);\r\n\r\n  const blockNumber = useBlockNumber(selectedProvider, 3000);\r\n\r\n  const signer = selectedProvider.getSigner();\r\n  const routerContract = new ethers.Contract(ROUTER_ADDRESS, IUniswapV2Router02ABI, signer);\r\n\r\n  const _tokenListUri = tokenListURI || \"https://gateway.ipfs.io/ipns/tokens.uniswap.org\";\r\n\r\n  const debouncedAmountIn = useDebounce(amountIn, 500);\r\n  const debouncedAmountOut = useDebounce(amountOut, 500);\r\n\r\n  const activeChainId = process.env.REACT_APP_NETWORK === \"kovan\" ? ChainId.KOVAN : ChainId.MAINNET;\r\n\r\n  useEffect(() => {\r\n    const getTokenList = async () => {\r\n      console.log(_tokenListUri);\r\n      try {\r\n        const tokenListResponse = await fetch(_tokenListUri);\r\n        const tokenListJson = await tokenListResponse.json();\r\n        const filteredTokens = tokenListJson.tokens.filter(function (t) {\r\n          return t.chainId === activeChainId;\r\n        });\r\n        const ethToken = WETH[activeChainId];\r\n        ethToken.name = \"Ethereum\";\r\n        ethToken.symbol = \"ETH\";\r\n        ethToken.logoURI =\r\n          \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png\";\r\n        const _tokenList = [ethToken, ...filteredTokens];\r\n        setTokenList(_tokenList);\r\n        const _tokens = tokenListToObject(_tokenList);\r\n        setTokens(_tokens);\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    };\r\n    getTokenList();\r\n  }, [tokenListURI]);\r\n\r\n  const getTrades = async () => {\r\n    if (tokenIn && tokenOut && (amountIn || amountOut)) {\r\n      const pairs = arr => arr.map((v, i) => arr.slice(i + 1).map(w => [v, w])).flat();\r\n\r\n      const baseTokens = tokenList\r\n        .filter(function (t) {\r\n          return [\"DAI\", \"USDC\", \"USDT\", \"COMP\", \"ETH\", \"MKR\", \"LINK\", tokenIn, tokenOut].includes(t.symbol);\r\n        })\r\n        .map(el => {\r\n          return new Token(el.chainId, el.address, el.decimals, el.symbol, el.name);\r\n        });\r\n\r\n      const listOfPairwiseTokens = pairs(baseTokens);\r\n\r\n      const getPairs = async list => {\r\n        const listOfPromises = list.map(item => Fetcher.fetchPairData(item[0], item[1], selectedProvider));\r\n        return Promise.all(listOfPromises.map(p => p.catch(() => undefined)));\r\n      };\r\n\r\n      const listOfPairs = await getPairs(listOfPairwiseTokens);\r\n\r\n      let bestTrade;\r\n\r\n      if (exact === \"in\") {\r\n        setAmountInMax();\r\n        bestTrade = Trade.bestTradeExactIn(\r\n          listOfPairs.filter(item => item),\r\n          new TokenAmount(tokens[tokenIn], ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals)),\r\n          tokens[tokenOut],\r\n          { maxNumResults: 3, maxHops: 1 },\r\n        );\r\n        if (bestTrade[0]) {\r\n          setAmountOut(bestTrade[0].outputAmount.toSignificant(6));\r\n        } else {\r\n          setAmountOut();\r\n        }\r\n      } else if (exact === \"out\") {\r\n        setAmountOutMin();\r\n        bestTrade = Trade.bestTradeExactOut(\r\n          listOfPairs.filter(item => item),\r\n          tokens[tokenIn],\r\n          new TokenAmount(tokens[tokenOut], ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals)),\r\n          { maxNumResults: 3, maxHops: 1 },\r\n        );\r\n        if (bestTrade[0]) {\r\n          setAmountIn(bestTrade[0].inputAmount.toSignificant(6));\r\n        } else {\r\n          setAmountIn();\r\n        }\r\n      }\r\n\r\n      setTrades(bestTrade);\r\n\r\n      console.log(bestTrade);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getTrades();\r\n  }, [tokenIn, tokenOut, debouncedAmountIn, debouncedAmountOut, slippageTolerance, selectedProvider]);\r\n\r\n  useEffect(() => {\r\n    if (trades && trades[0]) {\r\n      if (exact === \"in\") {\r\n        setAmountOutMin(trades[0].minimumAmountOut(slippageTolerance));\r\n      } else if (exact === \"out\") {\r\n        setAmountInMax(trades[0].maximumAmountIn(slippageTolerance));\r\n      }\r\n    }\r\n  }, [slippageTolerance, amountIn, amountOut, trades]);\r\n\r\n  const getBalance = async (_token, _account, _contract) => {\r\n    let newBalance;\r\n    if (_token === \"ETH\") {\r\n      newBalance = await selectedProvider.getBalance(_account);\r\n    } else {\r\n      newBalance = await makeCall(\"balanceOf\", _contract, [_account]);\r\n    }\r\n    return newBalance;\r\n  };\r\n\r\n  const getAccountInfo = async () => {\r\n    if (tokens) {\r\n      const accountList = await selectedProvider.listAccounts();\r\n\r\n      if (tokenIn) {\r\n        const tempContractIn = new ethers.Contract(tokens[tokenIn].address, erc20Abi, selectedProvider);\r\n        const newBalanceIn = await getBalance(tokenIn, accountList[0], tempContractIn);\r\n        setBalanceIn(newBalanceIn);\r\n\r\n        let allowance;\r\n\r\n        if (tokenIn === \"ETH\") {\r\n          setRouterAllowance();\r\n        } else {\r\n          allowance = await makeCall(\"allowance\", tempContractIn, [accountList[0], ROUTER_ADDRESS]);\r\n          setRouterAllowance(allowance);\r\n        }\r\n      }\r\n\r\n      if (tokenOut) {\r\n        const tempContractOut = new ethers.Contract(tokens[tokenOut].address, erc20Abi, selectedProvider);\r\n        const newBalanceOut = await getBalance(tokenOut, accountList[0], tempContractOut);\r\n        setBalanceOut(newBalanceOut);\r\n      }\r\n    }\r\n  };\r\n\r\n  usePoller(getAccountInfo, 6000);\r\n\r\n  const route = trades\r\n    ? trades.length > 0\r\n      ? trades[0].route.path.map(function (item) {\r\n          return item.symbol;\r\n        })\r\n      : []\r\n    : [];\r\n\r\n  const updateRouterAllowance = async newAllowance => {\r\n    setApproving(true);\r\n    try {\r\n      const tempContract = new ethers.Contract(tokens[tokenIn].address, erc20Abi, signer);\r\n      const result = await makeCall(\"approve\", tempContract, [ROUTER_ADDRESS, newAllowance]);\r\n      console.log(result);\r\n      setApproving(false);\r\n      return true;\r\n    } catch (e) {\r\n      notification.open({\r\n        message: \"Approval unsuccessful\",\r\n        description: `Error: ${e.message}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const approveRouter = async () => {\r\n    const approvalAmount =\r\n      exact === \"in\"\r\n        ? ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals))\r\n        : amountInMax.raw.toString();\r\n    console.log(approvalAmount);\r\n    const approval = updateRouterAllowance(approvalAmount);\r\n    if (approval) {\r\n      notification.open({\r\n        message: \"Token transfer approved\",\r\n        description: `You can now swap up to ${amountIn} ${tokenIn}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const removeRouterAllowance = async () => {\r\n    const approvalAmount = ethers.utils.hexlify(0);\r\n    console.log(approvalAmount);\r\n    const removal = updateRouterAllowance(approvalAmount);\r\n    if (removal) {\r\n      notification.open({\r\n        message: \"Token approval removed\",\r\n        description: `The router is no longer approved for ${tokenIn}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const executeSwap = async () => {\r\n    setSwapping(true);\r\n    try {\r\n      let args;\r\n      const metadata = {};\r\n\r\n      let call;\r\n      const deadline = Math.floor(Date.now() / 1000) + timeLimit;\r\n      const path = trades[0].route.path.map(function (item) {\r\n        return item.address;\r\n      });\r\n      console.log(path);\r\n      const accountList = await selectedProvider.listAccounts();\r\n      const address = accountList[0];\r\n\r\n      if (exact === \"in\") {\r\n        const _amountIn = ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals));\r\n        const _amountOutMin = ethers.utils.hexlify(ethers.BigNumber.from(amountOutMin.raw.toString()));\r\n        if (tokenIn === \"ETH\") {\r\n          call = \"swapExactETHForTokens\";\r\n          args = [_amountOutMin, path, address, deadline];\r\n          metadata.value = _amountIn;\r\n        } else {\r\n          call = tokenOut === \"ETH\" ? \"swapExactTokensForETH\" : \"swapExactTokensForTokens\";\r\n          args = [_amountIn, _amountOutMin, path, address, deadline];\r\n        }\r\n      } else if (exact === \"out\") {\r\n        const _amountOut = ethers.utils.hexlify(\r\n          ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals),\r\n        );\r\n        const _amountInMax = ethers.utils.hexlify(ethers.BigNumber.from(amountInMax.raw.toString()));\r\n        if (tokenIn === \"ETH\") {\r\n          call = \"swapETHForExactTokens\";\r\n          args = [_amountOut, path, address, deadline];\r\n          metadata.value = _amountInMax;\r\n        } else {\r\n          call = tokenOut === \"ETH\" ? \"swapTokensForExactETH\" : \"swapTokensForExactTokens\";\r\n          args = [_amountOut, _amountInMax, path, address, deadline];\r\n        }\r\n      }\r\n      console.log(call, args, metadata);\r\n      const result = await makeCall(call, routerContract, args, metadata);\r\n      console.log(result);\r\n      notification.open({\r\n        message: \"Swap complete 🦄\",\r\n        description: (\r\n          <>\r\n            <Text>{`Swapped ${tokenIn} for ${tokenOut}, transaction: `}</Text>\r\n            <Text copyable>{result.hash}</Text>\r\n          </>\r\n        ),\r\n      });\r\n      setSwapping(false);\r\n    } catch (e) {\r\n      console.log(e);\r\n      setSwapping(false);\r\n      notification.open({\r\n        message: \"Swap unsuccessful\",\r\n        description: `Error: ${e.message}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const showSwapModal = () => {\r\n    setSwapModalVisible(true);\r\n  };\r\n\r\n  const handleSwapModalOk = () => {\r\n    setSwapModalVisible(false);\r\n    executeSwap();\r\n  };\r\n\r\n  const handleSwapModalCancel = () => {\r\n    setSwapModalVisible(false);\r\n  };\r\n\r\n  const insufficientBalance = balanceIn\r\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)) < amountIn\r\n    : null;\r\n  const inputIsToken = tokenIn !== \"ETH\";\r\n  const insufficientAllowance = !inputIsToken\r\n    ? false\r\n    : routerAllowance\r\n    ? parseFloat(ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals)) < amountIn\r\n    : null;\r\n  const formattedBalanceIn = balanceIn\r\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)).toPrecision(6)\r\n    : null;\r\n  const formattedBalanceOut = balanceOut\r\n    ? parseFloat(ethers.utils.formatUnits(balanceOut, tokens[tokenOut].decimals)).toPrecision(6)\r\n    : null;\r\n\r\n  const metaIn =\r\n    tokens && tokenList && tokenIn\r\n      ? tokenList.filter(function (t) {\r\n          return t.address === tokens[tokenIn].address;\r\n        })[0]\r\n      : null;\r\n  const metaOut =\r\n    tokens && tokenList && tokenOut\r\n      ? tokenList.filter(function (t) {\r\n          return t.address === tokens[tokenOut].address;\r\n        })[0]\r\n      : null;\r\n\r\n  const cleanIpfsURI = uri => {\r\n    try {\r\n      return uri.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\");\r\n    } catch (e) {\r\n      console.log(e, uri);\r\n      return uri;\r\n    }\r\n  };\r\n\r\n  const logoIn = metaIn ? cleanIpfsURI(metaIn.logoURI) : null;\r\n  const logoOut = metaOut ? cleanIpfsURI(metaOut.logoURI) : null;\r\n\r\n  const rawPrice = trades && trades[0] ? trades[0].executionPrice : null;\r\n  const price = rawPrice ? rawPrice.toSignificant(7) : null;\r\n  const priceDescription = rawPrice\r\n    ? invertPrice\r\n      ? `${rawPrice.invert().toSignificant(7)} ${tokenIn} per ${tokenOut}`\r\n      : `${price} ${tokenOut} per ${tokenIn}`\r\n    : null;\r\n\r\n  const priceWidget = (\r\n    <Space>\r\n      <Text type=\"secondary\">{priceDescription}</Text>\r\n      <Button\r\n        type=\"text\"\r\n        onClick={() => {\r\n          setInvertPrice(!invertPrice);\r\n        }}\r\n      >\r\n        <RetweetOutlined />\r\n      </Button>\r\n    </Space>\r\n  );\r\n\r\n  const swapModal = (\r\n    <Modal title=\"Confirm swap\" visible={swapModalVisible} onOk={handleSwapModalOk} onCancel={handleSwapModalCancel}>\r\n      <Row>\r\n        <Space>\r\n          <img src={logoIn} alt={tokenIn} width=\"30\" />\r\n          {amountIn}\r\n          {tokenIn}\r\n        </Space>\r\n      </Row>\r\n      <Row justify=\"center\" align=\"middle\" style={{ width: 30 }}>\r\n        <span>↓</span>\r\n      </Row>\r\n      <Row>\r\n        <Space>\r\n          <img src={logoOut} alt={tokenOut} width=\"30\" />\r\n          {amountOut}\r\n          {tokenOut}\r\n        </Space>\r\n      </Row>\r\n      <Divider />\r\n      <Row>{priceWidget}</Row>\r\n      <Row>\r\n        {trades && ((amountOutMin && exact === \"in\") || (amountInMax && exact === \"out\"))\r\n          ? exact === \"in\"\r\n            ? `Output is estimated. You will receive at least ${amountOutMin.toSignificant(\r\n                6,\r\n              )} ${tokenOut} or the transaction will revert.`\r\n            : `Input is estimated. You will sell at most ${amountInMax.toSignificant(\r\n                6,\r\n              )} ${tokenIn} or the transaction will revert.`\r\n          : null}\r\n      </Row>\r\n    </Modal>\r\n  );\r\n\r\n  return (\r\n    <Card\r\n      title={\r\n        <Space>\r\n          <img src=\"https://ipfs.io/ipfs/QmXttGpZrECX5qCyXbBQiqgQNytVGeZW5Anewvh2jc4psg\" width=\"40\" alt=\"uniswapLogo\" />\r\n          <Typography>Uniswapper</Typography>\r\n        </Space>\r\n      }\r\n      extra={\r\n        <Button\r\n          type=\"text\"\r\n          onClick={() => {\r\n            setSettingsVisible(true);\r\n          }}\r\n        >\r\n          <SettingOutlined />\r\n        </Button>\r\n      }\r\n    >\r\n      <Space direction=\"vertical\">\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Card\r\n            size=\"small\"\r\n            type=\"inner\"\r\n            title={`From${exact === \"out\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\r\n            extra={\r\n              <>\r\n                <img src={logoIn} alt={tokenIn} width=\"30\" />\r\n                <Button\r\n                  type=\"link\"\r\n                  onClick={() => {\r\n                    setAmountOut();\r\n                    setAmountIn(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals));\r\n                    setAmountOutMin();\r\n                    setAmountInMax();\r\n                    setExact(\"in\");\r\n                  }}\r\n                >\r\n                  {formattedBalanceIn}\r\n                </Button>\r\n              </>\r\n            }\r\n            style={{ width: 400, textAlign: \"left\" }}\r\n          >\r\n            <InputNumber\r\n              style={{ width: \"160px\" }}\r\n              min={0}\r\n              size=\"large\"\r\n              value={amountIn}\r\n              onChange={e => {\r\n                setAmountOut();\r\n                setTrades();\r\n                setAmountIn(e);\r\n                setExact(\"in\");\r\n              }}\r\n            />\r\n            <Select\r\n              showSearch\r\n              value={tokenIn}\r\n              style={{ width: \"120px\" }}\r\n              size=\"large\"\r\n              bordered={false}\r\n              defaultValue={defaultToken}\r\n              onChange={value => {\r\n                console.log(value);\r\n                if (value === tokenOut) {\r\n                  console.log(\"switch!\", tokenIn);\r\n                  setTokenOut(tokenIn);\r\n                  setAmountOut(amountIn);\r\n                  setBalanceOut(balanceIn);\r\n                }\r\n                setTokenIn(value);\r\n                setTrades();\r\n                setAmountIn();\r\n                setExact(\"out\");\r\n                setBalanceIn();\r\n              }}\r\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n              optionFilterProp=\"children\"\r\n            >\r\n              {tokenList.map(token => (\r\n                <Option key={token.symbol} value={token.symbol}>\r\n                  {token.symbol}\r\n                </Option>\r\n              ))}\r\n            </Select>\r\n          </Card>\r\n        </Row>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Tooltip title={route.join(\"->\")}>\r\n            <span>↓</span>\r\n          </Tooltip>\r\n        </Row>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Card\r\n            size=\"small\"\r\n            type=\"inner\"\r\n            title={`To${exact === \"in\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\r\n            extra={\r\n              <>\r\n                <img src={logoOut} width=\"30\" alt={tokenOut} />\r\n                <Button type=\"text\">{formattedBalanceOut}</Button>\r\n              </>\r\n            }\r\n            style={{ width: 400, textAlign: \"left\" }}\r\n          >\r\n            <InputNumber\r\n              style={{ width: \"160px\" }}\r\n              size=\"large\"\r\n              min={0}\r\n              value={amountOut}\r\n              onChange={e => {\r\n                setAmountOut(e);\r\n                setAmountIn();\r\n                setTrades();\r\n                setExact(\"out\");\r\n              }}\r\n            />\r\n            <Select\r\n              showSearch\r\n              value={tokenOut}\r\n              style={{ width: \"120px\" }}\r\n              size=\"large\"\r\n              bordered={false}\r\n              onChange={value => {\r\n                console.log(value, tokenIn, tokenOut);\r\n                if (value === tokenIn) {\r\n                  console.log(\"switch!\", tokenOut);\r\n                  setTokenIn(tokenOut);\r\n                  setAmountIn(amountOut);\r\n                  setBalanceIn(balanceOut);\r\n                }\r\n                setTokenOut(value);\r\n                setExact(\"in\");\r\n                setAmountOut();\r\n                setTrades();\r\n                setBalanceOut();\r\n              }}\r\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n              optionFilterProp=\"children\"\r\n            >\r\n              {tokenList.map(token => (\r\n                <Option key={token.symbol} value={token.symbol}>\r\n                  {token.symbol}\r\n                </Option>\r\n              ))}\r\n            </Select>\r\n          </Card>\r\n        </Row>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          {priceDescription ? priceWidget : null}\r\n        </Row>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Space>\r\n            {inputIsToken ? (\r\n              <Button size=\"large\" loading={approving} disabled={!insufficientAllowance} onClick={approveRouter}>\r\n                {!insufficientAllowance && amountIn && amountOut ? \"Approved\" : \"Approve\"}\r\n              </Button>\r\n            ) : null}\r\n            <Button\r\n              size=\"large\"\r\n              loading={swapping}\r\n              disabled={insufficientAllowance || insufficientBalance || !amountIn || !amountOut}\r\n              onClick={showSwapModal}\r\n            >\r\n              {insufficientBalance ? \"Insufficient balance\" : \"Swap!\"}\r\n            </Button>\r\n            {swapModal}\r\n          </Space>\r\n        </Row>\r\n      </Space>\r\n      <Drawer\r\n        visible={settingsVisible}\r\n        onClose={() => {\r\n          setSettingsVisible(false);\r\n        }}\r\n        width={500}\r\n      >\r\n        <Descriptions title=\"Details\" column={1} style={{ textAlign: \"left\" }}>\r\n          <Descriptions.Item label=\"blockNumber\">{blockNumber}</Descriptions.Item>\r\n          <Descriptions.Item label=\"routerAllowance\">\r\n            <Space>\r\n              {routerAllowance ? ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals) : null}\r\n              {routerAllowance > 0 ? <Button onClick={removeRouterAllowance}>Remove Allowance</Button> : null}\r\n            </Space>\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"route\">{route.join(\"->\")}</Descriptions.Item>\r\n          <Descriptions.Item label=\"exact\">{exact}</Descriptions.Item>\r\n          <Descriptions.Item label=\"bestPrice\">\r\n            {trades ? (trades.length > 0 ? trades[0].executionPrice.toSignificant(6) : null) : null}\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"nextMidPrice\">\r\n            {trades ? (trades.length > 0 ? trades[0].nextMidPrice.toSignificant(6) : null) : null}\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"priceImpact\">\r\n            {trades ? (trades.length > 0 ? trades[0].priceImpact.toSignificant(6) : null) : null}\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"slippageTolerance\">\r\n            <InputNumber\r\n              defaultValue={defaultSlippage}\r\n              min={0}\r\n              max={100}\r\n              precision={2}\r\n              formatter={value => `${value}%`}\r\n              parser={value => value.replace(\"%\", \"\")}\r\n              onChange={value => {\r\n                console.log(value);\r\n\r\n                const slippagePercent = new Percent(Math.round(value * 100).toString(), \"10000\");\r\n                setSlippageTolerance(slippagePercent);\r\n              }}\r\n            />\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"amountInMax\">{amountInMax ? amountInMax.toExact() : null}</Descriptions.Item>\r\n          <Descriptions.Item label=\"amountOutMin\">{amountOutMin ? amountOutMin.toExact() : null}</Descriptions.Item>\r\n          <Descriptions.Item label=\"timeLimitInSeconds\">\r\n            <InputNumber\r\n              min={0}\r\n              max={3600}\r\n              defaultValue={defaultTimeLimit}\r\n              onChange={value => {\r\n                console.log(value);\r\n                setTimeLimit(value);\r\n              }}\r\n            />\r\n          </Descriptions.Item>\r\n        </Descriptions>\r\n      </Drawer>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Swap;\r\n","import { Switch } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\r\n\r\nexport default function ThemeSwitcher() {\r\n  const theme = window.localStorage.getItem(\"theme\");\r\n  const [isDarkMode, setIsDarkMode] = useState(!(!theme || theme === \"light\"));\r\n  const { switcher, currentTheme, status, themes } = useThemeSwitcher();\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem(\"theme\", currentTheme);\r\n  }, [currentTheme]);\r\n\r\n  const toggleTheme = isChecked => {\r\n    setIsDarkMode(isChecked);\r\n    switcher({ theme: isChecked ? themes.dark : themes.light });\r\n  };\r\n\r\n  return (\r\n    <div className=\"main fade-in\" style={{ position: \"fixed\", right: 8, bottom: 8 }}>\r\n      <span style={{ padding: 8 }}>{currentTheme === \"light\" ? \"☀️\" : \"🌜\"}</span>\r\n      <Switch checked={isDarkMode} onChange={toggleTheme} />\r\n    </div>\r\n  );\r\n}\r\n","import { DownloadOutlined, EditOutlined, SendOutlined } from \"@ant-design/icons\";\r\nimport { Timeline, Typography } from \"antd\";\r\nimport React from \"react\";\r\nimport Blockies from \"react-blockies\";\r\n\r\nconst { Text } = Typography;\r\n\r\n// displays a timeline for scaffold-eth usage\r\n\r\nexport default function TimelineDisplay(props) {\r\n  return (\r\n    <Timeline mode=\"right\">\r\n      <Timeline.Item dot=\"💾\">\r\n        <Text delete>\r\n          Clone and Install from the{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/austintgriffith/scaffold-eth\">\r\n            github repo\r\n          </a>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"⚛️\">\r\n        <Text delete>\r\n          Start your frontend app with: <Text strong>yarn start</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"⛓\">\r\n        <Text delete={props.chainIsUp}>\r\n          Start your local blockchain with: <Text strong>yarn run chain</Text> (and refresh)\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"📝\">\r\n        <Text delete={props.hasOwner}>\r\n          Compile and deploy your smart contract: <Text strong>yarn run deploy</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"🤡\">\r\n        <Text delete={props.isNotSmoort}>\r\n          Fix error in <Text code>SmartContractWallet.sol</Text> then: <Text strong>yarn run deploy</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot={<SendOutlined style={{ fontSize: \"16px\" }} />} color={props.hasEther ? \"green\" : \"blue\"}>\r\n        <Text delete={props.hasEther}>\r\n          Send test ether to your{\" \"}\r\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address using\r\n          (bottom left) faucet\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item\r\n        dot={<DownloadOutlined style={{ fontSize: \"16px\" }} />}\r\n        color={props.contractHasEther ? \"green\" : \"blue\"}\r\n      >\r\n        <Text delete={props.contractHasEther}>\r\n          Deposit some funds into your{\" \"}\r\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\r\n          smart contract wallet\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item\r\n        dot={<EditOutlined style={{ fontSize: \"16px\" }} />}\r\n        color={props.amOwnerOfContract ? \"green\" : \"blue\"}\r\n      >\r\n        <Text delete={props.amOwnerOfContract}>\r\n          Set <b>owner</b> of your{\" \"}\r\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\r\n          smart contract wallet to your{\" \"}\r\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"☢️\">\r\n        <Text>\r\n          Yikes, anyone can take ownership of <Text code>SmartContractWallet.sol</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"🔬\">\r\n        <Text>\r\n          Test your contract with <Text code>buidler/test/myTest.js</Text> then:\r\n          <Text strong>yarn run test</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"🚀\">\r\n        <Text>\r\n          Build something awesome with 🏗 <a href=\"https://github.com/austintgriffith/scaffold-eth\">scaffold-eth</a> and{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://twitter.com/austingriffith\">\r\n            @ me\r\n          </a>\r\n          !\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"📖\">\r\n        <Text>\r\n          Read more about{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ethereum.org/developers\">\r\n            Ethereum\r\n          </a>\r\n          ,{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://solidity.readthedocs.io/en/develop/contracts.html\">\r\n            Solidity\r\n          </a>\r\n          , and{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://buidler.dev/tutorial\">\r\n            Buidler\r\n          </a>\r\n        </Text>\r\n      </Timeline.Item>\r\n    </Timeline>\r\n  );\r\n}\r\n","import { utils, ethers } from \"ethers\";\r\nimport { Button, Input, Form, Select, InputNumber, Table, Radio } from \"antd\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useContractLoader, useOnBlock } from \"eth-hooks\";\r\nimport { NETWORKS } from \"../constants\";\r\nimport { Transactor } from \"../helpers\";\r\n\r\n/*\r\nThis is a component for bridging between L1 & L2\r\nCurrently it supports Testnet deposits for Arbitrum & Optimism\r\n\r\n __          _______ _____\r\n \\ \\        / /_   _|  __ \\\r\n  \\ \\  /\\  / /  | | | |__) |\r\n   \\ \\/  \\/ /   | | |  ___/\r\n    \\  /\\  /   _| |_| |\r\n     \\/  \\/   |_____|_|\r\n\r\n\r\n*/\r\n\r\nexport default function L2ArbitrumBridge({ address, userSigner }) {\r\n  const [L1EthBalance, setL1EthBalance] = useState(\"...\");\r\n  const [L2EthBalance, setL2EthBalance] = useState(\"...\");\r\n  const [L1Provider, setL1Provider] = useState(\"\");\r\n  const [L2Provider, setL2Provider] = useState(\"\");\r\n  const [rollup, setRollup] = useState(\"arbitrum\");\r\n  const [environment, setEnvironment] = useState(\"test\");\r\n\r\n  const rollupConfig = {\r\n    arbitrum: {\r\n      test: { L1: NETWORKS.rinkeby, L2: NETWORKS.rinkebyArbitrum },\r\n      main: { L1: NETWORKS.mainnet, L2: NETWORKS.arbitrum },\r\n      local: { L1: NETWORKS.localArbitrumL1, L2: NETWORKS.localArbitrum },\r\n    },\r\n    optimism: {\r\n      test: { L1: NETWORKS.kovan, L2: NETWORKS.kovanOptimism },\r\n      local: { L1: NETWORKS.localOptimismL1, L2: NETWORKS.localOptimism },\r\n    },\r\n  };\r\n\r\n  const activeConfig = rollupConfig[rollup][environment];\r\n\r\n  const selectedChainId =\r\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\r\n\r\n  const tx = Transactor(userSigner);\r\n\r\n  useEffect(() => {\r\n    async function setProviders() {\r\n      const L1 = activeConfig.L1;\r\n      const L2 = activeConfig.L2;\r\n      setL1Provider(new ethers.providers.StaticJsonRpcProvider(L1.rpcUrl));\r\n      setL2Provider(new ethers.providers.StaticJsonRpcProvider(L2.rpcUrl));\r\n      setL1EthBalance(\"...\");\r\n      setL2EthBalance(\"...\");\r\n    }\r\n    setProviders();\r\n  }, [rollup]);\r\n\r\n  const contracts = useContractLoader(userSigner, { externalContracts: L1BridgeMetadata, hardhatContracts: {} });\r\n\r\n  useOnBlock(L1Provider, async () => {\r\n    console.log(`⛓ A new mainnet block is here: ${L1Provider._lastBlockNumber}`);\r\n    const yourL1Balance = await L1Provider.getBalance(address);\r\n    setL1EthBalance(yourL1Balance ? ethers.utils.formatEther(yourL1Balance) : \"...\");\r\n    const yourL2Balance = await L2Provider.getBalance(address);\r\n    setL2EthBalance(yourL2Balance ? ethers.utils.formatEther(yourL2Balance) : \"...\");\r\n  });\r\n\r\n  const { Option } = Select;\r\n  const formItemLayout = {\r\n    labelCol: {\r\n      xs: { span: 24 },\r\n      sm: { span: 8 },\r\n    },\r\n    wrapperCol: {\r\n      xs: { span: 24 },\r\n      sm: { span: 12 },\r\n    },\r\n  };\r\n  const tailFormItemLayout = {\r\n    wrapperCol: {\r\n      xs: {\r\n        span: 24,\r\n        offset: 0,\r\n      },\r\n      sm: {\r\n        span: 12,\r\n        offset: 8,\r\n      },\r\n    },\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: \"\",\r\n      dataIndex: \"token\",\r\n      key: \"token\",\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: `${activeConfig.L1.name} L1 Balance`,\r\n      dataIndex: \"l1\",\r\n      key: \"l1\",\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: `${activeConfig.L1.name} ${rollup} Balance`,\r\n      dataIndex: \"l2\",\r\n      key: \"l2\",\r\n      align: \"center\",\r\n    },\r\n  ];\r\n\r\n  const data = [\r\n    {\r\n      key: \"1\",\r\n      token: \"ETH\",\r\n      l1: \"Ξ\" + L1EthBalance,\r\n      l2: \"Ξ\" + L2EthBalance,\r\n    },\r\n  ];\r\n\r\n  const [form] = Form.useForm();\r\n\r\n  const onAssetChange = value => {\r\n    console.log(value);\r\n  };\r\n\r\n  async function onFinish(values) {\r\n    console.log(contracts);\r\n    console.log(values.amount.toString());\r\n    console.log(rollup);\r\n    let newTx;\r\n    try {\r\n      if (rollup === \"arbitrum\") {\r\n        newTx = await tx(\r\n          contracts.Inbox.depositEth(1_300_000, {\r\n            value: utils.parseEther(values.amount.toString()),\r\n            gasLimit: 300000,\r\n          }),\r\n        );\r\n      } else if (rollup === \"optimism\") {\r\n        newTx = await tx(\r\n          contracts.OVM_L1StandardBridge.depositETH(1_300_000, \"0x\", {\r\n            value: utils.parseEther(values.amount.toString()),\r\n          }),\r\n        );\r\n      }\r\n      await newTx.wait();\r\n      console.log(\"woop!\");\r\n    } catch (e) {\r\n      console.log(e);\r\n      console.log(\"something went wrong!\");\r\n    }\r\n  }\r\n\r\n  const onReset = () => {\r\n    form.resetFields();\r\n  };\r\n\r\n  const wrongNetwork = selectedChainId !== activeConfig.L1.chainId;\r\n\r\n  return (\r\n    <div style={{ padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\r\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\r\n        <h2>Welcome to the L2 Deposit Bridge!</h2>\r\n        <Radio.Group\r\n          value={rollup}\r\n          onChange={e => {\r\n            setRollup(e.target.value);\r\n          }}\r\n          style={{ marginBottom: 10 }}\r\n        >\r\n          <Radio.Button value=\"arbitrum\">Arbitrum</Radio.Button>\r\n          <Radio.Button value=\"optimism\">Optimism</Radio.Button>\r\n        </Radio.Group>\r\n\r\n        <Table columns={columns} dataSource={data} pagination={false} style={{ marginBottom: 20 }} />\r\n\r\n        <Form\r\n          {...formItemLayout}\r\n          form={form}\r\n          name=\"control-hooks\"\r\n          onFinish={onFinish}\r\n          initialValues={{ assetType: \"eth\" }}\r\n        >\r\n          <Form.Item\r\n            name=\"assetType\"\r\n            label=\"Select Asset Type\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n              },\r\n            ]}\r\n          >\r\n            <Select placeholder=\"Select an asset type\" onChange={onAssetChange} allowClear>\r\n              <Option value=\"eth\">ETH</Option>\r\n              <Option disabled value=\"erc20\">\r\n                ERC-20\r\n              </Option>\r\n            </Select>\r\n          </Form.Item>\r\n          <Form.Item name=\"address\" label=\"Address\">\r\n            <Input disabled placeholder={address} />\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"amount\"\r\n            label=\"Amount to bridge\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n              },\r\n            ]}\r\n          >\r\n            <InputNumber />\r\n          </Form.Item>\r\n          <Form.Item {...tailFormItemLayout}>\r\n            <Button type=\"primary\" htmlType=\"submit\" disabled={wrongNetwork}>\r\n              {wrongNetwork ? `Switch wallet to ${activeConfig.L1.name}` : \"Deposit\"}\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Arbitrum Inbox https://rinkeby.etherscan.io/address/0xa157dc79ca26d69c3b1282d03ec42bdee2790a8f#code\r\nconst ArbitrumInboxABI = [\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      { indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" },\r\n      { indexed: false, internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"InboxMessageDelivered\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [{ indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" }],\r\n    name: \"InboxMessageDeliveredFromOrigin\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [{ indexed: false, internalType: \"address\", name: \"newSource\", type: \"address\" }],\r\n    name: \"WhitelistSourceUpdated\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"bridge\",\r\n    outputs: [{ internalType: \"contract IBridge\", name: \"\", type: \"address\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"l2CallValue\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" },\r\n      { internalType: \"address\", name: \"excessFeeRefundAddress\", type: \"address\" },\r\n      { internalType: \"address\", name: \"callValueRefundAddress\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\r\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"createRetryableTicket\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"payable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" }],\r\n    name: \"depositEth\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"payable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"contract IBridge\", name: \"_bridge\", type: \"address\" },\r\n      { internalType: \"address\", name: \"_whitelist\", type: \"address\" },\r\n    ],\r\n    name: \"initialize\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"isMaster\",\r\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\r\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\r\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"sendContractTransaction\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\r\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\r\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"sendL1FundedContractTransaction\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"payable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\r\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\r\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"sendL1FundedUnsignedTransaction\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"payable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\r\n    name: \"sendL2Message\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\r\n    name: \"sendL2MessageFromOrigin\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\r\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\r\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"sendUnsignedTransaction\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"address\", name: \"newSource\", type: \"address\" }],\r\n    name: \"updateWhitelistSource\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"whitelist\",\r\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n];\r\n\r\n// https://github.com/ethereum-optimism/optimism/blob/2bd49730fa8d2c10953873f0ccc792198a49d5c9/packages/contracts/contracts/optimistic-ethereum/iOVM/bridge/tokens/iOVM_L1StandardBridge.sol\r\nconst OVM_L1StandardBridgeABI = [\r\n  \"function depositETH(uint32 _l2Gas,bytes calldata _data) external payable\",\r\n  \"function depositETHTo(address _to,uint32 _l2Gas,bytes calldata _data) external payable\",\r\n  \"function finalizeETHWithdrawal (address _from,address _to,uint _amount,bytes calldata _data) external\",\r\n];\r\n\r\nconst L1BridgeMetadata = {\r\n  // Arbitrium Contract's\r\n  44010: {\r\n    contracts: {\r\n      Inbox: {\r\n        address: \"0xA4d796Ad4e79aFB703340a596AEd88f8a5924183\",\r\n        abi: ArbitrumInboxABI,\r\n      },\r\n    },\r\n  },\r\n  4: {\r\n    contracts: {\r\n      Inbox: {\r\n        address: \"0x578bade599406a8fe3d24fd7f7211c0911f5b29e\",\r\n        abi: ArbitrumInboxABI,\r\n      },\r\n    },\r\n  },\r\n  // Optimism Contract's\r\n  31337: {\r\n    contracts: {\r\n      OVM_L1StandardBridge: {\r\n        address: \"0x998abeb3E57409262aE5b751f60747921B33613E\",\r\n        abi: OVM_L1StandardBridgeABI,\r\n      },\r\n    },\r\n  },\r\n  42: {\r\n    contracts: {\r\n      OVM_L1StandardBridge: {\r\n        address: \"0x22F24361D548e5FaAfb36d1437839f080363982B\",\r\n        abi: OVM_L1StandardBridgeABI,\r\n      },\r\n    },\r\n  },\r\n};\r\n","import { Alert, Button } from \"antd\";\r\nimport React from \"react\";\r\nimport { NETWORK } from \"../constants\";\r\n\r\nfunction NetworkDisplay({\r\n  NETWORKCHECK,\r\n  localChainId,\r\n  selectedChainId,\r\n  targetNetwork,\r\n  USE_NETWORK_SELECTOR,\r\n  logoutOfWeb3Modal,\r\n}) {\r\n  let networkDisplay = \"\";\r\n  if (NETWORKCHECK && localChainId && selectedChainId && localChainId !== selectedChainId) {\r\n    const networkSelected = NETWORK(selectedChainId);\r\n    const networkLocal = NETWORK(localChainId);\r\n    if (selectedChainId === 1337 && localChainId === 31337) {\r\n      networkDisplay = (\r\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\r\n          <Alert\r\n            message=\"⚠️ Wrong Network ID\"\r\n            description={\r\n              <div>\r\n                You have <b>chain id 1337</b> for localhost and you need to change it to <b>31337</b> to work with\r\n                HardHat.\r\n                <div>(MetaMask -&gt; Settings -&gt; Networks -&gt; Chain ID -&gt; 31337)</div>\r\n              </div>\r\n            }\r\n            type=\"error\"\r\n            closable={false}\r\n          />\r\n        </div>\r\n      );\r\n    } else {\r\n      const showLogout = networkSelected && networkSelected.name !== \"localhost\";\r\n      networkDisplay = (\r\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\r\n          <Alert\r\n            message=\"⚠️ Wrong Network\"\r\n            description={\r\n              <div>\r\n                You have <b>{networkSelected && networkSelected.name}</b> selected and you need to be on{\" \"}\r\n                <Button\r\n                  onClick={async () => {\r\n                    const ethereum = window.ethereum;\r\n                    const data = [\r\n                      {\r\n                        chainId: \"0x\" + targetNetwork.chainId.toString(16),\r\n                        chainName: targetNetwork.name,\r\n                        nativeCurrency: targetNetwork.nativeCurrency,\r\n                        rpcUrls: [targetNetwork.rpcUrl],\r\n                        blockExplorerUrls: [targetNetwork.blockExplorer],\r\n                      },\r\n                    ];\r\n                    console.log(\"data\", data);\r\n\r\n                    let switchTx;\r\n                    // https://docs.metamask.io/guide/rpc-api.html#other-rpc-methods\r\n                    try {\r\n                      switchTx = await ethereum.request({\r\n                        method: \"wallet_switchEthereumChain\",\r\n                        params: [{ chainId: data[0].chainId }],\r\n                      });\r\n                    } catch (switchError) {\r\n                      // not checking specific error code, because maybe we're not using MetaMask\r\n                      try {\r\n                        switchTx = await ethereum.request({\r\n                          method: \"wallet_addEthereumChain\",\r\n                          params: data,\r\n                        });\r\n                      } catch (addError) {\r\n                        // handle \"add\" error\r\n                      }\r\n                    }\r\n\r\n                    if (switchTx) {\r\n                      console.log(switchTx);\r\n                    }\r\n                  }}\r\n                >\r\n                  <b>{networkLocal && networkLocal.name}</b>\r\n                </Button>\r\n              </div>\r\n            }\r\n            type=\"error\"\r\n            closable={false}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n  } else {\r\n    networkDisplay = USE_NETWORK_SELECTOR ? null : (\r\n      <div style={{ zIndex: -1, position: \"absolute\", right: 154, top: 28, padding: 16, color: targetNetwork.color }}>\r\n        {targetNetwork.name}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  console.log({ networkDisplay });\r\n\r\n  return networkDisplay;\r\n}\r\n\r\nexport default NetworkDisplay;\r\n","import React, { useState } from \"react\";\r\nimport { useBalance, useGasPrice } from \"eth-hooks\";\r\nimport { ethers } from \"ethers\";\r\nimport { Button } from \"antd\";\r\n\r\nimport { Transactor } from \"../helpers\";\r\n\r\nfunction FaucetHint({ localProvider, targetNetwork, address }) {\r\n  const [faucetClicked, setFaucetClicked] = useState(false);\r\n\r\n  // fetch local balance\r\n  const yourLocalBalance = useBalance(localProvider, address);\r\n\r\n  // get gas Price from network\r\n  const gasPrice = useGasPrice(targetNetwork, \"fast\");\r\n\r\n  // Faucet Tx can be used to send funds from the faucet\r\n  const faucetTx = Transactor(localProvider, gasPrice);\r\n\r\n  let faucetHint = \"\";\r\n\r\n  if (\r\n    !faucetClicked &&\r\n    localProvider &&\r\n    localProvider._network &&\r\n    localProvider._network.chainId === 31337 &&\r\n    yourLocalBalance &&\r\n    ethers.utils.formatEther(yourLocalBalance) <= 0\r\n  ) {\r\n    faucetHint = (\r\n      <div style={{ padding: 16, display: \"inline-flex\" }}>\r\n        <Button\r\n          type=\"primary\"\r\n          onClick={() => {\r\n            faucetTx({\r\n              to: address,\r\n              value: ethers.utils.parseEther(\"0.01\"),\r\n            });\r\n            setFaucetClicked(true);\r\n          }}\r\n        >\r\n          💰 Grab funds from the faucet ⛽️\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return faucetHint;\r\n}\r\n\r\nexport default FaucetHint;\r\n","import React from \"react\";\r\nimport { Button, Dropdown, Menu } from \"antd\";\r\n\r\nfunction NetworkSwitch({ networkOptions, selectedNetwork, setSelectedNetwork }) {\r\n  const menu = (\r\n    <Menu>\r\n      {networkOptions\r\n        .filter(i => i !== selectedNetwork)\r\n        .map(i => (\r\n          <Menu.Item key={i}>\r\n            <a onClick={() => setSelectedNetwork(i)}>\r\n              <span style={{ textTransform: \"capitalize\" }}>{i}</span>\r\n            </a>\r\n          </Menu.Item>\r\n        ))}\r\n    </Menu>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <Dropdown.Button overlay={menu} placement=\"bottomRight\" trigger={[\"click\"]}>\r\n        <span style={{ textTransform: \"capitalize\" }}>{selectedNetwork}</span>\r\n      </Dropdown.Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NetworkSwitch;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useContractReader } from \"eth-hooks\";\r\nimport { ethers } from \"ethers\";\r\n\r\n/**\r\n * web3 props can be passed from '../App.jsx' into your local view component for use\r\n * @param {*} yourLocalBalance balance on current network\r\n * @param {*} readContracts contracts from current chain already pre-loaded using ethers contract module. More here https://docs.ethers.io/v5/api/contract/contract/\r\n * @returns react component\r\n */\r\nfunction Home({ yourLocalBalance, readContracts }) {\r\n  // you can also use hooks locally in your component of choice\r\n  // in this case, let's keep track of 'purpose' variable from our contract\r\n  const purpose = useContractReader(readContracts, \"YourContract\", \"purpose\");\r\n\r\n  return (\r\n    <div>\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>📝</span>\r\n        This Is Your App Home. You can start editing it in{\" \"}\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          packages/react-app/views/Home.jsx\r\n        </span>\r\n      </div>\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🤓</span>\r\n        The \"purpose\" variable from our contract is{\" \"}\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          {purpose}\r\n        </span>\r\n      </div>\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🤖</span>\r\n        An example prop of your balance{\" \"}\r\n        <span style={{ fontWeight: \"bold\", color: \"green\" }}>({ethers.utils.formatEther(yourLocalBalance)})</span> was\r\n        passed into the\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          Home.jsx\r\n        </span>{\" \"}\r\n        component from\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          App.jsx\r\n        </span>\r\n      </div>\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>💭</span>\r\n        Check out the <Link to=\"/hints\">\"Hints\"</Link> tab for more tips.\r\n      </div>\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🛠</span>\r\n        Tinker with your smart contract using the <Link to=\"/debug\">\"Debug Contract\"</Link> tab.\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import {SyncOutlined} from \"@ant-design/icons\";\r\nimport {utils} from \"ethers\";\r\nimport {Button, Card, DatePicker, Divider, Input, notification, Progress, Slider, Spin, Switch} from \"antd\";\r\nimport React, {useState} from \"react\";\r\nimport {Address, Balance, Events} from \"../components\";\r\n\r\nexport default function OrcsUI({\r\n                                   address,\r\n                                   mainnetProvider,\r\n                                   localProvider,\r\n                                   yourLocalBalance,\r\n                                   price,\r\n                                   tx,\r\n                                   readContracts,\r\n                                   writeContracts,\r\n                               }) {\r\n    const [mintNOrcs, setMintNOrcs] = useState(1);\r\n\r\n    return (\r\n        <div>\r\n            <div style={{border: \"1px solid #cccccc\", padding: 16, width: 400, margin: \"auto\", marginTop: 64}}>\r\n                <h2>Lazy Orcs</h2>\r\n                <Divider/>\r\n                <div style={{margin: 8}}>\r\n                    <Input\r\n                        defaultValue={1}\r\n                        onChange={e => {\r\n                            setMintNOrcs(parseInt(e.target.value));\r\n                        }}\r\n                    />\r\n                    <Button\r\n                        style={{marginTop: 8}}\r\n                        onClick={async () => {\r\n                            /* look how you call setPurpose on your contract: */\r\n                            /* notice how you pass a call back for tx updates too */\r\n                            if (mintNOrcs > 5 || mintNOrcs <= 0) {\r\n                                notification.error({\r\n                                    message: \"Number Error\",\r\n                                    description: \"The provided number of NFTs has to be between 1 and 5 (inclusive).\",\r\n                                });\r\n                            } else {\r\n                                const result = tx(writeContracts.LazyOrcs.mintOrc(mintNOrcs), update => {\r\n                                    console.log(\"📡 Transaction Update:\", update);\r\n                                    if (update && (update.status === \"confirmed\" || update.status === 1)) {\r\n                                        console.log(\" 🍾 Transaction \" + update.hash + \" finished!\");\r\n                                        console.log(\r\n                                            \" ⛽️ \" +\r\n                                            update.gasUsed +\r\n                                            \"/\" +\r\n                                            (update.gasLimit || update.gas) +\r\n                                            \" @ \" +\r\n                                            parseFloat(update.gasPrice) / 1000000000 +\r\n                                            \" gwei\",\r\n                                        );\r\n                                    }\r\n                                });\r\n                                console.log(\"awaiting metamask/web3 confirm result...\", result);\r\n                                console.log(await result);\r\n                            }\r\n                        }}\r\n                    >\r\n                        Set Purpose!\r\n                    </Button>\r\n                </div>\r\n                <Divider/>\r\n                Your Address:\r\n                <Address address={address} ensProvider={mainnetProvider} fontSize={16}/>\r\n                <Divider/>\r\n                ENS Address Example:\r\n                <Address\r\n                    address=\"0x34aA3F359A9D614239015126635CE7732c18fDF3\" /* this will show as austingriffith.eth */\r\n                    ensProvider={mainnetProvider}\r\n                    fontSize={16}\r\n                />\r\n                <Divider/>\r\n                {/* use utils.formatEther to display a BigNumber: */}\r\n                <h2>Your Balance: {yourLocalBalance ? utils.formatEther(yourLocalBalance) : \"...\"}</h2>\r\n                <div>OR</div>\r\n                <Balance address={address} provider={localProvider} price={price}/>\r\n                <Divider/>\r\n                <div>🐳 Example Whale Balance:</div>\r\n                <Balance balance={utils.parseEther(\"1000\")} provider={localProvider} price={price}/>\r\n                <Divider/>\r\n                {/* use utils.formatEther to display a BigNumber: */}\r\n                <h2>Your Balance: {yourLocalBalance ? utils.formatEther(yourLocalBalance) : \"...\"}</h2>\r\n                <Divider/>\r\n                Your Contract Address:\r\n                <Address\r\n                    address={readContracts && readContracts.YourContract ? readContracts.YourContract.address : null}\r\n                    ensProvider={mainnetProvider}\r\n                    fontSize={16}\r\n                />\r\n                <Divider/>\r\n                <div style={{margin: 8}}>\r\n                    <Button\r\n                        onClick={() => {\r\n                            /* look how you call setPurpose on your contract: */\r\n                            tx(writeContracts.YourContract.setPurpose(\"🍻 Cheers\"));\r\n                        }}\r\n                    >\r\n                        Set Purpose to &quot;🍻 Cheers&quot;\r\n                    </Button>\r\n                </div>\r\n                <div style={{margin: 8}}>\r\n                    <Button\r\n                        onClick={() => {\r\n                            /*\r\n                            you can also just craft a transaction and send it to the tx() transactor\r\n                            here we are sending value straight to the contract's address:\r\n                          */\r\n                            tx({\r\n                                to: writeContracts.YourContract.address,\r\n                                value: utils.parseEther(\"0.001\"),\r\n                            });\r\n                            /* this should throw an error about \"no fallback nor receive function\" until you add it */\r\n                        }}\r\n                    >\r\n                        Send Value\r\n                    </Button>\r\n                </div>\r\n                <div style={{margin: 8}}>\r\n                    <Button\r\n                        onClick={() => {\r\n                            /* look how we call setPurpose AND send some value along */\r\n                            tx(\r\n                                writeContracts.YourContract.setPurpose(\"💵 Paying for this one!\", {\r\n                                    value: utils.parseEther(\"0.001\"),\r\n                                }),\r\n                            );\r\n                            /* this will fail until you make the setPurpose function payable */\r\n                        }}\r\n                    >\r\n                        Set Purpose With Value\r\n                    </Button>\r\n                </div>\r\n                <div style={{margin: 8}}>\r\n                    <Button\r\n                        onClick={() => {\r\n                            /* you can also just craft a transaction and send it to the tx() transactor */\r\n                            tx({\r\n                                to: writeContracts.YourContract.address,\r\n                                value: utils.parseEther(\"0.001\"),\r\n                                data: writeContracts.YourContract.interface.encodeFunctionData(\"setPurpose(string)\", [\r\n                                    \"🤓 Whoa so 1337!\",\r\n                                ]),\r\n                            });\r\n                            /* this should throw an error about \"no fallback nor receive function\" until you add it */\r\n                        }}\r\n                    >\r\n                        Another Example\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n\r\n            {/*\r\n        📑 Maybe display a list of events?\r\n          (uncomment the event and emit line in YourContract.sol! )\r\n      */}\r\n            <Events\r\n                contracts={readContracts}\r\n                contractName=\"YourContract\"\r\n                eventName=\"SetPurpose\"\r\n                localProvider={localProvider}\r\n                mainnetProvider={mainnetProvider}\r\n                startBlock={1}\r\n            />\r\n\r\n            <div style={{width: 600, margin: \"auto\", marginTop: 32, paddingBottom: 256}}>\r\n                <Card>\r\n                    Check out all the{\" \"}\r\n                    <a\r\n                        href=\"https://github.com/austintgriffith/scaffold-eth/tree/master/packages/react-app/src/components\"\r\n                        target=\"_blank\"\r\n                        rel=\"noopener noreferrer\"\r\n                    >\r\n                        📦 components\r\n                    </a>\r\n                </Card>\r\n\r\n                <Card style={{marginTop: 32}}>\r\n                    <div>\r\n                        There are tons of generic components included from{\" \"}\r\n                        <a href=\"https://ant.design/components/overview/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                            🐜 ant.design\r\n                        </a>{\" \"}\r\n                        too!\r\n                    </div>\r\n\r\n                    <div style={{marginTop: 8}}>\r\n                        <Button type=\"primary\">Buttons</Button>\r\n                    </div>\r\n\r\n                    <div style={{marginTop: 8}}>\r\n                        <SyncOutlined spin/> Icons\r\n                    </div>\r\n\r\n                    <div style={{marginTop: 8}}>\r\n                        Date Pickers?\r\n                        <div style={{marginTop: 2}}>\r\n                            <DatePicker onChange={() => {\r\n                            }}/>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div style={{marginTop: 32}}>\r\n                        <Slider range defaultValue={[20, 50]} onChange={() => {\r\n                        }}/>\r\n                    </div>\r\n\r\n                    <div style={{marginTop: 32}}>\r\n                        <Switch defaultChecked onChange={() => {\r\n                        }}/>\r\n                    </div>\r\n\r\n                    <div style={{marginTop: 32}}>\r\n                        <Progress percent={50} status=\"active\"/>\r\n                    </div>\r\n\r\n                    <div style={{marginTop: 32}}>\r\n                        <Spin/>\r\n                    </div>\r\n                </Card>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import { utils } from \"ethers\";\r\nimport { Select } from \"antd\";\r\nimport React, { useState } from \"react\";\r\nimport { Address, AddressInput } from \"../components\";\r\nimport { useTokenList } from \"eth-hooks/dapps/dex\";\r\n\r\nconst { Option } = Select;\r\n\r\nexport default function Hints({ yourLocalBalance, mainnetProvider, price, address }) {\r\n  // Get a list of tokens from a tokenlist -> see tokenlists.org!\r\n  const [selectedToken, setSelectedToken] = useState(\"Pick a token!\");\r\n  const listOfTokens = useTokenList(\r\n    \"https://raw.githubusercontent.com/SetProtocol/uniswap-tokenlist/main/set.tokenlist.json\",\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>👷</span>\r\n        Edit your <b>contract</b> in\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          packages/hardhat/contracts\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🛰</span>\r\n        <b>compile/deploy</b> with\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          yarn run deploy\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🚀</span>\r\n        Your <b>contract artifacts</b> are automatically injected into your frontend at\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          packages/react-app/src/contracts/\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🎛</span>\r\n        Edit your <b>frontend</b> in\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          packages/reactapp/src/App.js\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🔭</span>\r\n        explore the\r\n        <span\r\n          className=\"highlight\"\r\n          style={{\r\n            marginLeft: 4,\r\n            marginRight: 4,\r\n            /* backgroundColor: \"#f9f9f9\", */\r\n            padding: 4,\r\n            borderRadius: 4,\r\n            fontWeight: \"bolder\",\r\n          }}\r\n        >\r\n          🖇 hooks\r\n        </span>\r\n        and\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          📦 components\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        for example, the\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          useBalance()\r\n        </span>{\" \"}\r\n        hook keeps track of your balance: <b>{utils.formatEther(yourLocalBalance || 0)}</b>\r\n      </div>\r\n\r\n      <div style={{ margin: 8 }}>\r\n        <div>\r\n          <b>useTokenList()</b> can get you an array of tokens from{\" \"}\r\n          <a href=\"https://tokenlists.org\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n            tokenlists.org!\r\n          </a>\r\n        </div>\r\n        <Select\r\n          showSearch\r\n          value={selectedToken}\r\n          onChange={value => {\r\n            console.log(`selected ${value}`);\r\n            setSelectedToken(value);\r\n          }}\r\n          filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n          optionFilterProp=\"children\"\r\n        >\r\n          {listOfTokens.map(token => (\r\n            <Option key={token.symbol} value={token.symbol}>\r\n              {token.symbol}\r\n            </Option>\r\n          ))}\r\n        </Select>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        as you build your app you&apos;ll need web3 specific components like an\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          {\"<AddressInput/>\"}\r\n        </span>\r\n        component:\r\n        <div style={{ width: 350, padding: 16, margin: \"auto\" }}>\r\n          <AddressInput ensProvider={mainnetProvider} />\r\n        </div>\r\n        <div>(try putting in your address, an ens address, or scanning a QR code)</div>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        this balance could be multiplied by\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          price\r\n        </span>{\" \"}\r\n        that is loaded with the\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          usePrice\r\n        </span>{\" \"}\r\n        hook with the current value: <b>${price}</b>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        <span style={{ marginRight: 8 }}>💧</span>\r\n        use the <b>faucet</b> to send funds to\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          <Address address={address} minimized /> {address}\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        <span style={{ marginRight: 8 }}>📡</span>\r\n        deploy to a testnet or mainnet by editing\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          packages/hardhat/hardhat.config.js\r\n        </span>\r\n        and running\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          yarn run deploy\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🔑</span>\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          yarn run generate\r\n        </span>\r\n        will create a deployer account in\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          packages/hardhat\r\n        </span>\r\n        <div style={{ marginTop: 8 }}>\r\n          (use{\" \"}\r\n          <span\r\n            className=\"highlight\"\r\n            style={{\r\n              marginLeft: 4,\r\n              /* backgroundColor: \"#f1f1f1\", */ padding: 4,\r\n              borderRadius: 4,\r\n              fontWeight: \"bolder\",\r\n            }}\r\n          >\r\n            yarn run account\r\n          </span>{\" \"}\r\n          to display deployer address and balance)\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        <span style={{ marginRight: 8 }}>⚙️</span>\r\n        build your app with\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          yarn run build\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🚢</span>\r\n        ship it!\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          yarn run surge\r\n        </span>\r\n        or\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          yarn run s3\r\n        </span>\r\n        or\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          yarn run ipfs\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        <span style={{ marginRight: 8 }}>💬</span>\r\n        for support, join this\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\">\r\n            Telegram Chat\r\n          </a>\r\n        </span>\r\n      </div>\r\n      <div style={{ padding: 128 }}>\r\n        🛠 Check out your browser&apos;s developer console for more... (inspect console) 🚀\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { gql, useQuery } from \"@apollo/client\";\r\nimport { Button, Input, Table, Typography } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport GraphiQL from \"graphiql\";\r\nimport \"graphiql/graphiql.min.css\";\r\nimport fetch from \"isomorphic-fetch\";\r\nimport React, { useState } from \"react\";\r\nimport { Address } from \"../components\";\r\n\r\nconst highlight = {\r\n  marginLeft: 4,\r\n  marginRight: 8,\r\n  /* backgroundColor: \"#f9f9f9\", */ padding: 4,\r\n  borderRadius: 4,\r\n  fontWeight: \"bolder\",\r\n};\r\n\r\nfunction Subgraph(props) {\r\n  function graphQLFetcher(graphQLParams) {\r\n    return fetch(props.subgraphUri, {\r\n      method: \"post\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(graphQLParams),\r\n    }).then(response => response.json());\r\n  }\r\n\r\n  const EXAMPLE_GRAPHQL = `\r\n  {\r\n    purposes(first: 25, orderBy: createdAt, orderDirection: desc) {\r\n      id\r\n      purpose\r\n      createdAt\r\n      sender {\r\n        id\r\n      }\r\n    }\r\n    senders {\r\n      id\r\n      address\r\n      purposeCount\r\n    }\r\n  }\r\n  `;\r\n  const EXAMPLE_GQL = gql(EXAMPLE_GRAPHQL);\r\n  const { loading, data } = useQuery(EXAMPLE_GQL, { pollInterval: 2500 });\r\n\r\n  const purposeColumns = [\r\n    {\r\n      title: \"Purpose\",\r\n      dataIndex: \"purpose\",\r\n      key: \"purpose\",\r\n    },\r\n    {\r\n      title: \"Sender\",\r\n      key: \"id\",\r\n      render: record => <Address value={record.sender.id} ensProvider={props.mainnetProvider} fontSize={16} />,\r\n    },\r\n    {\r\n      title: \"createdAt\",\r\n      key: \"createdAt\",\r\n      dataIndex: \"createdAt\",\r\n      render: d => new Date(d * 1000).toISOString(),\r\n    },\r\n  ];\r\n\r\n  const [newPurpose, setNewPurpose] = useState(\"loading...\");\r\n\r\n  const deployWarning = (\r\n    <div style={{ marginTop: 8, padding: 8 }}>Warning: 🤔 Have you deployed your subgraph yet?</div>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <div style={{ margin: \"auto\", marginTop: 32 }}>\r\n        You will find that parsing/tracking events with the{\" \"}\r\n        <span className=\"highlight\" style={highlight}>\r\n          useEventListener\r\n        </span>{\" \"}\r\n        hook becomes a chore for every new project.\r\n      </div>\r\n      <div style={{ margin: \"auto\", marginTop: 32 }}>\r\n        Instead, you can use{\" \"}\r\n        <a href=\"https://thegraph.com/docs/about/introduction\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          The Graph\r\n        </a>{\" \"}\r\n        with 🏗 scaffold-eth (\r\n        <a href=\"https://youtu.be/T5ylzOTkn-Q\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          learn more\r\n        </a>\r\n        ):\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🚮</span>\r\n        Clean up previous data:\r\n        <span className=\"highlight\" style={highlight}>\r\n          yarn clean-graph-node\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>📡</span>\r\n        Spin up a local graph node by running\r\n        <span className=\"highlight\" style={highlight}>\r\n          yarn run-graph-node\r\n        </span>\r\n        <span style={{ marginLeft: 4 }}>\r\n          {\" \"}\r\n          (requires{\" \"}\r\n          <a href=\"https://www.docker.com/products/docker-desktop\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n            {\" \"}\r\n            Docker\r\n          </a>\r\n          ){\" \"}\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>📝</span>\r\n        Create your <b>local subgraph</b> by running\r\n        <span className=\"highlight\" style={highlight}>\r\n          yarn graph-create-local\r\n        </span>\r\n        (only required once!)\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🚢</span>\r\n        Deploy your <b>local subgraph</b> by running\r\n        <span className=\"highlight\" style={highlight}>\r\n          yarn graph-ship-local\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🖍️</span>\r\n        Edit your <b>local subgraph</b> in\r\n        <span className=\"highlight\" style={highlight}>\r\n          packages/subgraph/src\r\n        </span>\r\n        (learn more about subgraph definition{\" \"}\r\n        <a href=\"https://thegraph.com/docs/define-a-subgraph\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          here\r\n        </a>\r\n        )\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🤩</span>\r\n        Deploy your <b>contracts and your subgraph</b> in one go by running\r\n        <span className=\"highlight\" style={highlight}>\r\n          yarn deploy-and-graph\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ width: 780, margin: \"auto\", paddingBottom: 64 }}>\r\n        <div style={{ margin: 32, textAlign: \"right\" }}>\r\n          <Input\r\n            onChange={e => {\r\n              setNewPurpose(e.target.value);\r\n            }}\r\n          />\r\n          <Button\r\n            onClick={() => {\r\n              console.log(\"newPurpose\", newPurpose);\r\n              /* look how you call setPurpose on your contract: */\r\n              props.tx(props.writeContracts.YourContract.setPurpose(newPurpose));\r\n            }}\r\n          >\r\n            Set Purpose\r\n          </Button>\r\n        </div>\r\n\r\n        {data ? (\r\n          <Table dataSource={data.purposes} columns={purposeColumns} rowKey=\"id\" />\r\n        ) : (\r\n          <Typography>{loading ? \"Loading...\" : deployWarning}</Typography>\r\n        )}\r\n\r\n        <div style={{ margin: 32, height: 400, border: \"1px solid #888888\", textAlign: \"left\" }}>\r\n          <GraphiQL fetcher={graphQLFetcher} docExplorerOpen query={EXAMPLE_GRAPHQL} />\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ padding: 64 }}>...</div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Subgraph;\r\n","import { Alert, Button, Col, Menu, Row } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport {\r\n  useBalance,\r\n  useContractLoader,\r\n  useContractReader,\r\n  useGasPrice,\r\n  useOnBlock,\r\n  useUserProviderAndSigner,\r\n} from \"eth-hooks\";\r\nimport { useExchangeEthPrice } from \"eth-hooks/dapps/dex\";\r\nimport React, { useCallback, useEffect, useState } from \"react\";\r\nimport { Link, Route, Switch, useLocation } from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport {\r\n  Account,\r\n  Contract,\r\n  Faucet,\r\n  GasGauge,\r\n  Header,\r\n  Ramp,\r\n  ThemeSwitch,\r\n  NetworkDisplay,\r\n  FaucetHint,\r\n  NetworkSwitch,\r\n} from \"./components\";\r\nimport { NETWORKS, ALCHEMY_KEY } from \"./constants\";\r\nimport externalContracts from \"./contracts/external_contracts\";\r\n// contracts\r\nimport deployedContracts from \"./contracts/hardhat_contracts.json\";\r\nimport { Transactor, Web3ModalSetup } from \"./helpers\";\r\nimport { Home, ExampleUI, OrcsUI, Hints, Subgraph } from \"./views\";\r\nimport { useStaticJsonRPC } from \"./hooks\";\r\n\r\nconst { ethers } = require(\"ethers\");\r\n/*\r\n    Welcome to 🏗 scaffold-eth !\r\n\r\n    Code:\r\n    https://github.com/scaffold-eth/scaffold-eth\r\n\r\n    Support:\r\n    https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\r\n    or DM @austingriffith on twitter or telegram\r\n\r\n    You should get your own Alchemy.com & Infura.io ID and put it in `constants.js`\r\n    (this is your connection to the main Ethereum network for ENS etc.)\r\n\r\n\r\n    🌏 EXTERNAL CONTRACTS:\r\n    You can also bring in contract artifacts in `constants.js`\r\n    (and then use the `useExternalContractLoader()` hook!)\r\n*/\r\n\r\n/// 📡 What chain are your contracts deployed to?\r\nconst initialNetwork = NETWORKS.rinkeby; // <------- select your target frontend network (localhost, rinkeby, xdai, mainnet)\r\n\r\n// 😬 Sorry for all the console logging\r\nconst DEBUG = true;\r\nconst NETWORKCHECK = true;\r\nconst USE_BURNER_WALLET = true; // toggle burner wallet feature\r\nconst USE_NETWORK_SELECTOR = false;\r\n\r\nconst web3Modal = Web3ModalSetup();\r\n\r\n// 🛰 providers\r\nconst providers = [\r\n  \"https://eth-mainnet.gateway.pokt.network/v1/lb/611156b4a585a20035148406\",\r\n  `https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`,\r\n  \"https://rpc.scaffoldeth.io:48544\",\r\n];\r\n\r\nfunction App(props) {\r\n  // specify all the chains your app is available on. Eg: ['localhost', 'mainnet', ...otherNetworks ]\r\n  // reference './constants.js' for other networks\r\n  const networkOptions = [initialNetwork.name, \"mainnet\", \"rinkeby\"];\r\n\r\n  const [injectedProvider, setInjectedProvider] = useState();\r\n  const [address, setAddress] = useState();\r\n  const [selectedNetwork, setSelectedNetwork] = useState(networkOptions[0]);\r\n  const location = useLocation();\r\n\r\n  const targetNetwork = NETWORKS[selectedNetwork];\r\n\r\n  // 🔭 block explorer URL\r\n  const blockExplorer = targetNetwork.blockExplorer;\r\n\r\n  // load all your providers\r\n  const localProvider = useStaticJsonRPC([\r\n    process.env.REACT_APP_PROVIDER ? process.env.REACT_APP_PROVIDER : targetNetwork.rpcUrl,\r\n  ]);\r\n  const mainnetProvider = useStaticJsonRPC(providers);\r\n\r\n  if (DEBUG) console.log(`Using ${selectedNetwork} network`);\r\n\r\n  // 🛰 providers\r\n  if (DEBUG) console.log(\"📡 Connecting to Mainnet Ethereum\");\r\n\r\n  const logoutOfWeb3Modal = async () => {\r\n    await web3Modal.clearCachedProvider();\r\n    if (injectedProvider && injectedProvider.provider && typeof injectedProvider.provider.disconnect == \"function\") {\r\n      await injectedProvider.provider.disconnect();\r\n    }\r\n    setTimeout(() => {\r\n      window.location.reload();\r\n    }, 1);\r\n  };\r\n\r\n  /* 💵 This hook will get the price of ETH from 🦄 Uniswap: */\r\n  const price = useExchangeEthPrice(targetNetwork, mainnetProvider);\r\n\r\n  /* 🔥 This hook will get the price of Gas from ⛽️ EtherGasStation */\r\n  const gasPrice = useGasPrice(targetNetwork, \"fast\");\r\n  // Use your injected provider from 🦊 Metamask or if you don't have it then instantly generate a 🔥 burner wallet.\r\n  const userProviderAndSigner = useUserProviderAndSigner(injectedProvider, localProvider, USE_BURNER_WALLET);\r\n  const userSigner = userProviderAndSigner.signer;\r\n\r\n  useEffect(() => {\r\n    async function getAddress() {\r\n      if (userSigner) {\r\n        const newAddress = await userSigner.getAddress();\r\n        setAddress(newAddress);\r\n      }\r\n    }\r\n    getAddress();\r\n  }, [userSigner]);\r\n\r\n  // You can warn the user if you would like them to be on a specific network\r\n  const localChainId = localProvider && localProvider._network && localProvider._network.chainId;\r\n  const selectedChainId =\r\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\r\n\r\n  // For more hooks, check out 🔗eth-hooks at: https://www.npmjs.com/package/eth-hooks\r\n\r\n  // The transactor wraps transactions and provides notificiations\r\n  const tx = Transactor(userSigner, gasPrice);\r\n\r\n  // 🏗 scaffold-eth is full of handy hooks like this one to get your balance:\r\n  const yourLocalBalance = useBalance(localProvider, address);\r\n\r\n  // Just plug in different 🛰 providers to get your balance on different chains:\r\n  const yourMainnetBalance = useBalance(mainnetProvider, address);\r\n\r\n  // const contractConfig = useContractConfig();\r\n\r\n  const contractConfig = { deployedContracts: deployedContracts || {}, externalContracts: externalContracts || {} };\r\n\r\n  // Load in your local 📝 contract and read a value from it:\r\n  const readContracts = useContractLoader(localProvider, contractConfig);\r\n\r\n  // If you want to make 🔐 write transactions to your contracts, use the userSigner:\r\n  const writeContracts = useContractLoader(userSigner, contractConfig, localChainId);\r\n\r\n  // EXTERNAL CONTRACT EXAMPLE:\r\n  //\r\n  // If you want to bring in the mainnet DAI contract it would look like:\r\n  const mainnetContracts = useContractLoader(mainnetProvider, contractConfig);\r\n\r\n  // If you want to call a function on a new block\r\n  useOnBlock(mainnetProvider, () => {\r\n    console.log(`⛓ A new mainnet block is here: ${mainnetProvider._lastBlockNumber}`);\r\n  });\r\n\r\n  // Then read your DAI balance like:\r\n  const myMainnetDAIBalance = useContractReader(mainnetContracts, \"DAI\", \"balanceOf\", [\r\n    \"0x34aA3F359A9D614239015126635CE7732c18fDF3\",\r\n  ]);\r\n\r\n  // keep track of a variable from the contract in the local React state:\r\n  const purpose = useContractReader(readContracts, \"YourContract\", \"purpose\");\r\n\r\n  /*\r\n  const addressFromENS = useResolveName(mainnetProvider, \"austingriffith.eth\");\r\n  console.log(\"🏷 Resolved austingriffith.eth as:\",addressFromENS)\r\n  */\r\n\r\n  //\r\n  // 🧫 DEBUG 👨🏻‍🔬\r\n  //\r\n  useEffect(() => {\r\n    if (\r\n      DEBUG &&\r\n      mainnetProvider &&\r\n      address &&\r\n      selectedChainId &&\r\n      yourLocalBalance &&\r\n      yourMainnetBalance &&\r\n      readContracts &&\r\n      writeContracts &&\r\n      mainnetContracts\r\n    ) {\r\n      console.log(\"_____________________________________ 🏗 scaffold-eth _____________________________________\");\r\n      console.log(\"🌎 mainnetProvider\", mainnetProvider);\r\n      console.log(\"🏠 localChainId\", localChainId);\r\n      console.log(\"👩‍💼 selected address:\", address);\r\n      console.log(\"🕵🏻‍♂️ selectedChainId:\", selectedChainId);\r\n      console.log(\"💵 yourLocalBalance\", yourLocalBalance ? ethers.utils.formatEther(yourLocalBalance) : \"...\");\r\n      console.log(\"💵 yourMainnetBalance\", yourMainnetBalance ? ethers.utils.formatEther(yourMainnetBalance) : \"...\");\r\n      console.log(\"📝 readContracts\", readContracts);\r\n      console.log(\"🌍 DAI contract on mainnet:\", mainnetContracts);\r\n      console.log(\"💵 yourMainnetDAIBalance\", myMainnetDAIBalance);\r\n      console.log(\"🔐 writeContracts\", writeContracts);\r\n    }\r\n  }, [\r\n    mainnetProvider,\r\n    address,\r\n    selectedChainId,\r\n    yourLocalBalance,\r\n    yourMainnetBalance,\r\n    readContracts,\r\n    writeContracts,\r\n    mainnetContracts,\r\n  ]);\r\n\r\n  const loadWeb3Modal = useCallback(async () => {\r\n    const provider = await web3Modal.connect();\r\n    setInjectedProvider(new ethers.providers.Web3Provider(provider));\r\n\r\n    provider.on(\"chainChanged\", chainId => {\r\n      console.log(`chain changed to ${chainId}! updating providers`);\r\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\r\n    });\r\n\r\n    provider.on(\"accountsChanged\", () => {\r\n      console.log(`account changed!`);\r\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\r\n    });\r\n\r\n    // Subscribe to session disconnection\r\n    provider.on(\"disconnect\", (code, reason) => {\r\n      console.log(code, reason);\r\n      logoutOfWeb3Modal();\r\n    });\r\n  }, [setInjectedProvider]);\r\n\r\n  useEffect(() => {\r\n    if (web3Modal.cachedProvider) {\r\n      loadWeb3Modal();\r\n    }\r\n  }, [loadWeb3Modal]);\r\n\r\n  const faucetAvailable = localProvider && localProvider.connection && targetNetwork.name.indexOf(\"local\") !== -1;\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {/* ✏️ Edit the header and change the title to your project name */}\r\n      <Header />\r\n      <NetworkDisplay\r\n        NETWORKCHECK={NETWORKCHECK}\r\n        localChainId={localChainId}\r\n        selectedChainId={selectedChainId}\r\n        targetNetwork={targetNetwork}\r\n        logoutOfWeb3Modal={logoutOfWeb3Modal}\r\n        USE_NETWORK_SELECTOR={USE_NETWORK_SELECTOR}\r\n      />\r\n      <Menu style={{ textAlign: \"center\", marginTop: 40 }} selectedKeys={[location.pathname]} mode=\"horizontal\">\r\n        <Menu.Item key=\"/\">\r\n          <Link to=\"/\">App Home</Link>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"/debug\">\r\n          <Link to=\"/debug\">Debug Contracts</Link>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"/hints\">\r\n          <Link to=\"/hints\">Hints</Link>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"/orcsui\">\r\n          <Link to=\"/orcsui\">OrcsUI</Link>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"/mainnetdai\">\r\n          <Link to=\"/mainnetdai\">Mainnet DAI</Link>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"/subgraph\">\r\n          <Link to=\"/subgraph\">Subgraph</Link>\r\n        </Menu.Item>\r\n      </Menu>\r\n\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          {/* pass in any web3 props to this Home component. For example, yourLocalBalance */}\r\n          <Home yourLocalBalance={yourLocalBalance} readContracts={readContracts} />\r\n        </Route>\r\n        <Route exact path=\"/debug\">\r\n          {/*\r\n                🎛 this scaffolding is full of commonly used components\r\n                this <Contract/> component will automatically parse your ABI\r\n                and give you a form to interact with it locally\r\n            */}\r\n\r\n          <Contract\r\n            name=\"LazyOrcs\"\r\n            price={price}\r\n            signer={userSigner}\r\n            provider={localProvider}\r\n            address={address}\r\n            blockExplorer={blockExplorer}\r\n            contractConfig={contractConfig}\r\n          />\r\n        </Route>\r\n        <Route path=\"/hints\">\r\n          <Hints\r\n            address={address}\r\n            yourLocalBalance={yourLocalBalance}\r\n            mainnetProvider={mainnetProvider}\r\n            price={price}\r\n          />\r\n        </Route>\r\n        <Route path=\"/orcsui\">\r\n          <OrcsUI\r\n            address={address}\r\n            userSigner={userSigner}\r\n            mainnetProvider={mainnetProvider}\r\n            localProvider={localProvider}\r\n            yourLocalBalance={yourLocalBalance}\r\n            price={price}\r\n            tx={tx}\r\n            writeContracts={writeContracts}\r\n            readContracts={readContracts}\r\n            purpose={purpose}\r\n          />\r\n        </Route>\r\n        <Route path=\"/mainnetdai\">\r\n          <Contract\r\n            name=\"DAI\"\r\n            customContract={mainnetContracts && mainnetContracts.contracts && mainnetContracts.contracts.DAI}\r\n            signer={userSigner}\r\n            provider={mainnetProvider}\r\n            address={address}\r\n            blockExplorer=\"https://etherscan.io/\"\r\n            contractConfig={contractConfig}\r\n            chainId={1}\r\n          />\r\n          {/*\r\n            <Contract\r\n              name=\"UNI\"\r\n              customContract={mainnetContracts && mainnetContracts.contracts && mainnetContracts.contracts.UNI}\r\n              signer={userSigner}\r\n              provider={mainnetProvider}\r\n              address={address}\r\n              blockExplorer=\"https://etherscan.io/\"\r\n            />\r\n            */}\r\n        </Route>\r\n        <Route path=\"/subgraph\">\r\n          <Subgraph\r\n            subgraphUri={props.subgraphUri}\r\n            tx={tx}\r\n            writeContracts={writeContracts}\r\n            mainnetProvider={mainnetProvider}\r\n          />\r\n        </Route>\r\n      </Switch>\r\n\r\n      <ThemeSwitch />\r\n\r\n      {/* 👨‍💼 Your account is in the top right with a wallet at connect options */}\r\n      <div style={{ position: \"fixed\", textAlign: \"right\", right: 0, top: 0, padding: 10 }}>\r\n        <div style={{ display: \"flex\", flex: 1, alignItems: \"center\" }}>\r\n          {USE_NETWORK_SELECTOR && (\r\n            <div style={{ marginRight: 20 }}>\r\n              <NetworkSwitch\r\n                networkOptions={networkOptions}\r\n                selectedNetwork={selectedNetwork}\r\n                setSelectedNetwork={setSelectedNetwork}\r\n              />\r\n            </div>\r\n          )}\r\n          <Account\r\n            useBurner={USE_BURNER_WALLET}\r\n            address={address}\r\n            localProvider={localProvider}\r\n            userSigner={userSigner}\r\n            mainnetProvider={mainnetProvider}\r\n            price={price}\r\n            web3Modal={web3Modal}\r\n            loadWeb3Modal={loadWeb3Modal}\r\n            logoutOfWeb3Modal={logoutOfWeb3Modal}\r\n            blockExplorer={blockExplorer}\r\n          />\r\n        </div>\r\n        {yourLocalBalance.lte(ethers.BigNumber.from(\"0\")) && (\r\n          <FaucetHint localProvider={localProvider} targetNetwork={targetNetwork} address={address} />\r\n        )}\r\n      </div>\r\n\r\n      {/* 🗺 Extra UI like gas price, eth price, faucet, and support: */}\r\n      <div style={{ position: \"fixed\", textAlign: \"left\", left: 0, bottom: 20, padding: 10 }}>\r\n        <Row align=\"middle\" gutter={[4, 4]}>\r\n          <Col span={8}>\r\n            <Ramp price={price} address={address} networks={NETWORKS} />\r\n          </Col>\r\n\r\n          <Col span={8} style={{ textAlign: \"center\", opacity: 0.8 }}>\r\n            <GasGauge gasPrice={gasPrice} />\r\n          </Col>\r\n          <Col span={8} style={{ textAlign: \"center\", opacity: 1 }}>\r\n            <Button\r\n              onClick={() => {\r\n                window.open(\"https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\");\r\n              }}\r\n              size=\"large\"\r\n              shape=\"round\"\r\n            >\r\n              <span style={{ marginRight: 8 }} role=\"img\" aria-label=\"support\">\r\n                💬\r\n              </span>\r\n              Support\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row align=\"middle\" gutter={[4, 4]}>\r\n          <Col span={24}>\r\n            {\r\n              /*  if the local provider has a signer, let's show the faucet:  */\r\n              faucetAvailable ? (\r\n                <Faucet localProvider={localProvider} price={price} ensProvider={mainnetProvider} />\r\n              ) : (\r\n                \"\"\r\n              )\r\n            }\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\r\nimport React from \"react\";\r\nimport { ThemeSwitcherProvider } from \"react-css-theme-switcher\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\nconst themes = {\r\n  dark: `${process.env.PUBLIC_URL}/dark-theme.css`,\r\n  light: `${process.env.PUBLIC_URL}/light-theme.css`,\r\n};\r\n\r\nconst prevTheme = window.localStorage.getItem(\"theme\");\r\n\r\nconst subgraphUri = \"http://localhost:8000/subgraphs/name/scaffold-eth/your-contract\";\r\n\r\nconst client = new ApolloClient({\r\n  uri: subgraphUri,\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nReactDOM.render(\r\n  <ApolloProvider client={client}>\r\n    <ThemeSwitcherProvider themeMap={themes} defaultTheme={prevTheme || \"light\"}>\r\n      <BrowserRouter>\r\n        <App subgraphUri={subgraphUri} />\r\n      </BrowserRouter>\r\n    </ThemeSwitcherProvider>\r\n  </ApolloProvider>,\r\n  document.getElementById(\"root\"),\r\n);\r\n","const ERC20ABI = [\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"name\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"string\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        name: \"_spender\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        name: \"_value\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"approve\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"bool\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"totalSupply\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        name: \"_from\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        name: \"_to\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        name: \"_value\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"transferFrom\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"bool\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"decimals\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"uint8\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        name: \"_owner\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"balanceOf\",\r\n    outputs: [\r\n      {\r\n        name: \"balance\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"symbol\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"string\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        name: \"_to\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        name: \"_value\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"transfer\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"bool\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        name: \"_owner\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        name: \"_spender\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"allowance\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    payable: true,\r\n    stateMutability: \"payable\",\r\n    type: \"fallback\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: \"owner\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: \"spender\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: \"value\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"Approval\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: \"from\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: \"to\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: \"value\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"Transfer\",\r\n    type: \"event\",\r\n  },\r\n];\r\nconst DAIABI = [\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"chainId_\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"constructor\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"src\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"guy\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"Approval\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: true,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: \"bytes4\",\r\n        name: \"sig\",\r\n        type: \"bytes4\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"usr\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: \"bytes32\",\r\n        name: \"arg1\",\r\n        type: \"bytes32\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: \"bytes32\",\r\n        name: \"arg2\",\r\n        type: \"bytes32\",\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: \"bytes\",\r\n        name: \"data\",\r\n        type: \"bytes\",\r\n      },\r\n    ],\r\n    name: \"LogNote\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"src\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"dst\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"Transfer\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"DOMAIN_SEPARATOR\",\r\n    outputs: [\r\n      {\r\n        internalType: \"bytes32\",\r\n        name: \"\",\r\n        type: \"bytes32\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"PERMIT_TYPEHASH\",\r\n    outputs: [\r\n      {\r\n        internalType: \"bytes32\",\r\n        name: \"\",\r\n        type: \"bytes32\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"address\",\r\n        name: \"\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"allowance\",\r\n    outputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"usr\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"approve\",\r\n    outputs: [\r\n      {\r\n        internalType: \"bool\",\r\n        name: \"\",\r\n        type: \"bool\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"balanceOf\",\r\n    outputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"usr\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"burn\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"decimals\",\r\n    outputs: [\r\n      {\r\n        internalType: \"uint8\",\r\n        name: \"\",\r\n        type: \"uint8\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"guy\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"deny\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"usr\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"mint\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"src\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"address\",\r\n        name: \"dst\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"move\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"name\",\r\n    outputs: [\r\n      {\r\n        internalType: \"string\",\r\n        name: \"\",\r\n        type: \"string\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"nonces\",\r\n    outputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"holder\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"address\",\r\n        name: \"spender\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"nonce\",\r\n        type: \"uint256\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"expiry\",\r\n        type: \"uint256\",\r\n      },\r\n      {\r\n        internalType: \"bool\",\r\n        name: \"allowed\",\r\n        type: \"bool\",\r\n      },\r\n      {\r\n        internalType: \"uint8\",\r\n        name: \"v\",\r\n        type: \"uint8\",\r\n      },\r\n      {\r\n        internalType: \"bytes32\",\r\n        name: \"r\",\r\n        type: \"bytes32\",\r\n      },\r\n      {\r\n        internalType: \"bytes32\",\r\n        name: \"s\",\r\n        type: \"bytes32\",\r\n      },\r\n    ],\r\n    name: \"permit\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"usr\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"pull\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"usr\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"push\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"guy\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"rely\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"symbol\",\r\n    outputs: [\r\n      {\r\n        internalType: \"string\",\r\n        name: \"\",\r\n        type: \"string\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"totalSupply\",\r\n    outputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"dst\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"transfer\",\r\n    outputs: [\r\n      {\r\n        internalType: \"bool\",\r\n        name: \"\",\r\n        type: \"bool\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"src\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"address\",\r\n        name: \"dst\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"transferFrom\",\r\n    outputs: [\r\n      {\r\n        internalType: \"bool\",\r\n        name: \"\",\r\n        type: \"bool\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"version\",\r\n    outputs: [\r\n      {\r\n        internalType: \"string\",\r\n        name: \"\",\r\n        type: \"string\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"wards\",\r\n    outputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n];\r\n\r\n// Mainnet DAI, Optimism and Arbitrium Rollup Contracts with local addresses\r\nmodule.exports = {\r\n  1: {\r\n    contracts: {\r\n      DAI: {\r\n        address: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\r\n        abi: DAIABI,\r\n      },\r\n      UNI: {\r\n        address: \"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\",\r\n        abi: ERC20ABI,\r\n      },\r\n    },\r\n  },\r\n};\r\n","export const INFURA_ID = \"f9e88100f9114c66a44be6d30b69fdb6\";\r\nexport const BLOCKNATIVE_DAPPID = \"48b13b46-963b-427b-85bb-9995e8cc1cec\";\r\nexport const ALCHEMY_KEY = \"pRPWIQaCpDtp0HPZSPIYsLs4xrLYrjpw\";\r\n\r\nexport const NETWORKS = {\r\n  localhost: {\r\n    name: \"localhost\",\r\n    color: \"#666666\",\r\n    chainId: 31337,\r\n    blockExplorer: \"\",\r\n    rpcUrl: \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":8545\",\r\n  },\r\n  mainnet: {\r\n    name: \"mainnet\",\r\n    color: \"#ff8b9e\",\r\n    chainId: 1,\r\n    rpcUrl: `https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`,\r\n    blockExplorer: \"https://etherscan.io/\",\r\n  },\r\n  kovan: {\r\n    name: \"kovan\",\r\n    color: \"#7003DD\",\r\n    chainId: 42,\r\n    rpcUrl: `https://kovan.infura.io/v3/${INFURA_ID}`,\r\n    blockExplorer: \"https://kovan.etherscan.io/\",\r\n    faucet: \"https://gitter.im/kovan-testnet/faucet\", // https://faucet.kovan.network/\r\n  },\r\n  rinkeby: {\r\n    name: \"rinkeby\",\r\n    color: \"#e0d068\",\r\n    chainId: 4,\r\n    rpcUrl: `https://rinkeby.infura.io/v3/${INFURA_ID}`,\r\n    faucet: \"https://faucet.rinkeby.io/\",\r\n    blockExplorer: \"https://rinkeby.etherscan.io/\",\r\n  },\r\n  ropsten: {\r\n    name: \"ropsten\",\r\n    color: \"#F60D09\",\r\n    chainId: 3,\r\n    faucet: \"https://faucet.ropsten.be/\",\r\n    blockExplorer: \"https://ropsten.etherscan.io/\",\r\n    rpcUrl: `https://ropsten.infura.io/v3/${INFURA_ID}`,\r\n  },\r\n  goerli: {\r\n    name: \"goerli\",\r\n    color: \"#0975F6\",\r\n    chainId: 5,\r\n    faucet: \"https://goerli-faucet.slock.it/\",\r\n    blockExplorer: \"https://goerli.etherscan.io/\",\r\n    rpcUrl: `https://goerli.infura.io/v3/${INFURA_ID}`,\r\n  },\r\n  xdai: {\r\n    name: \"xdai\",\r\n    color: \"#48a9a6\",\r\n    chainId: 100,\r\n    price: 1,\r\n    gasPrice: 1000000000,\r\n    rpcUrl: \"https://dai.poa.network\",\r\n    faucet: \"https://xdai-faucet.top/\",\r\n    blockExplorer: \"https://blockscout.com/poa/xdai/\",\r\n  },\r\n  matic: {\r\n    name: \"matic\",\r\n    color: \"#2bbdf7\",\r\n    chainId: 137,\r\n    price: 1,\r\n    gasPrice: 1000000000,\r\n    rpcUrl: \"https://rpc-mainnet.maticvigil.com\",\r\n    faucet: \"https://faucet.matic.network/\",\r\n    blockExplorer: \"https://explorer-mainnet.maticvigil.com//\",\r\n  },\r\n  mumbai: {\r\n    name: \"mumbai\",\r\n    color: \"#92D9FA\",\r\n    chainId: 80001,\r\n    price: 1,\r\n    gasPrice: 1000000000,\r\n    rpcUrl: \"https://rpc-mumbai.maticvigil.com\",\r\n    faucet: \"https://faucet.matic.network/\",\r\n    blockExplorer: \"https://mumbai-explorer.matic.today/\",\r\n  },\r\n  localArbitrum: {\r\n    name: \"localArbitrum\",\r\n    color: \"#50a0ea\",\r\n    chainId: 153869338190755,\r\n    blockExplorer: \"\",\r\n    rpcUrl: `http://localhost:8547`,\r\n  },\r\n  localArbitrumL1: {\r\n    name: \"localArbitrumL1\",\r\n    color: \"#50a0ea\",\r\n    chainId: 44010,\r\n    blockExplorer: \"\",\r\n    rpcUrl: `http://localhost:7545`,\r\n  },\r\n  rinkebyArbitrum: {\r\n    name: \"Arbitrum Testnet\",\r\n    color: \"#50a0ea\",\r\n    chainId: 421611,\r\n    blockExplorer: \"https://rinkeby-explorer.arbitrum.io/#/\",\r\n    rpcUrl: `https://rinkeby.arbitrum.io/rpc`,\r\n  },\r\n  arbitrum: {\r\n    name: \"Arbitrum\",\r\n    color: \"#50a0ea\",\r\n    chainId: 42161,\r\n    blockExplorer: \"https://explorer.arbitrum.io/#/\",\r\n    rpcUrl: `https://arb1.arbitrum.io/rpc`,\r\n    gasPrice: 0,\r\n  },\r\n  localOptimismL1: {\r\n    name: \"localOptimismL1\",\r\n    color: \"#f01a37\",\r\n    chainId: 31337,\r\n    blockExplorer: \"\",\r\n    rpcUrl: \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":9545\",\r\n  },\r\n  localOptimism: {\r\n    name: \"localOptimism\",\r\n    color: \"#f01a37\",\r\n    chainId: 420,\r\n    blockExplorer: \"\",\r\n    rpcUrl: \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":8545\",\r\n    gasPrice: 0,\r\n  },\r\n  kovanOptimism: {\r\n    name: \"kovanOptimism\",\r\n    color: \"#f01a37\",\r\n    chainId: 69,\r\n    blockExplorer: \"https://kovan-optimistic.etherscan.io/\",\r\n    rpcUrl: `https://kovan.optimism.io`,\r\n    gasPrice: 0,\r\n  },\r\n  optimism: {\r\n    name: \"optimism\",\r\n    color: \"#f01a37\",\r\n    chainId: 10,\r\n    blockExplorer: \"https://optimistic.etherscan.io/\",\r\n    rpcUrl: `https://mainnet.optimism.io`,\r\n  },\r\n  localAvalanche: {\r\n    name: \"localAvalanche\",\r\n    color: \"#666666\",\r\n    chainId: 43112,\r\n    blockExplorer: \"\",\r\n    rpcUrl: `http://localhost:9650/ext/bc/C/rpc`,\r\n    gasPrice: 225000000000,\r\n  },\r\n  fujiAvalanche: {\r\n    name: \"fujiAvalanche\",\r\n    color: \"#666666\",\r\n    chainId: 43113,\r\n    blockExplorer: \"https://cchain.explorer.avax-test.network/\",\r\n    rpcUrl: `https://api.avax-test.network/ext/bc/C/rpc`,\r\n    gasPrice: 225000000000,\r\n  },\r\n  mainnetAvalanche: {\r\n    name: \"mainnetAvalanche\",\r\n    color: \"#666666\",\r\n    chainId: 43114,\r\n    blockExplorer: \"https://cchain.explorer.avax.network/\",\r\n    rpcUrl: `https://api.avax.network/ext/bc/C/rpc`,\r\n    gasPrice: 225000000000,\r\n  },\r\n  testnetHarmony: {\r\n    name: \"Harmony Testnet\",\r\n    color: \"#00b0ef\",\r\n    chainId: 1666700000,\r\n    blockExplorer: \"https://explorer.pops.one/\",\r\n    rpcUrl: `https://api.s0.b.hmny.io`,\r\n    gasPrice: 1000000000,\r\n  },\r\n  mainnetHarmony: {\r\n    name: \"Harmony Mainnet\",\r\n    color: \"#00b0ef\",\r\n    chainId: 1666600000,\r\n    blockExplorer: \"https://explorer.harmony.one/\",\r\n    rpcUrl: `https://api.harmony.one`,\r\n    gasPrice: 1000000000,\r\n  },\r\n};\r\n\r\nexport const NETWORK = chainId => {\r\n  for (const n in NETWORKS) {\r\n    if (NETWORKS[n].chainId === chainId) {\r\n      return NETWORKS[n];\r\n    }\r\n  }\r\n};\r\n"],"sourceRoot":""}