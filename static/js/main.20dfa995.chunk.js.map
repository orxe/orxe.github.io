{"version":3,"sources":["Orcs.ts","Home.tsx","App.tsx","reportWebVitals.ts","index.tsx","ids.ts"],"names":["ORCS_DATA_ACCOUNT_ID","anchor","PublicKey","process","awaitTransactionSignatureConfirmation","txid","timeout","connection","a","commitment","queryStatus","done","status","slot","confirmations","err","subId","Promise","resolve","reject","setTimeout","console","log","onSignature","result","context","e","error","getSignatureStatuses","signatureStatuses","value","sleep","_signatureSubscriptions","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","TOKEN_PROGRAM_ID","SYSVAR_RENT_PUBKEY","TransactionInstruction","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","data","Buffer","from","getOrcsState","anchorWallet","orcsId","provider","preflightCommitment","JSON","fetch","then","response","text","idl","parse","program","ORCS_PROGRAM","orcs","id","account","state","itemsAvailable","toNumber","itemsRedeemed","itemsRemaining","goLiveDate","Date","getMasterEdition","mint","findProgramAddress","TOKEN_METADATA_PROGRAM_ID","toBuffer","getMetadata","getTokenWallet","wallet","mintOneToken","treasury","Keypair","generate","publicKey","token","metadata","masterEdition","getMinimumBalanceForRentExemption","MintLayout","span","rent","getAccountInfo","configInfo","decoded","coder","accounts","decode","configKey","config","SYSVAR_CLOCK_PUBKEY","rpc","mintNft","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","clock","signers","instructions","createAccount","fromPubkey","newAccountPubkey","space","lamports","Token","createInitMintInstruction","createMintToInstruction","Error","shortenAddress","address","chars","slice","ms","ConnectButton","styled","WalletDialogButton","CounterText","MintContainer","div","MintButton","Button","renderCounter","days","hours","minutes","seconds","completed","Home","props","useState","balance","setBalance","isActive","setIsActive","isSoldOut","setIsSoldOut","isMinting","setIsMinting","setItemsRemaining","open","message","severity","undefined","alertState","setAlertState","startDate","setStartDate","useAnchorWallet","setOrcs","price","setPrice","onMint","mintTxId","txTimeout","msg","code","indexOf","getBalance","LAMPORTS_PER_SOL","useEffect","dataInfo","decodedOrcs","toBase58","toLocaleString","disabled","onClick","variant","CircularProgress","date","onMount","onComplete","renderer","Snackbar","autoHideDuration","onClose","Alert","network","Connection","startDateSeed","parseInt","theme","createTheme","palette","type","overrides","MuiButtonBase","root","justifyContent","MuiButton","textTransform","padding","startIcon","marginRight","endIcon","marginLeft","App","endpoint","useMemo","clusterApiUrl","wallets","getPhantomWallet","getSlopeWallet","getSolflareWallet","getSolletWallet","getSolletExtensionWallet","ThemeProvider","autoConnect","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.20dfa995.chunk.js","sourcesContent":["import * as anchor from \"@project-serum/anchor\";\n\nimport {MintLayout, Token, TOKEN_PROGRAM_ID,} from \"@solana/spl-token\";\nimport {SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID, TOKEN_METADATA_PROGRAM_ID, ORCS_PROGRAM} from \"./ids\";\n\nexport const ORCS_DATA_ACCOUNT_ID = new anchor.web3.PublicKey(\n    process.env.REACT_APP_ORCS_DATA_ACCOUNT_ID!\n);\n\nexport interface Orcs {\n    id: anchor.web3.PublicKey,\n    connection: anchor.web3.Connection;\n    program: anchor.Program;\n}\n\ninterface OrcsState {\n    orcs: Orcs;\n    itemsAvailable: number;\n    itemsRedeemed: number;\n    itemsRemaining: number;\n    goLiveDate: Date,\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n    txid: anchor.web3.TransactionSignature,\n    timeout: number,\n    connection: anchor.web3.Connection,\n    commitment: anchor.web3.Commitment = \"recent\",\n    queryStatus = false\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n    let done = false;\n    let status: anchor.web3.SignatureStatus | null | void = {\n        slot: 0,\n        confirmations: 0,\n        err: null,\n    };\n    let subId = 0;\n    status = await new Promise(async (resolve, reject) => {\n        setTimeout(() => {\n            if (done) {\n                return;\n            }\n            done = true;\n            console.log(\"Rejecting for timeout...\");\n            reject({timeout: true});\n        }, timeout);\n        try {\n            subId = connection.onSignature(\n                txid,\n                (result: any, context: any) => {\n                    done = true;\n                    status = {\n                        err: result.err,\n                        slot: context.slot,\n                        confirmations: 0,\n                    };\n                    if (result.err) {\n                        console.log(\"Rejected via websocket\", result.err);\n                        reject(status);\n                    } else {\n                        console.log(\"Resolved via websocket\", result);\n                        resolve(status);\n                    }\n                },\n                commitment\n            );\n        } catch (e) {\n            done = true;\n            console.error(\"WS error in setup\", txid, e);\n        }\n        while (!done && queryStatus) {\n            // eslint-disable-next-line no-loop-func\n            (async () => {\n                try {\n                    const signatureStatuses = await connection.getSignatureStatuses([\n                        txid,\n                    ]);\n                    status = signatureStatuses && signatureStatuses.value[0];\n                    if (!done) {\n                        if (!status) {\n                            console.log(\"REST null result for\", txid, status);\n                        } else if (status.err) {\n                            console.log(\"REST error for\", txid, status);\n                            done = true;\n                            reject(status.err);\n                        } else if (!status.confirmations) {\n                            console.log(\"REST no confirmations for\", txid, status);\n                        } else {\n                            console.log(\"REST confirmation for\", txid, status);\n                            done = true;\n                            resolve(status);\n                        }\n                    }\n                } catch (e) {\n                    if (!done) {\n                        console.log(\"REST connection error: txid\", txid, e);\n                    }\n                }\n            })();\n            await sleep(2000);\n        }\n    });\n\n    //@ts-ignore\n    if (connection._signatureSubscriptions[subId]) {\n        await connection.removeSignatureListener(subId);\n    }\n    done = true;\n    console.log(\"Returning status\", status);\n    return status;\n}\n\nconst createAssociatedTokenAccountInstruction = (\n    associatedTokenAddress: anchor.web3.PublicKey,\n    payer: anchor.web3.PublicKey,\n    walletAddress: anchor.web3.PublicKey,\n    splTokenMintAddress: anchor.web3.PublicKey\n) => {\n    const keys = [\n        {pubkey: payer, isSigner: true, isWritable: true},\n        {pubkey: associatedTokenAddress, isSigner: false, isWritable: true},\n        {pubkey: walletAddress, isSigner: false, isWritable: false},\n        {pubkey: splTokenMintAddress, isSigner: false, isWritable: false},\n        {\n            pubkey: anchor.web3.SystemProgram.programId,\n            isSigner: false,\n            isWritable: false,\n        },\n        {pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false},\n        {\n            pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n            isSigner: false,\n            isWritable: false,\n        },\n    ];\n    return new anchor.web3.TransactionInstruction({\n        keys,\n        programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n        data: Buffer.from([]),\n    });\n}\n\nexport const getOrcsState = async (\n    anchorWallet: anchor.Wallet,\n    orcsId: anchor.web3.PublicKey,\n    connection: anchor.web3.Connection,\n): Promise<OrcsState> => {\n    const provider = new anchor.Provider(connection, anchorWallet, {\n        preflightCommitment: \"recent\",\n    });\n\n    const idl = JSON.parse(await fetch('idl/orcs.json').then(response => response.text()));\n    const program = new anchor.Program(idl, ORCS_PROGRAM, provider);\n    const orcs = {\n        id: orcsId,\n        connection: connection,\n        program: program,\n    }\n\n    const state: any = await program.account.orcs.fetch(ORCS_DATA_ACCOUNT_ID);\n    const itemsAvailable = state.data.itemsAvailable.toNumber();\n    const itemsRedeemed = state.itemsRedeemed.toNumber();\n    const itemsRemaining = itemsAvailable - itemsRedeemed;\n\n    let goLiveDate = state.data.goLiveDate.toNumber();\n    goLiveDate = new Date(goLiveDate * 1000);\n\n    return {\n        orcs: orcs,\n        itemsAvailable: itemsAvailable,\n        itemsRedeemed: itemsRedeemed,\n        itemsRemaining: itemsRemaining,\n        goLiveDate: goLiveDate,\n    };\n}\n\nconst getMasterEdition = async (\n    mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n    return (\n        await anchor.web3.PublicKey.findProgramAddress(\n            [\n                Buffer.from(\"metadata\"),\n                TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n                mint.toBuffer(),\n                Buffer.from(\"edition\"),\n            ],\n            TOKEN_METADATA_PROGRAM_ID\n        )\n    )[0];\n};\n\nconst getMetadata = async (\n    mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n    return (\n        await anchor.web3.PublicKey.findProgramAddress(\n            [\n                Buffer.from(\"metadata\"),\n                TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n                mint.toBuffer(),\n            ],\n            TOKEN_METADATA_PROGRAM_ID\n        )\n    )[0];\n};\n\nconst getTokenWallet = async (\n    wallet: anchor.web3.PublicKey,\n    mint: anchor.web3.PublicKey\n) => {\n    return (\n        await anchor.web3.PublicKey.findProgramAddress(\n            [wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n            SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n        )\n    )[0];\n};\n\n\nexport const mintOneToken = async (\n    orcs: Orcs,\n    payer: anchor.web3.PublicKey,\n    treasury: anchor.web3.PublicKey,\n): Promise<string> => {\n    const mint = anchor.web3.Keypair.generate();\n    const token = await getTokenWallet(payer, mint.publicKey);\n    const connection = orcs.connection;\n    const program = orcs.program;\n    const metadata = await getMetadata(mint.publicKey);\n    const masterEdition = await getMasterEdition(mint.publicKey);\n\n    const rent = await connection.getMinimumBalanceForRentExemption(\n        MintLayout.span\n    );\n\n    const configInfo = await connection.getAccountInfo(new anchor.web3.PublicKey(orcs.id));\n    if (configInfo) {\n        const decoded = program.coder.accounts.decode(\"Orcs\", configInfo.data);\n        const configKey = new anchor.web3.PublicKey(decoded.config);\n\n        console.log(`PROGRAM ${program}`)\n        console.log(`about to mint nft w/ config ${configKey}`)\n        console.log(`about to mint nft w/ orcs ${orcs.id}`)\n        console.log(`about to mint nft w/ payer ${payer}`)\n        console.log(`about to mint nft w/ wallet ${treasury}`)\n        console.log(`about to mint nft w/ metadata ${metadata}`)\n        console.log(`about to mint nft w/ mint ${mint.publicKey}`)\n        console.log(`about to mint nft w/ mintAuthority ${payer}`)\n        console.log(`about to mint nft w/ updateAuthority ${payer}`)\n        console.log(`about to mint nft w/ masterEdition ${masterEdition}`)\n        console.log(`about to mint nft w/ tokenMetadataProgram ${TOKEN_METADATA_PROGRAM_ID}`)\n        console.log(`about to mint nft w/ tokenProgram ${TOKEN_PROGRAM_ID}`)\n        console.log(`about to mint nft w/ systemProgram ${anchor.web3.SystemProgram.programId}`)\n        console.log(`about to mint nft w/ rent ${anchor.web3.SYSVAR_RENT_PUBKEY}`)\n        console.log(`about to mint nft w/ clock ${anchor.web3.SYSVAR_CLOCK_PUBKEY}`)\n\n        return await program.rpc.mintNft({\n            accounts: {\n                config: configKey,\n                orcs: orcs.id,\n                payer: payer,\n                wallet: treasury,\n                metadata: metadata,\n                mint: mint.publicKey,\n                mintAuthority: payer,\n                updateAuthority: payer,\n                masterEdition: masterEdition,\n                tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n                tokenProgram: TOKEN_PROGRAM_ID,\n                systemProgram: anchor.web3.SystemProgram.programId,\n                rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n                clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n            },\n            signers: [mint],\n            instructions: [\n                anchor.web3.SystemProgram.createAccount({\n                    fromPubkey: payer,\n                    newAccountPubkey: mint.publicKey,\n                    space: MintLayout.span,\n                    lamports: rent,\n                    programId: TOKEN_PROGRAM_ID,\n                }),\n                Token.createInitMintInstruction(\n                    TOKEN_PROGRAM_ID,\n                    mint.publicKey,\n                    0,\n                    payer,\n                    payer\n                ),\n                createAssociatedTokenAccountInstruction(\n                    token,\n                    payer,\n                    payer,\n                    mint.publicKey\n                ),\n                Token.createMintToInstruction(\n                    TOKEN_PROGRAM_ID,\n                    mint.publicKey,\n                    token,\n                    payer,\n                    [],\n                    1\n                ),\n            ],\n        });\n    } else {\n        throw new Error(\"Could not get account info for orcs program id.\")\n    }\n\n\n}\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n    return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\n","import {useEffect, useState} from \"react\";\nimport styled from \"styled-components\";\nimport Countdown from \"react-countdown\";\nimport {Button, CircularProgress, Snackbar} from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport * as anchor from \"@project-serum/anchor\";\n\nimport {LAMPORTS_PER_SOL} from \"@solana/web3.js\";\n\nimport {useAnchorWallet} from \"@solana/wallet-adapter-react\";\nimport {WalletDialogButton} from \"@solana/wallet-adapter-material-ui\";\n\nimport {\n    Orcs,\n    awaitTransactionSignatureConfirmation,\n    getOrcsState,\n    mintOneToken,\n    shortenAddress, ORCS_DATA_ACCOUNT_ID,\n} from \"./Orcs\";\n\nconst ConnectButton = styled(WalletDialogButton)``;\n\nconst CounterText = styled.span``; // add your styles here\n\nconst MintContainer = styled.div``; // add your styles here\n\nconst MintButton = styled(Button)``; // add your styles here\n\nexport interface HomeProps {\n    orcsId: anchor.web3.PublicKey;\n    connection: anchor.web3.Connection;\n    startDate: number;\n    treasury: anchor.web3.PublicKey;\n    txTimeout: number;\n}\n\nconst Home = (props: HomeProps) => {\n    const [balance, setBalance] = useState<number>();\n    const [isActive, setIsActive] = useState(false); // true when countdown completes\n    const [isSoldOut, setIsSoldOut] = useState(false); // true when items remaining is zero\n    const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\n    const [itemsRemaining, setItemsRemaining] = useState<number>(0);\n\n    const [alertState, setAlertState] = useState<AlertState>({\n        open: false,\n        message: \"\",\n        severity: undefined,\n    });\n\n    const [startDate, setStartDate] = useState(new Date(props.startDate));\n\n    const wallet = useAnchorWallet();\n    const [orcs, setOrcs] = useState<Orcs>();\n    const [price, setPrice] = useState<number>();\n\n    const onMint = async () => {\n        try {\n            setIsMinting(true);\n            if (wallet && orcs?.program) {\n                console.log(`About to mint one token!`);\n                const mintTxId = await mintOneToken(\n                    orcs,\n                    wallet.publicKey,\n                    props.treasury\n                );\n                console.log(`got mint tx id ${mintTxId}`);\n\n                const status = await awaitTransactionSignatureConfirmation(\n                    mintTxId,\n                    props.txTimeout,\n                    props.connection,\n                    \"singleGossip\",\n                    false\n                );\n\n                if (!status?.err) {\n                    setAlertState({\n                        open: true,\n                        message: \"Congratulations! Mint succeeded!\",\n                        severity: \"success\",\n                    });\n                } else {\n                    setAlertState({\n                        open: true,\n                        message: \"Mint failed! Please try again!\",\n                        severity: \"error\",\n                    });\n                }\n            }\n        } catch (error: any) {\n            // TODO: blech:\n            console.log(error);\n            let message = error.msg || \"Minting failed! Please try again!\";\n            if (!error.msg) {\n                if (error.message.indexOf(\"0x138\")) {\n                } else if (error.message.indexOf(\"0x137\")) {\n                    message = `SOLD OUT!`;\n                } else if (error.message.indexOf(\"0x135\")) {\n                    message = `Insufficient funds to mint. Please fund your wallet.`;\n                }\n            } else {\n                if (error.code === 311) {\n                    message = `SOLD OUT!`;\n                    setIsSoldOut(true);\n                } else if (error.code === 312) {\n                    message = `Minting period hasn't started yet.`;\n                }\n            }\n\n            setAlertState({\n                open: true,\n                message,\n                severity: \"error\",\n            });\n        } finally {\n            if (wallet) {\n                const balance = await props.connection.getBalance(wallet.publicKey);\n                setBalance(balance / LAMPORTS_PER_SOL);\n            }\n            setIsMinting(false);\n        }\n    };\n\n    useEffect(() => {\n        (async () => {\n            if (wallet) {\n                const balance = await props.connection.getBalance(wallet.publicKey);\n                setBalance(balance / LAMPORTS_PER_SOL);\n            }\n        })();\n    }, [wallet, props.connection]);\n\n    useEffect(() => {\n        (async () => {\n            if (!wallet) return;\n\n            const state =\n                await getOrcsState(\n                    wallet as anchor.Wallet,\n                    props.orcsId,\n                    props.connection\n                );\n\n            setIsSoldOut(state.itemsRemaining === 0);\n            setStartDate(state.goLiveDate);\n            setOrcs(state.orcs);\n            setItemsRemaining(state.itemsRemaining);\n\n            const dataInfo = await state.orcs.connection.getAccountInfo(ORCS_DATA_ACCOUNT_ID);\n            if(dataInfo) {\n                const decodedOrcs = state.orcs.program.coder.accounts.decode(\"Orcs\", dataInfo.data);\n                setPrice(decodedOrcs.data.price / LAMPORTS_PER_SOL);\n                console.log(`Got go live date ${state.goLiveDate}`);\n                console.log(`Got state program ${state.orcs.program.programId.toBase58()}`);\n                console.log(`Got state id ${state.orcs.id.toBase58()}`);\n                console.log(`Got state connection ${state.orcs.connection}`);\n            }\n\n        })();\n    }, [wallet, props.orcsId, props.connection]);\n\n    return (\n        <main>\n            {wallet && (\n                <p>Address: {shortenAddress(wallet.publicKey.toBase58() || \"\")}</p>\n            )}\n\n            {wallet && (\n                <p>Balance: {(balance || 0).toLocaleString()} SOL</p>\n            )}\n\n            <MintContainer>\n                {!wallet ? (\n                    <ConnectButton>Connect Wallet</ConnectButton>\n                ) : (\n                    <MintButton\n                        disabled={isSoldOut || isMinting || !isActive}\n                        onClick={onMint}\n                        variant=\"contained\"\n                    >\n                        {isSoldOut ? (\n                            \"SOLD OUT\"\n                        ) : isActive ? (\n                            isMinting ? (\n                                <CircularProgress/>\n                            ) : (\n                                `MINT for ${price} SOL (${itemsRemaining} remaining)`\n                            )\n                        ) : (\n                            <Countdown\n                                date={startDate}\n                                onMount={({completed}) => completed && setIsActive(true)}\n                                onComplete={() => setIsActive(true)}\n                                renderer={renderCounter}\n                            />\n                        )}\n                    </MintButton>\n                )}\n            </MintContainer>\n\n            <Snackbar\n                open={alertState.open}\n                autoHideDuration={6000}\n                onClose={() => setAlertState({...alertState, open: false})}\n            >\n                <Alert\n                    onClose={() => setAlertState({...alertState, open: false})}\n                    severity={alertState.severity}\n                >\n                    {alertState.message}\n                </Alert>\n            </Snackbar>\n        </main>\n    );\n};\n\ninterface AlertState {\n    open: boolean;\n    message: string;\n    severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\n}\n\nconst renderCounter = ({days, hours, minutes, seconds, completed}: any) => {\n    return (\n        <CounterText>\n            {hours} hours, {minutes} minutes, {seconds} seconds\n        </CounterText>\n    );\n};\n\nexport default Home;\n","import \"./App.css\";\nimport {useMemo} from \"react\";\n\nimport Home from \"./Home\";\n\nimport * as anchor from \"@project-serum/anchor\";\nimport {clusterApiUrl} from \"@solana/web3.js\";\nimport {WalletAdapterNetwork} from \"@solana/wallet-adapter-base\";\nimport {\n    getPhantomWallet,\n    getSlopeWallet,\n    getSolflareWallet,\n    getSolletWallet,\n    getSolletExtensionWallet,\n} from \"@solana/wallet-adapter-wallets\";\n\nimport {\n    ConnectionProvider,\n    WalletProvider,\n} from \"@solana/wallet-adapter-react\";\n\nimport {WalletDialogProvider} from \"@solana/wallet-adapter-material-ui\";\nimport {createTheme, ThemeProvider} from \"@material-ui/core\";\n\nimport React, { useState, useEffect } from 'react';\n\nconst treasury = new anchor.web3.PublicKey(\n    process.env.REACT_APP_TREASURY_ADDRESS!\n);\n\nconst orcsId = new anchor.web3.PublicKey(\n    process.env.REACT_APP_ORCS_DATA_ACCOUNT_ID!\n);\n\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\n\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\nconst connection = new anchor.web3.Connection(rpcHost);\n\nconst startDateSeed = parseInt(process.env.REACT_APP_ORCS_START_DATE!, 10);\n\nconst txTimeout = 30000; // milliseconds (confirm this works for your project)\n\nconst theme = createTheme({\n    palette: {\n        type: 'dark',\n    },\n    overrides: {\n        MuiButtonBase: {\n            root: {\n                justifyContent: 'flex-start',\n            },\n        },\n        MuiButton: {\n            root: {\n                textTransform: undefined,\n                padding: '12px 16px',\n            },\n            startIcon: {\n                marginRight: 8,\n            },\n            endIcon: {\n                marginLeft: 8,\n            },\n        },\n    },\n});\n\nconst App = () => {\n    const endpoint = useMemo(() => clusterApiUrl(network), []);\n\n    const wallets = useMemo(\n        () => [\n            getPhantomWallet(),\n            getSlopeWallet(),\n            getSolflareWallet(),\n            getSolletWallet({network}),\n            getSolletExtensionWallet({network})\n        ],\n        []\n    );\n\n    return (\n        <ThemeProvider theme={theme}>\n            <ConnectionProvider endpoint={endpoint}>\n                <WalletProvider wallets={wallets} autoConnect>\n                    <WalletDialogProvider>\n                        <Home\n                            orcsId={orcsId}\n                            connection={connection}\n                            startDate={startDateSeed}\n                            treasury={treasury}\n                            txTimeout={txTimeout}\n                        />\n                    </WalletDialogProvider>\n                </WalletProvider>\n            </ConnectionProvider>\n        </ThemeProvider>\n    );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import * as anchor from \"@project-serum/anchor\";\n\nexport const ORCS_PROGRAM = new anchor.web3.PublicKey(\n    \"EL5ZhvWPNAbbNACmvEpHSdRJ1NqiPt6E7taBrtEcKgaG\"\n);\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new anchor.web3.PublicKey(\n    \"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"\n);\n\nexport const TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n    \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n);"],"sourceRoot":""}