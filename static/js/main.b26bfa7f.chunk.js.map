{"version":3,"sources":["Orcs.ts","Home.tsx","App.tsx","reportWebVitals.ts","index.tsx","ids.ts"],"names":["ORCS_DATA_ACCOUNT_ID","anchor","PublicKey","process","awaitTransactionSignatureConfirmation","txid","timeout","connection","a","commitment","queryStatus","done","status","slot","confirmations","err","subId","Promise","resolve","reject","setTimeout","console","log","onSignature","result","context","e","error","getSignatureStatuses","signatureStatuses","value","sleep","_signatureSubscriptions","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","TOKEN_PROGRAM_ID","SYSVAR_RENT_PUBKEY","TransactionInstruction","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","data","Buffer","from","getOrcsState","anchorWallet","orcsId","provider","preflightCommitment","JSON","fetch","then","response","text","idl","parse","program","ORCS_PROGRAM","orcs","id","account","state","itemsAvailable","toNumber","itemsRedeemed","configKey","config","dataUUID","uuid","itemsRemaining","goLiveDate","Date","whitelistGoLiveDate","teamWhitelistGoLiveDate","getMasterEdition","mint","findProgramAddress","TOKEN_METADATA_PROGRAM_ID","toBuffer","getMetadata","getWhitelistedUserPDA","user","getTokenWallet","wallet","mintOneToken","orcsState","treasury","whitelistedPDA","Keypair","generate","publicKey","token","metadata","masterEdition","getMinimumBalanceForRentExemption","MintLayout","span","rent","getAccountInfo","configInfo","decoded","coder","accounts","decode","instructions","createAccount","fromPubkey","newAccountPubkey","space","lamports","Token","createInitMintInstruction","createMintToInstruction","pdaKey","nRedeemed","nRedeemable","Error","rpc","mintNftWhitelisted","whitelistedUser","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","clock","SYSVAR_CLOCK_PUBKEY","signers","mintNft","ms","ConnectButton","styled","WalletDialogButton","CounterText","MintContainer","div","MintButton","Button","ButtonControl","props","isMinting","whitelistNRedeemed","isActive","buttonStartDate","toLocaleString","onMint","bind","fullUpdate","success","this","setState","_","mintTxId","txTimeout","setAlertState","open","message","severity","msg","code","indexOf","prevState","oldState","content","isTeamMember","CircularProgress","titlePrefix","length","price","date","onMount","completed","onComplete","renderer","renderCounter","soldOut","disabled","onClick","variant","React","Component","days","hours","minutes","seconds","Home","info","buttons","whitelistedButton","teamMemberButton","useState","balance","setBalance","decodedOrcs","setDecodedOrcs","useAnchorWallet","setOrcs","whitelistResult","setWhitelistResult","undefined","alertState","useEffect","getBalance","LAMPORTS_PER_SOL","whitelistPDA","whitelistPDAInfo","dataInfo","whitelistPdaUser","whitelistFetchResult","toBase58","whitelistedPrice","color","Snackbar","autoHideDuration","onClose","Alert","network","Connection","theme","parseInt","REACT_APP_ORCS_START_DATE","createTheme","palette","type","overrides","MuiButtonBase","root","justifyContent","MuiButton","textTransform","padding","startIcon","marginRight","endIcon","marginLeft","App","endpoint","useMemo","clusterApiUrl","wallets","getPhantomWallet","getSlopeWallet","getSolflareWallet","getSolletWallet","getSolletExtensionWallet","ThemeProvider","autoConnect","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b26bfa7f.chunk.js","sourcesContent":["import * as anchor from \"@project-serum/anchor\";\nimport {MintLayout, Token, TOKEN_PROGRAM_ID,} from \"@solana/spl-token\";\nimport {\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    TOKEN_METADATA_PROGRAM_ID,\n    ORCS_PROGRAM,\n} from \"./ids\";\nimport {PublicKey} from \"@solana/web3.js\";\n\nexport const ORCS_DATA_ACCOUNT_ID = new anchor.web3.PublicKey(\n    process.env.REACT_APP_ORCS_DATA_ACCOUNT_ID!\n);\n\nexport interface Orcs {\n    id: anchor.web3.PublicKey,\n    connection: anchor.web3.Connection;\n    program: anchor.Program;\n}\n\nexport interface OrcsState {\n    orcs: Orcs;\n    itemsAvailable: number;\n    itemsRedeemed: number;\n    itemsRemaining: number;\n    goLiveDate: Date,\n    whitelistGoLiveDate: Date,\n    teamWhitelistGoLiveDate: Date,\n    config: PublicKey,\n    uuid: string\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n    txid: anchor.web3.TransactionSignature,\n    timeout: number,\n    connection: anchor.web3.Connection,\n    commitment: anchor.web3.Commitment = \"recent\",\n    queryStatus = false\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n    let done = false;\n    let status: anchor.web3.SignatureStatus | null | void = {\n        slot: 0,\n        confirmations: 0,\n        err: null,\n    };\n    let subId = 0;\n    status = await new Promise(async (resolve, reject) => {\n        setTimeout(() => {\n            if (done) {\n                return;\n            }\n            done = true;\n            console.log(\"Rejecting for timeout...\");\n            reject({timeout: true});\n        }, timeout);\n        try {\n            subId = connection.onSignature(\n                txid,\n                (result: any, context: any) => {\n                    done = true;\n                    status = {\n                        err: result.err,\n                        slot: context.slot,\n                        confirmations: 0,\n                    };\n                    if (result.err) {\n                        console.log(\"Rejected via websocket\", result.err);\n                        reject(status);\n                    } else {\n                        console.log(\"Resolved via websocket\", result);\n                        resolve(status);\n                    }\n                },\n                commitment\n            );\n        } catch (e) {\n            done = true;\n            console.error(\"WS error in setup\", txid, e);\n        }\n        while (!done && queryStatus) {\n            // eslint-disable-next-line no-loop-func\n            (async () => {\n                try {\n                    const signatureStatuses = await connection.getSignatureStatuses([\n                        txid,\n                    ]);\n                    status = signatureStatuses && signatureStatuses.value[0];\n                    if (!done) {\n                        if (!status) {\n                            console.log(\"REST null result for\", txid, status);\n                        } else if (status.err) {\n                            console.log(\"REST error for\", txid, status);\n                            done = true;\n                            reject(status.err);\n                        } else if (!status.confirmations) {\n                            console.log(\"REST no confirmations for\", txid, status);\n                        } else {\n                            console.log(\"REST confirmation for\", txid, status);\n                            done = true;\n                            resolve(status);\n                        }\n                    }\n                } catch (e) {\n                    if (!done) {\n                        console.log(\"REST connection error: txid\", txid, e);\n                    }\n                }\n            })();\n            await sleep(2000);\n        }\n    });\n\n    //@ts-ignore\n    if (connection._signatureSubscriptions[subId]) {\n        await connection.removeSignatureListener(subId);\n    }\n    done = true;\n    console.log(\"Returning status\", status);\n    return status;\n}\n\nconst createAssociatedTokenAccountInstruction = (\n    associatedTokenAddress: anchor.web3.PublicKey,\n    payer: anchor.web3.PublicKey,\n    walletAddress: anchor.web3.PublicKey,\n    splTokenMintAddress: anchor.web3.PublicKey\n) => {\n    const keys = [\n        {pubkey: payer, isSigner: true, isWritable: true},\n        {pubkey: associatedTokenAddress, isSigner: false, isWritable: true},\n        {pubkey: walletAddress, isSigner: false, isWritable: false},\n        {pubkey: splTokenMintAddress, isSigner: false, isWritable: false},\n        {\n            pubkey: anchor.web3.SystemProgram.programId,\n            isSigner: false,\n            isWritable: false,\n        },\n        {pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false},\n        {\n            pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n            isSigner: false,\n            isWritable: false,\n        },\n    ];\n    return new anchor.web3.TransactionInstruction({\n        keys,\n        programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n        data: Buffer.from([]),\n    });\n}\n\nexport const getOrcsState = async (\n    anchorWallet: anchor.Wallet,\n    orcsId: anchor.web3.PublicKey,\n    connection: anchor.web3.Connection,\n): Promise<OrcsState> => {\n    const provider = new anchor.Provider(connection, anchorWallet, {\n        preflightCommitment: \"recent\",\n    });\n\n    const idl = JSON.parse(await fetch('idl/orcs.json').then(response => response.text()));\n    const program = new anchor.Program(idl, ORCS_PROGRAM, provider);\n    const orcs = {\n        id: orcsId,\n        connection: connection,\n        program: program,\n    }\n\n    const state: any = await program.account.orcs.fetch(ORCS_DATA_ACCOUNT_ID);\n    const itemsAvailable = state.data.itemsAvailable.toNumber();\n    const itemsRedeemed = state.itemsRedeemed.toNumber();\n    const configKey: PublicKey = state.config;\n    const dataUUID: string = state.data.uuid;\n    const itemsRemaining = itemsAvailable - itemsRedeemed;\n\n    let goLiveDate = state.data.goLiveDate.toNumber();\n    goLiveDate = new Date(goLiveDate * 1000);\n\n    const whitelistGoLiveDate = new Date(state.data.whitelistGoLiveDate.toNumber() * 1000);\n    const teamWhitelistGoLiveDate = new Date(state.data.teamWhitelistGoLiveDate.toNumber() * 1000);\n\n    return {\n        orcs: orcs,\n        itemsAvailable: itemsAvailable,\n        itemsRedeemed: itemsRedeemed,\n        itemsRemaining: itemsRemaining,\n        goLiveDate: goLiveDate,\n        whitelistGoLiveDate: whitelistGoLiveDate,\n        teamWhitelistGoLiveDate: teamWhitelistGoLiveDate,\n        config: configKey,\n        uuid: dataUUID\n    };\n}\n\nconst getMasterEdition = async (\n    mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n    return (\n        await anchor.web3.PublicKey.findProgramAddress(\n            [\n                Buffer.from(\"metadata\"),\n                TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n                mint.toBuffer(),\n                Buffer.from(\"edition\"),\n            ],\n            TOKEN_METADATA_PROGRAM_ID\n        )\n    )[0];\n};\n\nconst getMetadata = async (\n    mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n    return (\n        await anchor.web3.PublicKey.findProgramAddress(\n            [\n                Buffer.from(\"metadata\"),\n                TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n                mint.toBuffer(),\n            ],\n            TOKEN_METADATA_PROGRAM_ID\n        )\n    )[0];\n};\n\nexport const getWhitelistedUserPDA = async (user: anchor.web3.PublicKey, state: any) => {\n    return await PublicKey.findProgramAddress(\n        [Buffer.from(\"orcs\"), state.config.toBuffer(), Buffer.from(state.uuid), user.toBuffer()],\n        ORCS_PROGRAM,\n    );\n}\n\nconst getTokenWallet = async (\n    wallet: anchor.web3.PublicKey,\n    mint: anchor.web3.PublicKey\n) => {\n    return (\n        await anchor.web3.PublicKey.findProgramAddress(\n            [wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n            SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n        )\n    )[0];\n};\n\nexport function uuidFromPubkey(configAccount: anchor.web3.PublicKey) {\n    return configAccount.toBase58().slice(0, 6);\n}\n\nexport const mintOneToken = async (\n    orcsState: OrcsState,\n    payer: anchor.web3.PublicKey,\n    treasury: anchor.web3.PublicKey,\n    whitelistedPDA: any\n): Promise<string> => {\n    const orcs = orcsState.orcs;\n    const mint = anchor.web3.Keypair.generate();\n    const token = await getTokenWallet(payer, mint.publicKey);\n    const connection = orcs.connection;\n    const program = orcs.program;\n    const metadata = await getMetadata(mint.publicKey);\n    const masterEdition = await getMasterEdition(mint.publicKey);\n\n    const rent = await connection.getMinimumBalanceForRentExemption(\n        MintLayout.span\n    );\n\n    const configInfo = await connection.getAccountInfo(new anchor.web3.PublicKey(orcs.id));\n    if (configInfo) {\n        const decoded = program.coder.accounts.decode(\"Orcs\", configInfo.data);\n        const configKey = new anchor.web3.PublicKey(decoded.config);\n\n        /*console.log(`PROGRAM ${program}`)\n        console.log(`about to mint nft w/ config ${configKey}`)\n        console.log(`about to mint nft w/ orcs ${orcs.id}`)\n        console.log(`about to mint nft w/ payer ${payer}`)\n        console.log(`about to mint nft w/ wallet ${treasury}`)\n        console.log(`about to mint nft w/ metadata ${metadata}`)\n        console.log(`about to mint nft w/ mint ${mint.publicKey}`)\n        console.log(`about to mint nft w/ mintAuthority ${payer}`)\n        console.log(`about to mint nft w/ updateAuthority ${payer}`)\n        console.log(`about to mint nft w/ masterEdition ${masterEdition}`)\n        console.log(`about to mint nft w/ tokenMetadataProgram ${TOKEN_METADATA_PROGRAM_ID}`)\n        console.log(`about to mint nft w/ tokenProgram ${TOKEN_PROGRAM_ID}`)\n        console.log(`about to mint nft w/ systemProgram ${anchor.web3.SystemProgram.programId}`)\n        console.log(`about to mint nft w/ rent ${anchor.web3.SYSVAR_RENT_PUBKEY}`)\n        console.log(`about to mint nft w/ clock ${anchor.web3.SYSVAR_CLOCK_PUBKEY}`)\n\n        console.log(\"Got state:\", orcsState);*/\n        // const whitelistPDA = (await getWhitelistedUserPDA(payer, orcsState))[0];\n        // console.log(\"Got whitelistPDA\", whitelistPDA.toBase58());\n        // const userPDAInfo = await orcs.connection.getAccountInfo(whitelistPDA);\n\n        const instructions = [\n            anchor.web3.SystemProgram.createAccount({\n                fromPubkey: payer,\n                newAccountPubkey: mint.publicKey,\n                space: MintLayout.span,\n                lamports: rent,\n                programId: TOKEN_PROGRAM_ID,\n            }),\n            Token.createInitMintInstruction(TOKEN_PROGRAM_ID, mint.publicKey, 0, payer, payer),\n            createAssociatedTokenAccountInstruction(token, payer, payer, mint.publicKey),\n            Token.createMintToInstruction(TOKEN_PROGRAM_ID, mint.publicKey, token, payer, [], 1),\n        ]\n\n        /*if (whitelistedPDA) {\n            console.log(\"Whitelist PDA got owner\");\n            console.log(\"n redeemed:\", whitelistedPDA.data.nRedeemed.toNumber());\n            console.log(\"n redeemable:\", whitelistedPDA.data.nRedeemable.toNumber());\n            console.log(\"whitelistedPubkey:\", whitelistedPDA.data.whitelistedPubkey.toBase58());\n            console.log(\"config\", whitelistedPDA.config.toBase58(), \"with UUID\", whitelistedPDA.data.uuid);\n        } else {\n            console.log(\"Whitelist PDA account info was null\");\n        }*/\n        if (whitelistedPDA) {\n            const pdaKey = (await getWhitelistedUserPDA(payer, orcsState))[0];\n            if(!(whitelistedPDA.data.nRedeemed.toNumber() < whitelistedPDA.data.nRedeemable.toNumber())) {\n                throw new Error(\"Out of whitelist mints.\")\n            }\n            console.log(\"About to run mint nft whitelisted\");\n            return await program.rpc.mintNftWhitelisted({\n                accounts: {\n                    config: configKey,\n                    orcs: orcs.id,\n                    whitelistedUser: pdaKey,\n                    payer: payer,\n                    wallet: treasury,\n                    metadata: metadata,\n                    mint: mint.publicKey,\n                    mintAuthority: payer,\n                    updateAuthority: payer,\n                    masterEdition: masterEdition,\n                    tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n                    tokenProgram: TOKEN_PROGRAM_ID,\n                    systemProgram: anchor.web3.SystemProgram.programId,\n                    rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n                    clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n                },\n                signers: [mint],\n                instructions: instructions\n            });\n        } else {\n            console.log(\"About to run normal mint nft\");\n            return await program.rpc.mintNft({\n                accounts: {\n                    config: configKey,\n                    orcs: orcs.id,\n                    payer: payer,\n                    wallet: treasury,\n                    metadata: metadata,\n                    mint: mint.publicKey,\n                    mintAuthority: payer,\n                    updateAuthority: payer,\n                    masterEdition: masterEdition,\n                    tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n                    tokenProgram: TOKEN_PROGRAM_ID,\n                    systemProgram: anchor.web3.SystemProgram.programId,\n                    rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n                    clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n                },\n                signers: [mint],\n                instructions: instructions\n            });\n        }\n\n    } else {\n        throw new Error(\"Could not get account info for orcs program id.\")\n    }\n}\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n    return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\n","import React, {useEffect, useState} from \"react\";\nimport styled from \"styled-components\";\nimport Countdown from \"react-countdown\";\nimport {Button, CircularProgress, Snackbar} from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport * as anchor from \"@project-serum/anchor\";\n\nimport {LAMPORTS_PER_SOL} from \"@solana/web3.js\";\n\nimport {AnchorWallet, useAnchorWallet} from \"@solana/wallet-adapter-react\";\nimport {WalletDialogButton} from \"@solana/wallet-adapter-material-ui\";\n\nimport {\n    Orcs, OrcsState,\n    awaitTransactionSignatureConfirmation,\n    getOrcsState,\n    mintOneToken,\n    shortenAddress, ORCS_DATA_ACCOUNT_ID, getWhitelistedUserPDA,\n} from \"./Orcs\";\n\nconst ConnectButton = styled(WalletDialogButton)``;\n\nconst CounterText = styled.span``; // add your styles here\n\nconst MintContainer = styled.div``; // add your styles here\n\nconst MintButton = styled(Button)``; // add your styles here\n\nexport interface HomeProps {\n    orcsId: anchor.web3.PublicKey;\n    connection: anchor.web3.Connection;\n    treasury: anchor.web3.PublicKey;\n    txTimeout: number;\n}\n\ntype ButtonState = {\n    isMinting: boolean,\n    itemsRemaining: number,\n    whitelistNRedeemed: number,\n    isActive: boolean,\n}\n\ninterface ButtonProps extends HomeProps {\n    price: number,\n    balance: number,\n    titlePrefix: string,\n    buttonStartDate: Date,\n    setAlertState:  (value: (((prevState: AlertState) => AlertState) | AlertState)) => void,\n    wallet: AnchorWallet,\n    orcsState: OrcsState,\n    decodedOrcs: any,\n    whitelistedPDA: any\n}\n\nclass ButtonControl extends React.Component<ButtonProps, ButtonState> {\n\n    constructor(props: ButtonProps) {\n        super(props);\n        this.state = {\n            isMinting: false,\n            itemsRemaining: this.props.orcsState.itemsRemaining,\n            whitelistNRedeemed: this.props.whitelistedPDA ? this.props.whitelistedPDA.data.nRedeemed.toNumber() : -1,\n            isActive: this.props.buttonStartDate <= new Date()\n        };\n        console.log(`Dates: ${this.props.buttonStartDate.toLocaleString()} and ${(new Date()).toLocaleString()}`)\n        console.log(`Date is active: ${this.props.buttonStartDate <= new Date()}`)\n        this.onMint = this.onMint.bind(this);\n        this.fullUpdate = this.fullUpdate.bind(this);\n    }\n\n    async onMint() {\n        let success = false;\n        try {\n            this.setState(_ => ({isMinting: true}));\n            if (this.props.orcsState.orcs.program && this.props.orcsState.config) {\n                const state = this.props.orcsState;\n                console.log(`About to mint one token!`);\n                const mintTxId = await mintOneToken(\n                    state,\n                    this.props.wallet.publicKey,\n                    this.props.treasury,\n                    this.props.whitelistedPDA\n                );\n                console.log(`got mint tx id ${mintTxId}`);\n\n                const status = await awaitTransactionSignatureConfirmation(\n                    mintTxId,\n                    this.props.txTimeout,\n                    this.props.connection,\n                    \"singleGossip\",\n                    false\n                );\n\n                if (!status?.err) {\n                    this.props.setAlertState({\n                        open: true,\n                        message: \"Congratulations! Mint succeeded!\",\n                        severity: \"success\",\n                    });\n                    success = true;\n                } else {\n                    this.props.setAlertState({\n                        open: true,\n                        message: \"Mint failed! Please try again!\",\n                        severity: \"error\",\n                    });\n                }\n            }\n        } catch (error: any) {\n            // TODO: blech:\n            console.log(error);\n            let message = error.msg || \"Minting failed! Please try again!\";\n            if (!error.msg) {\n                if (error.message.indexOf(\"0x138\")) {\n                } else if (error.message.indexOf(\"0x137\")) {\n                    message = `SOLD OUT!`;\n                } else if (error.message.indexOf(\"0x135\")) {\n                    message = `Insufficient funds to mint. Please fund your wallet.`;\n                }\n            } else {\n                if (error.code === 311) {\n                    message = `SOLD OUT!`;\n                } else if (error.code === 312) {\n                    message = `Minting period hasn't started yet.`;\n                }\n            }\n\n            this.props.setAlertState({\n                open: true,\n                message,\n                severity: \"error\",\n            });\n        } finally {\n            this.setState(_ => ({isMinting: false}));\n            if(success) {\n                this.setState(prevState => ({isMinting: false, itemsRemaining: prevState.itemsRemaining - 1}));\n                if(this.props.whitelistedPDA) {\n                    this.setState(prevState => ({whitelistNRedeemed: prevState.whitelistNRedeemed + 1}));\n                }\n            }\n        }\n    }\n\n    fullUpdate() {\n        this.setState(oldState => oldState)\n    }\n\n    render () {\n        let content;\n        if (this.state.itemsRemaining === 0) {\n            content = \"SOLD OUT\";\n        } else if(this.props.whitelistedPDA && this.state.whitelistNRedeemed >= this.props.whitelistedPDA.data.nRedeemable.toNumber()) {\n            if(this.props.whitelistedPDA.data.isTeamMember) {\n                content = \"Out of team member mints\";\n            } else {\n                content = \"Out of whitelist mints\";\n            }\n        } else if(this.state.isActive) {\n            if(this.state.isMinting) {\n                content = <CircularProgress />;\n            } else {\n                content = '';\n                if(this.props.whitelistedPDA) {\n                    content += `[${this.state.whitelistNRedeemed} / ${this.props.whitelistedPDA.data.nRedeemable.toNumber()}] `\n                }\n                if(this.props.titlePrefix.length > 0) {\n                    content += `${this.props.titlePrefix} `;\n                }\n                content += `MINT for ${this.props.price} SOL (${this.state.itemsRemaining} remaining)`;\n            }\n        } else {\n            content = <Countdown\n                date={this.props.buttonStartDate}\n                onMount={({completed}) => completed && this.setState(_ => ({isActive: true}))}\n                onComplete={() => this.setState(_ => ({isActive: true}))}\n                renderer={renderCounter}\n            />;\n        }\n\n        let soldOut = this.state.itemsRemaining === 0;\n        if(this.props.whitelistedPDA) {\n            soldOut = soldOut || this.state.whitelistNRedeemed >= this.props.whitelistedPDA.data.nRedeemable;\n        }\n\n        return <MintContainer>\n            <MintButton\n                disabled={soldOut || this.state.isMinting || !this.state.isActive}\n                onClick={this.onMint}\n                variant=\"contained\"\n            >\n                {content}\n            </MintButton>\n        </MintContainer>\n    }\n\n}\n\nconst Home = (props: HomeProps) => {\n    const [balance, setBalance] = useState<number>();\n    const [decodedOrcs, setDecodedOrcs] = useState<any>();\n\n    const wallet = useAnchorWallet();\n    const [orcs, setOrcs] = useState<Orcs>();\n    const [state, setState] = useState<OrcsState>();\n    const [whitelistResult, setWhitelistResult] = useState<any>(null);\n\n    const [alertState, setAlertState] = useState<AlertState>({\n        open: false,\n        message: \"\",\n        severity: undefined,\n    });\n\n    useEffect(() => {\n        (async () => {\n            if (wallet) {\n                const balance = await props.connection.getBalance(wallet.publicKey);\n                setBalance(balance / LAMPORTS_PER_SOL);\n            }\n        })();\n    }, [wallet, props.connection]);\n\n    useEffect(() => {\n        (async () => {\n            if (!wallet) return;\n\n            const state = await getOrcsState(wallet as anchor.Wallet, props.orcsId, props.connection);\n            setState(state);\n\n            const whitelistPDA = (await getWhitelistedUserPDA(wallet.publicKey, state))[0];\n            const whitelistPDAInfo = await state.orcs.connection.getAccountInfo(whitelistPDA);\n\n            const dataInfo = await state.orcs.connection.getAccountInfo(ORCS_DATA_ACCOUNT_ID);\n            if(dataInfo) {\n                const decodedOrcs = state.orcs.program.coder.accounts.decode(\"Orcs\", dataInfo.data);\n                setDecodedOrcs(decodedOrcs);\n                if (whitelistPDAInfo) {\n                    const whitelistFetchResult = await state.orcs.program.account.whitelistPdaUser.fetch(whitelistPDA);\n                    setWhitelistResult(whitelistFetchResult);\n                    if (whitelistFetchResult.data.isTeamMember) {\n                        setAlertState({open: true, message: \"Recognized as team member\", severity: \"success\", });\n                    } else {\n                        setAlertState({open: true, message: \"Recognized as whitelisted user\", severity: \"success\", });\n                    }\n                }\n\n                console.log(`Got go live date ${state.goLiveDate}`);\n                console.log(`Got state program ${state.orcs.program.programId.toBase58()}`);\n                console.log(`Got state id ${state.orcs.id.toBase58()}`);\n                console.log(`Got state connection ${state.orcs.connection}`);\n\n                setOrcs(state.orcs);\n            }\n\n        })();\n    }, [wallet, props.orcsId, props.connection]);\n\n    let info;\n    let buttons;\n    let whitelistedButton;\n    let teamMemberButton;\n    if(!wallet) {\n        info = <ConnectButton>Connect Wallet</ConnectButton>;\n    } else if(state && decodedOrcs && decodedOrcs.data && orcs && balance) {\n        info = <ul>\n            <li>Go live date: {state.goLiveDate.toLocaleString()}</li>\n            <li>Whitelisted go live date: {state.whitelistGoLiveDate.toLocaleString()}</li>\n            <li>Team go live date: {state.teamWhitelistGoLiveDate.toLocaleString()}</li>\n        </ul>;\n        console.log(decodedOrcs);\n        buttons = <ButtonControl\n                titlePrefix={\"\"}\n                price={decodedOrcs.data.price / LAMPORTS_PER_SOL}\n                balance={balance}\n                buttonStartDate={state.goLiveDate}\n                orcsId={props.orcsId}\n                connection={props.connection}\n                treasury={props.treasury}\n                txTimeout={props.txTimeout}\n                setAlertState={setAlertState}\n                wallet={wallet}\n                decodedOrcs={decodedOrcs}\n                orcsState={state}\n                whitelistedPDA={null}\n            />;\n\n        if (whitelistResult) {\n            if(whitelistResult.data.isTeamMember) {\n                teamMemberButton = <ButtonControl\n                    titlePrefix={\"Team member\"}\n                    price={0}\n                    balance={balance}\n                    buttonStartDate={state.teamWhitelistGoLiveDate}\n                    orcsId={props.orcsId}\n                    connection={props.connection}\n                    treasury={props.treasury}\n                    txTimeout={props.txTimeout}\n                    setAlertState={setAlertState}\n                    wallet={wallet}\n                    decodedOrcs={decodedOrcs}\n                    orcsState={state}\n                    whitelistedPDA={whitelistResult}\n                />;\n            } else {\n                whitelistedButton = <ButtonControl\n                    titlePrefix={\"Whitelisted\"}\n                    price={decodedOrcs.data.whitelistedPrice / LAMPORTS_PER_SOL}\n                    balance={balance}\n                    buttonStartDate={state.whitelistGoLiveDate}\n                    orcsId={props.orcsId}\n                    connection={props.connection}\n                    treasury={props.treasury}\n                    txTimeout={props.txTimeout}\n                    setAlertState={setAlertState}\n                    wallet={wallet}\n                    decodedOrcs={decodedOrcs}\n                    orcsState={state}\n                    whitelistedPDA={whitelistResult}\n                />;\n            }\n        }\n    } else {\n        info = <CircularProgress color=\"secondary\"/>;\n    }\n\n    return <main>{info}{buttons}<br/>{whitelistedButton}<br/>{teamMemberButton}<Snackbar\n                open={alertState.open}\n                autoHideDuration={12000}\n                onClose={() => setAlertState({...alertState, open: false})}\n            >\n                <Alert\n                    onClose={() => setAlertState({...alertState, open: false})}\n                    severity={alertState.severity}\n                >\n                    {alertState.message}\n                </Alert>\n            </Snackbar></main>;\n};\n\ninterface AlertState {\n    open: boolean;\n    message: string;\n    severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\n}\n\nconst renderCounter = ({days, hours, minutes, seconds, completed}: any) => {\n    return (\n        <CounterText>\n            {hours} hours, {minutes} minutes, {seconds} seconds\n        </CounterText>\n    );\n};\n\nexport default Home;\n","import \"./App.css\";\nimport {useMemo} from \"react\";\n\nimport Home from \"./Home\";\n\nimport * as anchor from \"@project-serum/anchor\";\nimport {clusterApiUrl} from \"@solana/web3.js\";\nimport {WalletAdapterNetwork} from \"@solana/wallet-adapter-base\";\nimport {\n    getPhantomWallet,\n    getSlopeWallet,\n    getSolflareWallet,\n    getSolletWallet,\n    getSolletExtensionWallet,\n} from \"@solana/wallet-adapter-wallets\";\n\nimport {\n    ConnectionProvider,\n    WalletProvider,\n} from \"@solana/wallet-adapter-react\";\n\nimport {WalletDialogProvider} from \"@solana/wallet-adapter-material-ui\";\nimport {createTheme, ThemeProvider} from \"@material-ui/core\";\n\nimport React, { useState, useEffect } from 'react';\n\nconst treasury = new anchor.web3.PublicKey(\n    process.env.REACT_APP_TREASURY_ADDRESS!\n);\n\nconst orcsId = new anchor.web3.PublicKey(\n    process.env.REACT_APP_ORCS_DATA_ACCOUNT_ID!\n);\n\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\n\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\nconst connection = new anchor.web3.Connection(rpcHost);\n\nconst startDateSeed = parseInt(process.env.REACT_APP_ORCS_START_DATE!, 10);\n\nconst txTimeout = 3000000; // milliseconds (confirm this works for your project)\n\nconst theme = createTheme({\n    palette: {\n        type: 'dark',\n    },\n    overrides: {\n        MuiButtonBase: {\n            root: {\n                justifyContent: 'flex-start',\n            },\n        },\n        MuiButton: {\n            root: {\n                textTransform: undefined,\n                padding: '12px 16px',\n            },\n            startIcon: {\n                marginRight: 8,\n            },\n            endIcon: {\n                marginLeft: 8,\n            },\n        },\n    },\n});\n\nconst App = () => {\n    const endpoint = useMemo(() => clusterApiUrl(network), []);\n\n    const wallets = useMemo(\n        () => [\n            getPhantomWallet(),\n            getSlopeWallet(),\n            getSolflareWallet(),\n            getSolletWallet({network}),\n            getSolletExtensionWallet({network})\n        ],\n        []\n    );\n\n    return (\n        <ThemeProvider theme={theme}>\n            <ConnectionProvider endpoint={endpoint}>\n                <WalletProvider wallets={wallets} autoConnect>\n                    <WalletDialogProvider>\n                        <Home\n                            orcsId={orcsId}\n                            connection={connection}\n                            treasury={treasury}\n                            txTimeout={txTimeout}\n                        />\n                    </WalletDialogProvider>\n                </WalletProvider>\n            </ConnectionProvider>\n        </ThemeProvider>\n    );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import * as anchor from \"@project-serum/anchor\";\n\nexport const ORCS_PROGRAM = new anchor.web3.PublicKey(\n    process.env.REACT_APP_ORCS_PROGRAM_ID!\n);\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new anchor.web3.PublicKey(\n    \"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"\n);\n\nexport const TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n    \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n);"],"sourceRoot":""}