{"version":3,"sources":["components/Address.jsx","components/Balance.jsx","helpers/Transactor.js","helpers/Web3ModalSetup.js","components/Blockie.jsx","components/AddressInput.jsx","components/EtherInput.jsx","components/Wallet.jsx","components/Account.jsx","components/BytesStringInput.jsx","components/Contract/FunctionForm.jsx","components/Contract/utils.jsx","components/Faucet.jsx","components/Header.jsx","hooks/useStaticJsonRPC.js","helpers/loadAppContracts.js","components/Swap.jsx","components/Timeline.jsx","components/L2Bridge.jsx","components/NetworkDisplay.jsx","components/FaucetHint.jsx","components/NetworkSwitch.jsx","views/Home.jsx","App.jsx","index.jsx","contracts/external_contracts.js","constants.js"],"names":["Text","Typography","Address","props","currentTheme","useThemeSwitcher","address","value","ens","useLookupAddress","ensProvider","ensSplit","split","validEnsCheck","length","etherscanLink","blockExplorer","blockExplorerLink","displayAddress","substr","size","minimized","style","verticalAlign","color","target","href","rel","seed","toLowerCase","scale","fontSize","paddingLeft","onChange","editable","copyable","text","avatar","paragraph","rows","utils","require","Balance","useState","dollarMode","setDollarMode","balance","useBalance","provider","floatBalance","parseFloat","usingBalance","etherBalance","formatEther","toFixed","displayBalance","price","dollarMultiplier","padding","cursor","onClick","ethers","callbacks","Transactor","providerOrSigner","gasPrice","etherscan","tx","callback","a","Signer","isSigner","signer","getNetwork","network","_isProvider","getSigner","console","log","notify","options","dappId","BLOCKNATIVE_DAPPID","system","networkId","chainId","transactionHandler","txInformation","possibleFunction","transaction","hash","Notify","etherscanNetwork","name","etherscanTxUrl","Promise","result","parseUnits","gasLimit","hexlify","sendTransaction","indexOf","emitter","on","onclick","window","open","notification","info","message","description","placement","txResult","listeningInterval","setInterval","getTransactionReceipt","currentTransactionReceipt","confirmations","clearInterval","wait","data","error","JSON","parse","stringify","body","obj","errorObj","e","walletLinkProvider","WalletLink","appName","makeWeb3Provider","ALCHEMY_KEY","web3ModalSetup","Web3Modal","cacheProvider","theme","providerOptions","walletconnect","package","WalletConnectProvider","bridge","infuraId","INFURA_ID","rpc","portis","display","logo","Portis","id","fortmatic","Fortmatic","key","connector","_options","enable","authereum","Authereum","Blockie","isENS","endsWith","AddressInput","setValue","scan","setScan","currentValue","updateAddress","useCallback","newValue","resolveName","possibleAddress","zIndex","position","left","top","width","delay","resolution","onError","onScan","possibleNewValue","lastIndexOf","autoComplete","autoFocus","placeholder","prefix","isAddress","addonAfter","marginTop","count","CameraOutlined","QrcodeOutlined","EtherInput","mode","setMode","setDisplay","useEffect","usdValue","ethValue","Paragraph","Wallet","signerAddress","setSignerAddress","getAddress","newAddress","receiveButton","privateKeyButton","selectedAddress","setOpen","qr","setQr","amount","setAmount","toAddress","setToAddress","pk","setPK","providerSend","title","WalletOutlined","rotate","level","includeMargin","renderAs","imageSettings","excavate","KeyOutlined","localStorage","getItem","wallet","extraPkDisplayAdded","extraPkDisplay","push","backgroundStyle","pastpk","pastwallet","currentPrivateKey","setItem","Date","now","privateKey","createRandom","_signingKey","location","reload","inputStyle","visible","float","paddingRight","onOk","onCancel","footer","type","disabled","loading","parseEther","to","SendOutlined","Account","useBurner","userSigner","localProvider","mainnetProvider","web3Modal","loadWeb3Modal","logoutOfWeb3Modal","isContract","modalButtons","cachedProvider","marginLeft","shape","constants","BigNumber","Header","subTitle","createProvider","url","p","providers","StaticJsonRpcProvider","ready","useStaticJsonRPC","urlArray","setProvider","handleProviders","race","map","_p","Select","Option","NetworkDisplay","NETWORKCHECK","localChainId","selectedChainId","targetNetwork","USE_NETWORK_SELECTOR","networkDisplay","networkSelected","NETWORK","networkLocal","right","closable","ethereum","toString","chainName","nativeCurrency","rpcUrls","rpcUrl","blockExplorerUrls","request","method","params","switchTx","FaucetHint","faucetClicked","setFaucetClicked","yourLocalBalance","faucetTx","useGasPrice","faucetHint","_network","NetworkSwitch","OrcsUI","readContracts","writeContracts","priceWei","useContractReader","nWhitelistMints","parseInt","nFreeMints","mintNOrcs","LazyOrcs","mintOrc","mul","menu","Item","icon","RightOutlined","border","margin","overlay","DownOutlined","whitelistMintOrc","freeMintOrc","initialNetwork","NETWORKS","ropsten","DEBUG","Web3ModalSetup","App","networkOptions","injectedProvider","setInjectedProvider","setAddress","selectedNetwork","useLocation","process","REACT_APP_PROVIDER","clearCachedProvider","disconnect","setTimeout","useExchangeEthPrice","useUserProviderAndSigner","yourMainnetBalance","contractConfig","deployedContracts","externalContracts","useContractLoader","mainnetContracts","useOnBlock","connect","Web3Provider","code","reason","className","textAlign","flex","alignItems","lte","from","themes","dark","light","prevTheme","ReactDOM","render","themeMap","defaultTheme","document","getElementById","module","exports","contracts","DAI","abi","inputs","internalType","payable","stateMutability","anonymous","indexed","constant","outputs","UNI","localhost","global","hostname","mainnet","kovan","faucet","rinkeby","goerli","xdai","matic","mumbai","localArbitrum","localArbitrumL1","rinkebyArbitrum","arbitrum","localOptimismL1","localOptimism","kovanOptimism","optimism","localAvalanche","fujiAvalanche","mainnetAvalanche","testnetHarmony","mainnetHarmony","n"],"mappings":"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","file":"static/js/main.4c2a97de.chunk.js","sourcesContent":["import { Skeleton, Typography } from \"antd\";\nimport React from \"react\";\nimport Blockies from \"react-blockies\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\n\n// changed value={address} to address={address}\n\n/*\n  ~ What it does? ~\n\n  Displays an address with a blockie image and option to copy address\n\n  ~ How can I use? ~\n\n  <Address\n    address={address}\n    ensProvider={mainnetProvider}\n    blockExplorer={blockExplorer}\n    fontSize={fontSize}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n  - Provide fontSize={fontSize} to change the size of address text\n*/\n\nconst { Text } = Typography;\n\nconst blockExplorerLink = (address, blockExplorer) => `${blockExplorer || \"https://etherscan.io/\"}address/${address}`;\n\nexport default function Address(props) {\n  const { currentTheme } = useThemeSwitcher();\n  const address = props.value || props.address;\n  const ens = useLookupAddress(props.ensProvider, address);\n  const ensSplit = ens && ens.split(\".\");\n  const validEnsCheck = ensSplit && ensSplit[ensSplit.length - 1] === \"eth\";\n  const etherscanLink = blockExplorerLink(address, props.blockExplorer);\n  let displayAddress = address?.substr(0, 5) + \"...\" + address?.substr(-4);\n\n  if (validEnsCheck) {\n    displayAddress = ens;\n  } else if (props.size === \"short\") {\n    displayAddress += \"...\" + address.substr(-4);\n  } else if (props.size === \"long\") {\n    displayAddress = address;\n  }\n\n  if (!address) {\n    return (\n      <span>\n        <Skeleton avatar paragraph={{ rows: 1 }} />\n      </span>\n    );\n  }\n\n  if (props.minimized) {\n    return (\n      <span style={{ verticalAlign: \"middle\" }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          <Blockies seed={address.toLowerCase()} size={8} scale={2} />\n        </a>\n      </span>\n    );\n  }\n\n  return (\n    <span>\n      <span style={{ verticalAlign: \"middle\" }}>\n        <Blockies seed={address.toLowerCase()} size={8} scale={props.fontSize ? props.fontSize / 7 : 4} />\n      </span>\n      <span style={{ verticalAlign: \"middle\", paddingLeft: 5, fontSize: props.fontSize ? props.fontSize : 28 }}>\n        {props.onChange ? (\n          <Text editable={{ onChange: props.onChange }} copyable={{ text: address }}>\n            <a\n              style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n              target=\"_blank\"\n              href={etherscanLink}\n              rel=\"noopener noreferrer\"\n            >\n              {displayAddress}\n            </a>\n          </Text>\n        ) : (\n          <Text copyable={{ text: address }}>\n            <a\n              style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n              target=\"_blank\"\n              href={etherscanLink}\n              rel=\"noopener noreferrer\"\n            >\n              {displayAddress}\n            </a>\n          </Text>\n        )}\n      </span>\n    </span>\n  );\n}\n","import React, { useState } from \"react\";\nimport { useBalance } from \"eth-hooks\";\n\nconst { utils } = require(\"ethers\");\n\n/*\n  ~ What it does? ~\n\n  Displays a balance of given address in ether & dollar\n\n  ~ How can I use? ~\n\n  <Balance\n    address={address}\n    provider={mainnetProvider}\n    price={price}\n  />\n\n  ~ If you already have the balance as a bignumber ~\n  <Balance\n    balance={balance}\n    price={price}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to given address\n  - Provide provider={mainnetProvider} to access balance on mainnet or any other network (ex. localProvider)\n  - Provide price={price} of ether and get your balance converted to dollars\n*/\n\nexport default function Balance(props) {\n  const [dollarMode, setDollarMode] = useState(true);\n\n  const balance = useBalance(props.provider, props.address);\n  let floatBalance = parseFloat(\"0.00\");\n  let usingBalance = balance;\n\n  if (typeof props.balance !== \"undefined\") usingBalance = props.balance;\n  if (typeof props.value !== \"undefined\") usingBalance = props.value;\n\n  if (usingBalance) {\n    const etherBalance = utils.formatEther(usingBalance);\n    parseFloat(etherBalance).toFixed(2);\n    floatBalance = parseFloat(etherBalance);\n  }\n\n  let displayBalance = floatBalance.toFixed(4);\n\n  const price = props.price || props.dollarMultiplier || 1;\n\n  if (dollarMode) {\n    displayBalance = \"$\" + (floatBalance * price).toFixed(2);\n  }\n\n  return (\n    <span\n      style={{\n        verticalAlign: \"middle\",\n        fontSize: props.size ? props.size : 24,\n        padding: 8,\n        cursor: \"pointer\",\n      }}\n      onClick={() => {\n        setDollarMode(!dollarMode);\n      }}\n    >\n      {displayBalance}\n    </span>\n  );\n}\n","import { notification } from \"antd\";\nimport Notify from \"bnc-notify\";\nimport { BLOCKNATIVE_DAPPID } from \"../constants\";\n\nconst { ethers } = require(\"ethers\");\n\n// this should probably just be renamed to \"notifier\"\n// it is basically just a wrapper around BlockNative's wonderful Notify.js\n// https://docs.blocknative.com/notify\nconst callbacks = {};\n\nconst DEBUG = true;\n\nexport default function Transactor(providerOrSigner, gasPrice, etherscan) {\n  if (typeof providerOrSigner !== \"undefined\") {\n    // eslint-disable-next-line consistent-return\n    return async (tx, callback) => {\n      let signer;\n      let network;\n      let provider;\n      if (ethers.Signer.isSigner(providerOrSigner) === true) {\n        provider = providerOrSigner.provider;\n        signer = providerOrSigner;\n        network = providerOrSigner.provider && (await providerOrSigner.provider.getNetwork());\n      } else if (providerOrSigner._isProvider) {\n        provider = providerOrSigner;\n        signer = providerOrSigner.getSigner();\n        network = await providerOrSigner.getNetwork();\n      }\n\n      console.log(\"network\", network);\n      var options = null;\n      var notify = null;\n      options = {\n        dappId: BLOCKNATIVE_DAPPID, // GET YOUR OWN KEY AT https://account.blocknative.com\n        system: \"ethereum\",\n        networkId: network.chainId,\n        // darkMode: Boolean, // (default: false)\n        transactionHandler: txInformation => {\n          if (DEBUG) console.log(\"HANDLE TX\", txInformation);\n          const possibleFunction = callbacks[txInformation.transaction.hash];\n          if (typeof possibleFunction === \"function\") {\n            possibleFunction(txInformation.transaction);\n          }\n        },\n      };\n\n      notify = Notify(options);\n\n      let etherscanNetwork = \"\";\n      if (network.name && network.chainId > 1) {\n        etherscanNetwork = network.name + \".\";\n      }\n\n      let etherscanTxUrl = \"https://\" + etherscanNetwork + \"etherscan.io/tx/\";\n      if (network.chainId === 100) {\n        etherscanTxUrl = \"https://blockscout.com/poa/xdai/tx/\";\n      }\n\n      try {\n        let result;\n        if (tx instanceof Promise) {\n          if (DEBUG) console.log(\"AWAITING TX\", tx);\n          result = await tx;\n        } else {\n          if (!tx.gasPrice) {\n            tx.gasPrice = gasPrice || ethers.utils.parseUnits(\"4.1\", \"gwei\");\n          }\n          if (!tx.gasLimit) {\n            tx.gasLimit = ethers.utils.hexlify(120000);\n          }\n          if (DEBUG) console.log(\"RUNNING TX\", tx);\n          result = await signer.sendTransaction(tx);\n        }\n        if (DEBUG) console.log(\"RESULT:\", result);\n        // console.log(\"Notify\", notify);\n\n        if (callback) {\n          callbacks[result.hash] = callback;\n        }\n\n        // if it is a valid Notify.js network, use that, if not, just send a default notification\n        if (notify && [1, 3, 4, 5, 42, 100].indexOf(network.chainId) >= 0) {\n          const { emitter } = notify.hash(result.hash);\n          emitter.on(\"all\", transaction => {\n            return {\n              onclick: () => window.open((etherscan || etherscanTxUrl) + transaction.hash),\n            };\n          });\n        } else {\n          notification.info({\n            message: \"Local Transaction Sent\",\n            description: result.hash,\n            placement: \"bottomRight\",\n          });\n          // on most networks BlockNative will update a transaction handler,\n          // but locally we will set an interval to listen...\n          if (callback) {\n            const txResult = await tx;\n            const listeningInterval = setInterval(async () => {\n              console.log(\"CHECK IN ON THE TX\", txResult, provider);\n              const currentTransactionReceipt = await provider.getTransactionReceipt(txResult.hash);\n              if (currentTransactionReceipt && currentTransactionReceipt.confirmations) {\n                callback({ ...txResult, ...currentTransactionReceipt });\n                clearInterval(listeningInterval);\n              }\n            }, 500);\n          }\n        }\n\n        if (typeof result.wait === \"function\") {\n          await result.wait();\n        }\n\n        return result;\n      } catch (e) {\n        if (DEBUG) console.log(e);\n        // Accounts for Metamask and default signer on all networks\n        let message =\n          e.data && e.data.message\n            ? e.data.message\n            : e.error && JSON.parse(JSON.stringify(e.error)).body\n            ? JSON.parse(JSON.parse(JSON.stringify(e.error)).body).error.message\n            : e.data\n            ? e.data\n            : JSON.stringify(e);\n        if (!e.error && e.message) {\n          message = e.message;\n        }\n\n        console.log(\"Attempt to clean up:\", message);\n        try {\n          let obj = JSON.parse(message);\n          if (obj && obj.body) {\n            let errorObj = JSON.parse(obj.body);\n            if (errorObj && errorObj.error && errorObj.error.message) {\n              message = errorObj.error.message;\n            }\n          }\n        } catch (e) {\n          //ignore\n        }\n\n        notification.error({\n          message: \"Transaction Error\",\n          description: message,\n        });\n        if (callback && typeof callback === \"function\") {\n          callback(e);\n        }\n      }\n    };\n  }\n}\n","import Fortmatic from \"fortmatic\";\nimport WalletLink from \"walletlink\";\nimport Web3Modal from \"web3modal\";\nimport Portis from \"@portis/web3\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport Authereum from \"authereum\";\nimport { INFURA_ID, ALCHEMY_KEY } from \"../constants\";\n\n// Coinbase walletLink init\nconst walletLink = new WalletLink({\n  appName: \"coinbase\",\n});\n\n// WalletLink provider\nconst walletLinkProvider = walletLink.makeWeb3Provider(`https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`, 1);\n\n// Portis ID: 6255fb2b-58c8-433b-a2c9-62098c05ddc9\n/*\n  Web3 modal helps us \"connect\" external wallets:\n*/\nconst web3ModalSetup = () =>\n  new Web3Modal({\n    network: \"mainnet\", // Optional. If using WalletConnect on xDai, change network to \"xdai\" and add RPC info below for xDai chain.\n    cacheProvider: true, // optional\n    theme: \"light\", // optional. Change to \"dark\" for a dark theme.\n    providerOptions: {\n      walletconnect: {\n        package: WalletConnectProvider, // required\n        options: {\n          bridge: \"https://polygon.bridge.walletconnect.org\",\n          infuraId: INFURA_ID,\n          rpc: {\n            1: `https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`, // mainnet // For more WalletConnect providers: https://docs.walletconnect.org/quick-start/dapps/web3-provider#required\n            42: `https://kovan.infura.io/v3/${INFURA_ID}`,\n            100: \"https://dai.poa.network\", // xDai\n          },\n        },\n      },\n      portis: {\n        display: {\n          logo: \"https://user-images.githubusercontent.com/9419140/128913641-d025bc0c-e059-42de-a57b-422f196867ce.png\",\n          name: \"Portis\",\n          description: \"Connect to Portis App\",\n        },\n        package: Portis,\n        options: {\n          id: \"6255fb2b-58c8-433b-a2c9-62098c05ddc9\",\n        },\n      },\n      fortmatic: {\n        package: Fortmatic, // required\n        options: {\n          key: \"pk_live_5A7C91B2FC585A17\", // required\n        },\n      },\n      // torus: {\n      //   package: Torus,\n      //   options: {\n      //     networkParams: {\n      //       host: \"https://localhost:8545\", // optional\n      //       chainId: 1337, // optional\n      //       networkId: 1337 // optional\n      //     },\n      //     config: {\n      //       buildEnv: \"development\" // optional\n      //     },\n      //   },\n      // },\n      \"custom-walletlink\": {\n        display: {\n          logo: \"https://play-lh.googleusercontent.com/PjoJoG27miSglVBXoXrxBSLveV6e3EeBPpNY55aiUUBM9Q1RCETKCOqdOkX2ZydqVf0\",\n          name: \"Coinbase\",\n          description: \"Connect to Coinbase Wallet (not Coinbase App)\",\n        },\n        package: walletLinkProvider,\n        connector: async (provider, _options) => {\n          await provider.enable();\n          return provider;\n        },\n      },\n      authereum: {\n        package: Authereum, // required\n      },\n    },\n  });\n\nexport default web3ModalSetup;\n","import React from \"react\";\nimport Blockies from \"react-blockies\";\n\n// provides a blockie image for the address using \"react-blockies\" library\n\nexport default function Blockie(props) {\n  if (!props.address || typeof props.address.toLowerCase !== \"function\") {\n    return <span />;\n  }\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return <Blockies seed={props.address.toLowerCase()} {...props} />;\n}\n","import { CameraOutlined, QrcodeOutlined } from \"@ant-design/icons\";\nimport { Badge, Input } from \"antd\";\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\nimport React, { useCallback, useState } from \"react\";\nimport QrReader from \"react-qr-reader\";\nimport Blockie from \"./Blockie\";\nimport { ethers } from \"ethers\";\n\n// probably we need to change value={toAddress} to address={toAddress}\n\n/*\n  ~ What it does? ~\n\n  Displays an address input with QR scan option\n\n  ~ How can I use? ~\n\n  <AddressInput\n    autoFocus\n    ensProvider={mainnetProvider}\n    placeholder=\"Enter address\"\n    value={toAddress}\n    onChange={setToAddress}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide placeholder=\"Enter address\" value for the input\n  - Value of the address input is stored in value={toAddress}\n  - Control input change by onChange={setToAddress}\n                          or onChange={address => { setToAddress(address);}}\n*/\n\nconst isENS = (address = \"\") => address.endsWith(\".eth\") || address.endsWith(\".xyz\");\n\nexport default function AddressInput(props) {\n  const { ensProvider, onChange } = props;\n  const [value, setValue] = useState(props.value);\n  const [scan, setScan] = useState(false);\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n  const ens = useLookupAddress(props.ensProvider, currentValue);\n\n  const updateAddress = useCallback(\n    async newValue => {\n      if (typeof newValue !== \"undefined\") {\n        let address = newValue;\n        if (isENS(address)) {\n          try {\n            const possibleAddress = await ensProvider.resolveName(address);\n            if (possibleAddress) {\n              address = possibleAddress;\n            }\n            // eslint-disable-next-line no-empty\n          } catch (e) {}\n        }\n        setValue(address);\n        if (typeof onChange === \"function\") {\n          onChange(address);\n        }\n      }\n    },\n    [ensProvider, onChange],\n  );\n\n  return (\n    <div>\n      {scan ? (\n        <div\n          style={{\n            zIndex: 256,\n            position: \"absolute\",\n            left: 0,\n            top: 0,\n            width: \"100%\",\n          }}\n          onClick={() => {\n            setScan(false);\n          }}\n        >\n          <QrReader\n            delay={250}\n            resolution={1200}\n            onError={e => {\n              console.log(\"SCAN ERROR\", e);\n              setScan(false);\n            }}\n            onScan={newValue => {\n              if (newValue) {\n                console.log(\"SCAN VALUE\", newValue);\n                let possibleNewValue = newValue;\n                if (possibleNewValue.indexOf(\"/\") >= 0) {\n                  possibleNewValue = possibleNewValue.substr(possibleNewValue.lastIndexOf(\"0x\"));\n                  console.log(\"CLEANED VALUE\", possibleNewValue);\n                }\n                setScan(false);\n                updateAddress(possibleNewValue);\n              }\n            }}\n            style={{ width: \"100%\" }}\n          />\n        </div>\n      ) : (\n        \"\"\n      )}\n      <Input\n        id=\"0xAddress\" // name it something other than address for auto fill doxxing\n        name=\"0xAddress\" // name it something other than address for auto fill doxxing\n        autoComplete=\"off\"\n        autoFocus={props.autoFocus}\n        placeholder={props.placeholder ? props.placeholder : \"address\"}\n        prefix={<Blockie address={currentValue} size={8} scale={3} />}\n        value={ethers.utils.isAddress(currentValue) && !isENS(currentValue) && isENS(ens) ? ens : currentValue}\n        addonAfter={\n          <div\n            style={{ marginTop: 4, cursor: \"pointer\" }}\n            onClick={() => {\n              setScan(!scan);\n            }}\n          >\n            <Badge count={<CameraOutlined style={{ fontSize: 9 }} />}>\n              <QrcodeOutlined style={{ fontSize: 18 }} />\n            </Badge>{\" \"}\n            Scan\n          </div>\n        }\n        onChange={e => {\n          updateAddress(e.target.value);\n        }}\n      />\n    </div>\n  );\n}\n","import { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\n// small change in useEffect, display currentValue if it's provided by user\n\n/*\n  ~ What it does? ~\n\n  Displays input field for ETH/USD amount, with an option to convert between ETH and USD\n\n  ~ How can I use? ~\n\n  <EtherInput\n    autofocus\n    price={price}\n    value=100\n    placeholder=\"Enter amount\"\n    onChange={value => {\n      setAmount(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide value={value} to specify initial amount of ether\n  - Provide placeholder=\"Enter amount\" value for the input\n  - Control input change by onChange={value => { setAmount(value);}}\n*/\n\nexport default function EtherInput(props) {\n  const [mode, setMode] = useState(props.price ? \"USD\" : \"ETH\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState();\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n\n  return (\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"amount in \" + mode}\n      autoFocus={props.autoFocus}\n      prefix={mode === \"USD\" ? \"$\" : \"Ξ\"}\n      value={display}\n      addonAfter={\n        !props.price ? (\n          \"\"\n        ) : (\n          <div\n            style={{ cursor: \"pointer\" }}\n            onClick={() => {\n              if (mode === \"USD\") {\n                setMode(\"ETH\");\n                setDisplay(currentValue);\n              } else {\n                setMode(\"USD\");\n                if (currentValue) {\n                  const usdValue = \"\" + (parseFloat(currentValue) * props.price).toFixed(2);\n                  setDisplay(usdValue);\n                } else {\n                  setDisplay(currentValue);\n                }\n              }\n            }}\n          >\n            {mode === \"USD\" ? \"USD 🔀\" : \"ETH 🔀\"}\n          </div>\n        )\n      }\n      onChange={async e => {\n        const newValue = e.target.value;\n        if (mode === \"USD\") {\n          const possibleNewValue = parseFloat(newValue);\n          if (possibleNewValue) {\n            const ethValue = possibleNewValue / props.price;\n            setValue(ethValue);\n            if (typeof props.onChange === \"function\") {\n              props.onChange(ethValue);\n            }\n            setDisplay(newValue);\n          } else {\n            setDisplay(newValue);\n          }\n        } else {\n          setValue(newValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setDisplay(newValue);\n        }\n      }}\n    />\n  );\n}\n","import { KeyOutlined, QrcodeOutlined, SendOutlined, WalletOutlined } from \"@ant-design/icons\";\nimport { Button, Modal, Spin, Tooltip, Typography } from \"antd\";\nimport { ethers } from \"ethers\";\nimport QR from \"qrcode.react\";\nimport React, { useState, useEffect } from \"react\";\nimport { Transactor } from \"../helpers\";\nimport Address from \"./Address\";\nimport AddressInput from \"./AddressInput\";\nimport Balance from \"./Balance\";\nimport EtherInput from \"./EtherInput\";\n\nconst { Text, Paragraph } = Typography;\n\n/*\n  ~ What it does? ~\n\n  Displays a wallet where you can specify address and send USD/ETH, with options to\n  scan address, to convert between USD and ETH, to see and generate private keys,\n  to send, receive and extract the burner wallet\n\n  ~ How can I use? ~\n\n  <Wallet\n    provider={userProvider}\n    address={address}\n    ensProvider={mainnetProvider}\n    price={price}\n    color='red'\n  />\n\n  ~ Features ~\n\n  - Provide provider={userProvider} to display a wallet\n  - Provide address={address} if you want to specify address, otherwise\n                                                    your default address will be used\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide color to specify the color of wallet icon\n*/\n\nexport default function Wallet(props) {\n  const [signerAddress, setSignerAddress] = useState();\n  useEffect(() => {\n    async function getAddress() {\n      if (props.signer) {\n        const newAddress = await props.signer.getAddress();\n        setSignerAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [props.signer]);\n\n  const selectedAddress = props.address || signerAddress;\n\n  const [open, setOpen] = useState();\n  const [qr, setQr] = useState();\n  const [amount, setAmount] = useState();\n  const [toAddress, setToAddress] = useState();\n  const [pk, setPK] = useState();\n\n  const providerSend = props.provider ? (\n    <Tooltip title=\"Wallet\">\n      <WalletOutlined\n        onClick={() => {\n          setOpen(!open);\n        }}\n        rotate={-90}\n        style={{\n          padding: 7,\n          color: props.color ? props.color : \"\",\n          cursor: \"pointer\",\n          fontSize: 28,\n          verticalAlign: \"middle\",\n        }}\n      />\n    </Tooltip>\n  ) : (\n    \"\"\n  );\n\n  let display;\n  let receiveButton;\n  let privateKeyButton;\n  if (qr) {\n    display = (\n      <div>\n        <div>\n          <Text copyable>{selectedAddress}</Text>\n        </div>\n        <QR\n          value={selectedAddress}\n          size=\"450\"\n          level=\"H\"\n          includeMargin\n          renderAs=\"svg\"\n          imageSettings={{ excavate: false }}\n        />\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setQr(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Hide\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  } else if (pk) {\n    const pk = localStorage.getItem(\"metaPrivateKey\");\n    const wallet = new ethers.Wallet(pk);\n\n    if (wallet.address !== selectedAddress) {\n      display = (\n        <div>\n          <b>*injected account*, private key unknown</b>\n        </div>\n      );\n    } else {\n      const extraPkDisplayAdded = {};\n      const extraPkDisplay = [];\n      extraPkDisplayAdded[wallet.address] = true;\n      extraPkDisplay.push(\n        <div style={{ fontSize: 16, padding: 2, backgroundStyle: \"#89e789\" }}>\n          <a href={\"/pk#\" + pk}>\n            <Address minimized address={wallet.address} ensProvider={props.ensProvider} /> {wallet.address.substr(0, 6)}\n          </a>\n        </div>,\n      );\n      for (const key in localStorage) {\n        if (key.indexOf(\"metaPrivateKey_backup\") >= 0) {\n          console.log(key);\n          const pastpk = localStorage.getItem(key);\n          const pastwallet = new ethers.Wallet(pastpk);\n          if (!extraPkDisplayAdded[pastwallet.address] /* && selectedAddress!=pastwallet.address */) {\n            extraPkDisplayAdded[pastwallet.address] = true;\n            extraPkDisplay.push(\n              <div style={{ fontSize: 16 }}>\n                <a href={\"/pk#\" + pastpk}>\n                  <Address minimized address={pastwallet.address} ensProvider={props.ensProvider} />{\" \"}\n                  {pastwallet.address.substr(0, 6)}\n                </a>\n              </div>,\n            );\n          }\n        }\n      }\n\n      display = (\n        <div>\n          <b>Private Key:</b>\n\n          <div>\n            <Text copyable>{pk}</Text>\n          </div>\n\n          <hr />\n\n          <i>\n            Point your camera phone at qr code to open in\n            <a target=\"_blank\" href={\"https://xdai.io/\" + pk} rel=\"noopener noreferrer\">\n              burner wallet\n            </a>\n            :\n          </i>\n          <QR\n            value={\"https://xdai.io/\" + pk}\n            size=\"450\"\n            level=\"H\"\n            includeMargin\n            renderAs=\"svg\"\n            imageSettings={{ excavate: false }}\n          />\n\n          <Paragraph style={{ fontSize: \"16\" }} copyable>\n            {\"https://xdai.io/\" + pk}\n          </Paragraph>\n\n          {extraPkDisplay ? (\n            <div>\n              <h3>Known Private Keys:</h3>\n              {extraPkDisplay}\n              <Button\n                onClick={() => {\n                  const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n                  if (currentPrivateKey) {\n                    window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n                  }\n                  const randomWallet = ethers.Wallet.createRandom();\n                  const privateKey = randomWallet._signingKey().privateKey;\n                  window.localStorage.setItem(\"metaPrivateKey\", privateKey);\n                  window.location.reload();\n                }}\n              >\n                Generate\n              </Button>\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n      );\n    }\n\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(\"\");\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Hide\n      </Button>\n    );\n  } else {\n    const inputStyle = {\n      padding: 10,\n    };\n\n    display = (\n      <div>\n        <div style={inputStyle}>\n          <AddressInput\n            autoFocus\n            ensProvider={props.ensProvider}\n            placeholder=\"to address\"\n            address={toAddress}\n            onChange={setToAddress}\n          />\n        </div>\n        <div style={inputStyle}>\n          <EtherInput\n            price={props.price}\n            value={amount}\n            onChange={value => {\n              setAmount(value);\n            }}\n          />\n        </div>\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  }\n\n  return (\n    <span>\n      {providerSend}\n      <Modal\n        visible={open}\n        title={\n          <div>\n            {selectedAddress ? <Address address={selectedAddress} ensProvider={props.ensProvider} /> : <Spin />}\n            <div style={{ float: \"right\", paddingRight: 25 }}>\n              <Balance address={selectedAddress} provider={props.provider} dollarMultiplier={props.price} />\n            </div>\n          </div>\n        }\n        onOk={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        onCancel={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        footer={[\n          privateKeyButton,\n          receiveButton,\n          <Button\n            key=\"submit\"\n            type=\"primary\"\n            disabled={!amount || !toAddress || qr}\n            loading={false}\n            onClick={() => {\n              const tx = Transactor(props.signer || props.provider);\n\n              let value;\n              try {\n                value = ethers.utils.parseEther(\"\" + amount);\n              } catch (e) {\n                // failed to parseEther, try something else\n                value = ethers.utils.parseEther(\"\" + parseFloat(amount).toFixed(8));\n              }\n\n              tx({\n                to: toAddress,\n                value,\n              });\n              setOpen(!open);\n              setQr();\n            }}\n          >\n            <SendOutlined /> Send\n          </Button>,\n        ]}\n      >\n        {display}\n      </Modal>\n    </span>\n  );\n}\n","import { Button } from \"antd\";\nimport React from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\nimport Address from \"./Address\";\nimport Balance from \"./Balance\";\nimport Wallet from \"./Wallet\";\n\n/*\n  ~ What it does? ~\n\n  Displays an Address, Balance, and Wallet as one Account component,\n  also allows users to log in to existing accounts and log out\n\n  ~ How can I use? ~\n\n  <Account\n    useBurner={boolean}\n    address={address}\n    localProvider={localProvider}\n    userProvider={userProvider}\n    mainnetProvider={mainnetProvider}\n    price={price}\n    web3Modal={web3Modal}\n    loadWeb3Modal={loadWeb3Modal}\n    logoutOfWeb3Modal={logoutOfWeb3Modal}\n    blockExplorer={blockExplorer}\n    isContract={boolean}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to the given address\n  - Provide localProvider={localProvider} to access balance on local network\n  - Provide userProvider={userProvider} to display a wallet\n  - Provide mainnetProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide price={price} of ether and get your balance converted to dollars\n  - Provide web3Modal={web3Modal}, loadWeb3Modal={loadWeb3Modal}, logoutOfWeb3Modal={logoutOfWeb3Modal}\n              to be able to log in/log out to/from existing accounts\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n*/\n\nexport default function Account({\n  useBurner,\n  address,\n  userSigner,\n  localProvider,\n  mainnetProvider,\n  price,\n  minimized,\n  web3Modal,\n  loadWeb3Modal,\n  logoutOfWeb3Modal,\n  blockExplorer,\n  isContract,\n}) {\n  const { currentTheme } = useThemeSwitcher();\n\n  function isValidAddress(address) {\n    return address && address !== \"0x0000000000000000000000000000000000000000\";\n  }\n\n  const modalButtons = [];\n  if (web3Modal) {\n    if (web3Modal.cachedProvider) {\n      modalButtons.push(\n        <Button\n          key=\"logoutbutton\"\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\n          shape=\"round\"\n          size=\"large\"\n          onClick={logoutOfWeb3Modal}\n        >\n          logout\n        </Button>,\n      );\n    } else {\n      modalButtons.push(\n        <Button\n          key=\"loginbutton\"\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\n          shape=\"round\"\n          size=\"large\"\n          /* type={minimized ? \"default\" : \"primary\"}     too many people just defaulting to MM and having a bad time */\n          onClick={loadWeb3Modal}\n        >\n          connect\n        </Button>,\n      );\n    }\n  }\n  const display = minimized ? (\n    \"\"\n  ) : (\n    <span>\n      {web3Modal && web3Modal.cachedProvider ? (\n        <>\n          {address && <Address address={address} ensProvider={mainnetProvider} blockExplorer={blockExplorer} />}\n          <Balance address={address} provider={localProvider} price={price} />\n          <Wallet\n            address={address}\n            provider={localProvider}\n            signer={userSigner}\n            ensProvider={mainnetProvider}\n            price={price}\n            color={currentTheme === \"light\" ? \"#1890ff\" : \"#2caad9\"}\n          />\n        </>\n      ) : useBurner ? (\n        \"\"\n      ) : isContract ? (\n        <>\n          {address && <Address address={address} ensProvider={mainnetProvider} blockExplorer={blockExplorer} />}\n          <Balance address={address} provider={localProvider} price={price} />\n        </>\n      ) : (\n        \"\"\n      )}\n      {useBurner && web3Modal && !web3Modal.cachedProvider ? (\n        <>\n          <Address address={address} ensProvider={mainnetProvider} blockExplorer={blockExplorer} />\n          <Balance address={address} provider={localProvider} price={price} />\n          <Wallet\n            address={address}\n            provider={localProvider}\n            signer={userSigner}\n            ensProvider={mainnetProvider}\n            price={price}\n            color={currentTheme === \"light\" ? \"#1890ff\" : \"#2caad9\"}\n          />\n        </>\n      ) : (\n        <></>\n      )}\n    </span>\n  );\n\n  return (\n    <div>\n      {display}\n      {modalButtons}\n    </div>\n  );\n}\n","import { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\nconst { utils, constants } = require(\"ethers\");\n\n/*\n  ~ What it does? ~\n\n  Displays input field with options to convert between STRING and BYTES32\n\n  ~ How can I use? ~\n\n  <BytesStringInput\n    autofocus\n    value={\"scaffold-eth\"}\n    placeholder=\"Enter value...\"\n    onChange={value => {\n      setValue(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide value={value} to specify initial string\n  - Provide placeholder=\"Enter value...\" value for the input\n  - Control input change by onChange={value => { setValue(value);}}\n\n*/\n\nexport default function BytesStringInput(props) {\n  const [mode, setMode] = useState(\"STRING\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState(constants.HashZero);\n\n  // current value is the value in bytes32\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  const option = title => {\n    return (\n      <div\n        style={{ cursor: \"pointer\" }}\n        onClick={() => {\n          if (mode === \"STRING\") {\n            setMode(\"BYTES32\");\n            if (!utils.isHexString(currentValue)) {\n              /* in case user enters invalid bytes32 number,\n                   it considers it as string and converts to bytes32 */\n              const changedValue = utils.formatBytes32String(currentValue);\n              setDisplay(changedValue);\n            } else {\n              setDisplay(currentValue);\n            }\n          } else {\n            setMode(\"STRING\");\n            if (currentValue && utils.isHexString(currentValue)) {\n              setDisplay(utils.parseBytes32String(currentValue));\n            } else {\n              setDisplay(currentValue);\n            }\n          }\n        }}\n      >\n        {title}\n      </div>\n    );\n  };\n\n  let addonAfter;\n  if (mode === \"STRING\") {\n    addonAfter = option(\"STRING 🔀\");\n  } else {\n    addonAfter = option(\"BYTES32 🔀\");\n  }\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n\n  return (\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"Enter value in \" + mode}\n      autoFocus={props.autoFocus}\n      value={display}\n      addonAfter={addonAfter}\n      onChange={async e => {\n        const newValue = e.target.value;\n        if (mode === \"STRING\") {\n          // const ethValue = parseFloat(newValue) / props.price;\n          // setValue(ethValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(utils.formatBytes32String(newValue));\n          }\n          setValue(utils.formatBytes32String(newValue));\n          setDisplay(newValue);\n        } else {\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setValue(newValue);\n          setDisplay(newValue);\n        }\n      }}\n    />\n  );\n}\n","import { Button, Col, Divider, Input, Row, Tooltip } from \"antd\";\nimport React, { useState } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { Transactor } from \"../../helpers\";\nimport { tryToDisplay, tryToDisplayAsText } from \"./utils\";\n\nconst { utils, BigNumber } = require(\"ethers\");\n\nconst getFunctionInputKey = (functionInfo, input, inputIndex) => {\n  const name = input?.name ? input.name : \"input_\" + inputIndex + \"_\";\n  return functionInfo.name + \"_\" + name + \"_\" + input.type;\n};\n\nexport default function FunctionForm({ contractFunction, functionInfo, provider, gasPrice, triggerRefresh }) {\n  const [form, setForm] = useState({});\n  const [txValue, setTxValue] = useState();\n  const [returnValue, setReturnValue] = useState();\n\n  const tx = Transactor(provider, gasPrice);\n\n  const inputs = functionInfo.inputs.map((input, inputIndex) => {\n    const key = getFunctionInputKey(functionInfo, input, inputIndex);\n\n    let buttons = \"\";\n    if (input.type === \"bytes32\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to bytes32\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.parseBytes32String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.formatBytes32String(form[key]);\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"bytes\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to hex\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.toUtf8String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]));\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"uint256\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"* 10 ** 18\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              const formUpdate = { ...form };\n              formUpdate[key] = utils.parseEther(form[key]);\n              setForm(formUpdate);\n            }}\n          >\n            ✴️\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"address\") {\n      const possibleAddress = form[key] && form[key].toLowerCase && form[key].toLowerCase().trim();\n      if (possibleAddress && possibleAddress.length === 42) {\n        buttons = (\n          <Tooltip placement=\"right\" title=\"blockie\">\n            <Blockies seed={possibleAddress} scale={3} />\n          </Tooltip>\n        );\n      }\n    }\n\n    return (\n      <div style={{ margin: 2 }} key={key}>\n        <Input\n          size=\"large\"\n          placeholder={input.name ? input.type + \" \" + input.name : input.type}\n          autoComplete=\"off\"\n          value={form[key]}\n          name={key}\n          onChange={event => {\n            const formUpdate = { ...form };\n            formUpdate[event.target.name] = event.target.value;\n            setForm(formUpdate);\n          }}\n          suffix={buttons}\n        />\n      </div>\n    );\n  });\n\n  const txValueInput = (\n    <div style={{ margin: 2 }} key=\"txValueInput\">\n      <Input\n        placeholder=\"transaction value\"\n        onChange={e => setTxValue(e.target.value)}\n        value={txValue}\n        addonAfter={\n          <div>\n            <Row>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\" * 10^18 \">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      const floatValue = parseFloat(txValue);\n                      if (floatValue) setTxValue(\"\" + floatValue * 10 ** 18);\n                    }}\n                  >\n                    ✳️\n                  </div>\n                </Tooltip>\n              </Col>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\"number to hex\">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      setTxValue(BigNumber.from(txValue).toHexString());\n                    }}\n                  >\n                    #️⃣\n                  </div>\n                </Tooltip>\n              </Col>\n            </Row>\n          </div>\n        }\n      />\n    </div>\n  );\n\n  if (functionInfo.payable) {\n    inputs.push(txValueInput);\n  }\n\n  const handleForm = returned => {\n    if (returned) {\n      setForm({});\n    }\n  };\n\n  const buttonIcon =\n    functionInfo.type === \"call\" ? (\n      <Button style={{ marginLeft: -32 }}>Read📡</Button>\n    ) : (\n      <Button style={{ marginLeft: -32 }}>Send💸</Button>\n    );\n  inputs.push(\n    <div style={{ cursor: \"pointer\", margin: 2 }} key=\"goButton\">\n      <Input\n        onChange={e => setReturnValue(e.target.value)}\n        defaultValue=\"\"\n        bordered={false}\n        disabled\n        value={returnValue}\n        suffix={\n          <div\n            style={{ width: 50, height: 30, margin: 0 }}\n            type=\"default\"\n            onClick={async () => {\n              const args = functionInfo.inputs.map((input, inputIndex) => {\n                const key = getFunctionInputKey(functionInfo, input, inputIndex);\n                let value = form[key];\n                if (input.baseType === \"array\") {\n                  value = JSON.parse(value);\n                } else if (input.type === \"bool\") {\n                  if (value === \"true\" || value === \"1\" || value === \"0x1\" || value === \"0x01\" || value === \"0x0001\") {\n                    value = 1;\n                  } else {\n                    value = 0;\n                  }\n                }\n                return value;\n              });\n\n              let result;\n              if (functionInfo.stateMutability === \"view\" || functionInfo.stateMutability === \"pure\") {\n                try {\n                  const returned = await contractFunction(...args);\n                  handleForm(returned);\n                  result = tryToDisplayAsText(returned);\n                } catch (err) {\n                  console.error(err);\n                }\n              } else {\n                const overrides = {};\n                if (txValue) {\n                  overrides.value = txValue; // ethers.utils.parseEther()\n                }\n                if (gasPrice) {\n                  overrides.gasPrice = gasPrice;\n                }\n                // Uncomment this if you want to skip the gas estimation for each transaction\n                // overrides.gasLimit = hexlify(1200000);\n\n                // console.log(\"Running with extras\",extras)\n                const returned = await tx(contractFunction(...args, overrides));\n                handleForm(returned);\n                result = tryToDisplay(returned);\n              }\n\n              console.log(\"SETTING RESULT:\", result);\n              setReturnValue(result);\n              triggerRefresh(true);\n            }}\n          >\n            {buttonIcon}\n          </div>\n        }\n      />\n    </div>,\n  );\n\n  return (\n    <div>\n      <Row>\n        <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 24,\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        <Col span={16}>{inputs}</Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n}\n","import React from \"react\";\nimport Address from \"../Address\";\n\nconst { utils } = require(\"ethers\");\n\nconst tryToDisplay = (thing, asText = false) => {\n  if (thing && thing.toNumber) {\n    try {\n      return thing.toNumber();\n    } catch (e) {\n      const displayable = \"Ξ\" + utils.formatUnits(thing, \"ether\");\n      return asText ? displayable : <span style={{ overflowWrap: \"break-word\", width: \"100%\" }}>{displayable}</span>;\n    }\n  }\n  if (thing && thing.indexOf && thing.indexOf(\"0x\") === 0 && thing.length === 42) {\n    return asText ? thing : <Address address={thing} fontSize={22} />;\n  }\n  if (thing && thing.constructor && thing.constructor.name == \"Array\") {\n    const mostReadable = v => ([\"number\", \"boolean\"].includes(typeof v) ? v : tryToDisplayAsText(v));\n    const displayable = JSON.stringify(thing.map(mostReadable));\n    return asText ? (\n      displayable\n    ) : (\n      <span style={{ overflowWrap: \"break-word\", width: \"100%\" }}>{displayable.replaceAll(\",\", \",\\n\")}</span>\n    );\n  }\n  return JSON.stringify(thing);\n};\n\nconst tryToDisplayAsText = thing => tryToDisplay(thing, true);\n\nexport { tryToDisplay, tryToDisplayAsText };\n","import { SendOutlined } from \"@ant-design/icons\";\nimport { Button, Input, Tooltip } from \"antd\";\nimport React, { useCallback, useState, useEffect } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { Transactor } from \"../helpers\";\nimport Wallet from \"./Wallet\";\n\nconst { utils } = require(\"ethers\");\n\n// improved a bit by converting address to ens if it exists\n// added option to directly input ens name\n// added placeholder option\n\n/*\n  ~ What it does? ~\n\n  Displays a local faucet to send ETH to given address, also wallet is provided\n\n  ~ How can I use? ~\n\n  <Faucet\n    price={price}\n    localProvider={localProvider}\n    ensProvider={mainnetProvider}\n    placeholder={\"Send local faucet\"}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\n  - Provide localProvider={localProvider} to be able to send ETH to given address\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n              works both in input field & wallet\n  - Provide placeholder=\"Send local faucet\" value for the input\n*/\n\nexport default function Faucet(props) {\n  const [address, setAddress] = useState();\n  const [faucetAddress, setFaucetAddress] = useState();\n\n  const { price, placeholder, localProvider, ensProvider, onChange } = props;\n\n  useEffect(() => {\n    const getFaucetAddress = async () => {\n      if (localProvider) {\n        const _faucetAddress = await localProvider.listAccounts();\n        setFaucetAddress(_faucetAddress[0]);\n      }\n    };\n    getFaucetAddress();\n  }, [localProvider]);\n\n  let blockie;\n  if (address && typeof address.toLowerCase === \"function\") {\n    blockie = <Blockies seed={address.toLowerCase()} size={8} scale={4} />;\n  } else {\n    blockie = <div />;\n  }\n\n  const updateAddress = useCallback(\n    async newValue => {\n      if (typeof newValue !== \"undefined\" && utils.isAddress(newValue)) {\n        setAddress(newValue);\n      }\n    },\n    [ensProvider, onChange],\n  );\n\n  const tx = Transactor(localProvider);\n\n  return (\n    <span>\n      <Input\n        size=\"large\"\n        placeholder={placeholder ? placeholder : \"local faucet\"}\n        prefix={blockie}\n        value={address}\n        onChange={e => updateAddress(e.target.value)}\n        suffix={\n          <Tooltip title=\"Faucet: Send local ether to an address.\">\n            <Button\n              onClick={() => {\n                tx({\n                  to: address,\n                  value: utils.parseEther(\"0.01\"),\n                });\n                setAddress(\"\");\n              }}\n              shape=\"circle\"\n              icon={<SendOutlined />}\n            />\n            <Wallet\n              color=\"#888888\"\n              provider={localProvider}\n              ensProvider={ensProvider}\n              price={price}\n              address={faucetAddress}\n            />\n          </Tooltip>\n        }\n      />\n    </span>\n  );\n}\n","import { PageHeader } from \"antd\";\nimport React from \"react\";\n\n// displays a page header\n\nexport default function Header() {\n  return (\n      <PageHeader\n        title=\"Orcs!\"\n        subTitle=\"orcs orcs orcs orcs orcs...\"\n      />\n  );\n}\n","import { useCallback, useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\n\nconst createProvider = async url => {\n  const p = new ethers.providers.StaticJsonRpcProvider(url);\n\n  await p.ready;\n\n  return p;\n};\n\nexport default function useStaticJsonRPC(urlArray) {\n  const [provider, setProvider] = useState(null);\n\n  const handleProviders = useCallback(async () => {\n    try {\n      const p = await Promise.race(urlArray.map(createProvider));\n      const _p = await p;\n\n      setProvider(_p);\n    } catch (error) {\n      // todo: show notification error about provider issues\n      console.log(error);\n    }\n  });\n\n  useEffect(() => {\n    handleProviders();\n  }, [JSON.stringify(urlArray)]);\n\n  return provider;\n}\n","const contractListPromise = import(\"../contracts/hardhat_contracts.json\");\r\n// @ts-ignore\r\nconst externalContractsPromise = import(\"../contracts/external_contracts\");\r\n\r\nexport const loadAppContracts = async () => {\r\n  const config = {};\r\n  config.deployedContracts = (await contractListPromise).default ?? {};\r\n  config.externalContracts = (await externalContractsPromise).default ?? {};\r\n  return config;\r\n};\r\n","import { RetweetOutlined, SettingOutlined } from \"@ant-design/icons\";\nimport { ChainId, Fetcher, Percent, Token, TokenAmount, Trade, WETH } from \"@uniswap/sdk\";\nimport { abi as IUniswapV2Router02ABI } from \"@uniswap/v2-periphery/build/IUniswapV2Router02.json\";\nimport {\n  Button,\n  Card,\n  Descriptions,\n  Divider,\n  Drawer,\n  InputNumber,\n  Modal,\n  notification,\n  Row,\n  Select,\n  Space,\n  Tooltip,\n  Typography,\n} from \"antd\";\nimport { useBlockNumber, usePoller } from \"eth-hooks\";\nimport { ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDebounce } from \"../hooks\";\n\nconst { Option } = Select;\nconst { Text } = Typography;\n\nexport const ROUTER_ADDRESS = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\n\nexport const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n\nconst erc20Abi = [\n  \"function balanceOf(address owner) view returns (uint256)\",\n  \"function approve(address _spender, uint256 _value) public returns (bool success)\",\n  \"function allowance(address _owner, address _spender) public view returns (uint256 remaining)\",\n];\n\nconst makeCall = async (callName, contract, args, metadata = {}) => {\n  if (contract[callName]) {\n    let result;\n    if (args) {\n      result = await contract[callName](...args, metadata);\n    } else {\n      result = await contract[callName]();\n    }\n    return result;\n  }\n  return undefined;\n  console.log(\"no call of that name!\");\n};\n\nconst defaultToken = \"ETH\";\nconst defaultTokenOut = \"DAI\";\nconst defaultSlippage = \"0.5\";\nconst defaultTimeLimit = 60 * 10;\n\nconst tokenListToObject = array =>\n  array.reduce((obj, item) => {\n    obj[item.symbol] = new Token(item.chainId, item.address, item.decimals, item.symbol, item.name);\n    return obj;\n  }, {});\n\nfunction Swap({ selectedProvider, tokenListURI }) {\n  const [tokenIn, setTokenIn] = useState(defaultToken);\n  const [tokenOut, setTokenOut] = useState(defaultTokenOut);\n  const [exact, setExact] = useState();\n  const [amountIn, setAmountIn] = useState();\n  const [amountInMax, setAmountInMax] = useState();\n  const [amountOut, setAmountOut] = useState();\n  const [amountOutMin, setAmountOutMin] = useState();\n  const [trades, setTrades] = useState();\n  const [routerAllowance, setRouterAllowance] = useState();\n  const [balanceIn, setBalanceIn] = useState();\n  const [balanceOut, setBalanceOut] = useState();\n  const [slippageTolerance, setSlippageTolerance] = useState(\n    new Percent(Math.round(defaultSlippage * 100).toString(), \"10000\"),\n  );\n  const [timeLimit, setTimeLimit] = useState(defaultTimeLimit);\n  const [swapping, setSwapping] = useState(false);\n  const [approving, setApproving] = useState(false);\n  const [settingsVisible, setSettingsVisible] = useState(false);\n  const [swapModalVisible, setSwapModalVisible] = useState(false);\n\n  const [tokenList, setTokenList] = useState([]);\n  const [tokens, setTokens] = useState();\n  const [invertPrice, setInvertPrice] = useState(false);\n\n  const blockNumber = useBlockNumber(selectedProvider, 3000);\n\n  const signer = selectedProvider.getSigner();\n  const routerContract = new ethers.Contract(ROUTER_ADDRESS, IUniswapV2Router02ABI, signer);\n\n  const _tokenListUri = tokenListURI || \"https://gateway.ipfs.io/ipns/tokens.uniswap.org\";\n\n  const debouncedAmountIn = useDebounce(amountIn, 500);\n  const debouncedAmountOut = useDebounce(amountOut, 500);\n\n  const activeChainId = process.env.REACT_APP_NETWORK === \"kovan\" ? ChainId.KOVAN : ChainId.MAINNET;\n\n  useEffect(() => {\n    const getTokenList = async () => {\n      console.log(_tokenListUri);\n      try {\n        const tokenListResponse = await fetch(_tokenListUri);\n        const tokenListJson = await tokenListResponse.json();\n        const filteredTokens = tokenListJson.tokens.filter(function (t) {\n          return t.chainId === activeChainId;\n        });\n        const ethToken = WETH[activeChainId];\n        ethToken.name = \"Ethereum\";\n        ethToken.symbol = \"ETH\";\n        ethToken.logoURI =\n          \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png\";\n        const _tokenList = [ethToken, ...filteredTokens];\n        setTokenList(_tokenList);\n        const _tokens = tokenListToObject(_tokenList);\n        setTokens(_tokens);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    getTokenList();\n  }, [tokenListURI]);\n\n  const getTrades = async () => {\n    if (tokenIn && tokenOut && (amountIn || amountOut)) {\n      const pairs = arr => arr.map((v, i) => arr.slice(i + 1).map(w => [v, w])).flat();\n\n      const baseTokens = tokenList\n        .filter(function (t) {\n          return [\"DAI\", \"USDC\", \"USDT\", \"COMP\", \"ETH\", \"MKR\", \"LINK\", tokenIn, tokenOut].includes(t.symbol);\n        })\n        .map(el => {\n          return new Token(el.chainId, el.address, el.decimals, el.symbol, el.name);\n        });\n\n      const listOfPairwiseTokens = pairs(baseTokens);\n\n      const getPairs = async list => {\n        const listOfPromises = list.map(item => Fetcher.fetchPairData(item[0], item[1], selectedProvider));\n        return Promise.all(listOfPromises.map(p => p.catch(() => undefined)));\n      };\n\n      const listOfPairs = await getPairs(listOfPairwiseTokens);\n\n      let bestTrade;\n\n      if (exact === \"in\") {\n        setAmountInMax();\n        bestTrade = Trade.bestTradeExactIn(\n          listOfPairs.filter(item => item),\n          new TokenAmount(tokens[tokenIn], ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals)),\n          tokens[tokenOut],\n          { maxNumResults: 3, maxHops: 1 },\n        );\n        if (bestTrade[0]) {\n          setAmountOut(bestTrade[0].outputAmount.toSignificant(6));\n        } else {\n          setAmountOut();\n        }\n      } else if (exact === \"out\") {\n        setAmountOutMin();\n        bestTrade = Trade.bestTradeExactOut(\n          listOfPairs.filter(item => item),\n          tokens[tokenIn],\n          new TokenAmount(tokens[tokenOut], ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals)),\n          { maxNumResults: 3, maxHops: 1 },\n        );\n        if (bestTrade[0]) {\n          setAmountIn(bestTrade[0].inputAmount.toSignificant(6));\n        } else {\n          setAmountIn();\n        }\n      }\n\n      setTrades(bestTrade);\n\n      console.log(bestTrade);\n    }\n  };\n\n  useEffect(() => {\n    getTrades();\n  }, [tokenIn, tokenOut, debouncedAmountIn, debouncedAmountOut, slippageTolerance, selectedProvider]);\n\n  useEffect(() => {\n    if (trades && trades[0]) {\n      if (exact === \"in\") {\n        setAmountOutMin(trades[0].minimumAmountOut(slippageTolerance));\n      } else if (exact === \"out\") {\n        setAmountInMax(trades[0].maximumAmountIn(slippageTolerance));\n      }\n    }\n  }, [slippageTolerance, amountIn, amountOut, trades]);\n\n  const getBalance = async (_token, _account, _contract) => {\n    let newBalance;\n    if (_token === \"ETH\") {\n      newBalance = await selectedProvider.getBalance(_account);\n    } else {\n      newBalance = await makeCall(\"balanceOf\", _contract, [_account]);\n    }\n    return newBalance;\n  };\n\n  const getAccountInfo = async () => {\n    if (tokens) {\n      const accountList = await selectedProvider.listAccounts();\n\n      if (tokenIn) {\n        const tempContractIn = new ethers.Contract(tokens[tokenIn].address, erc20Abi, selectedProvider);\n        const newBalanceIn = await getBalance(tokenIn, accountList[0], tempContractIn);\n        setBalanceIn(newBalanceIn);\n\n        let allowance;\n\n        if (tokenIn === \"ETH\") {\n          setRouterAllowance();\n        } else {\n          allowance = await makeCall(\"allowance\", tempContractIn, [accountList[0], ROUTER_ADDRESS]);\n          setRouterAllowance(allowance);\n        }\n      }\n\n      if (tokenOut) {\n        const tempContractOut = new ethers.Contract(tokens[tokenOut].address, erc20Abi, selectedProvider);\n        const newBalanceOut = await getBalance(tokenOut, accountList[0], tempContractOut);\n        setBalanceOut(newBalanceOut);\n      }\n    }\n  };\n\n  usePoller(getAccountInfo, 6000);\n\n  const route = trades\n    ? trades.length > 0\n      ? trades[0].route.path.map(function (item) {\n          return item.symbol;\n        })\n      : []\n    : [];\n\n  const updateRouterAllowance = async newAllowance => {\n    setApproving(true);\n    try {\n      const tempContract = new ethers.Contract(tokens[tokenIn].address, erc20Abi, signer);\n      const result = await makeCall(\"approve\", tempContract, [ROUTER_ADDRESS, newAllowance]);\n      console.log(result);\n      setApproving(false);\n      return true;\n    } catch (e) {\n      notification.open({\n        message: \"Approval unsuccessful\",\n        description: `Error: ${e.message}`,\n      });\n    }\n  };\n\n  const approveRouter = async () => {\n    const approvalAmount =\n      exact === \"in\"\n        ? ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals))\n        : amountInMax.raw.toString();\n    console.log(approvalAmount);\n    const approval = updateRouterAllowance(approvalAmount);\n    if (approval) {\n      notification.open({\n        message: \"Token transfer approved\",\n        description: `You can now swap up to ${amountIn} ${tokenIn}`,\n      });\n    }\n  };\n\n  const removeRouterAllowance = async () => {\n    const approvalAmount = ethers.utils.hexlify(0);\n    console.log(approvalAmount);\n    const removal = updateRouterAllowance(approvalAmount);\n    if (removal) {\n      notification.open({\n        message: \"Token approval removed\",\n        description: `The router is no longer approved for ${tokenIn}`,\n      });\n    }\n  };\n\n  const executeSwap = async () => {\n    setSwapping(true);\n    try {\n      let args;\n      const metadata = {};\n\n      let call;\n      const deadline = Math.floor(Date.now() / 1000) + timeLimit;\n      const path = trades[0].route.path.map(function (item) {\n        return item.address;\n      });\n      console.log(path);\n      const accountList = await selectedProvider.listAccounts();\n      const address = accountList[0];\n\n      if (exact === \"in\") {\n        const _amountIn = ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals));\n        const _amountOutMin = ethers.utils.hexlify(ethers.BigNumber.from(amountOutMin.raw.toString()));\n        if (tokenIn === \"ETH\") {\n          call = \"swapExactETHForTokens\";\n          args = [_amountOutMin, path, address, deadline];\n          metadata.value = _amountIn;\n        } else {\n          call = tokenOut === \"ETH\" ? \"swapExactTokensForETH\" : \"swapExactTokensForTokens\";\n          args = [_amountIn, _amountOutMin, path, address, deadline];\n        }\n      } else if (exact === \"out\") {\n        const _amountOut = ethers.utils.hexlify(\n          ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals),\n        );\n        const _amountInMax = ethers.utils.hexlify(ethers.BigNumber.from(amountInMax.raw.toString()));\n        if (tokenIn === \"ETH\") {\n          call = \"swapETHForExactTokens\";\n          args = [_amountOut, path, address, deadline];\n          metadata.value = _amountInMax;\n        } else {\n          call = tokenOut === \"ETH\" ? \"swapTokensForExactETH\" : \"swapTokensForExactTokens\";\n          args = [_amountOut, _amountInMax, path, address, deadline];\n        }\n      }\n      console.log(call, args, metadata);\n      const result = await makeCall(call, routerContract, args, metadata);\n      console.log(result);\n      notification.open({\n        message: \"Swap complete 🦄\",\n        description: (\n          <>\n            <Text>{`Swapped ${tokenIn} for ${tokenOut}, transaction: `}</Text>\n            <Text copyable>{result.hash}</Text>\n          </>\n        ),\n      });\n      setSwapping(false);\n    } catch (e) {\n      console.log(e);\n      setSwapping(false);\n      notification.open({\n        message: \"Swap unsuccessful\",\n        description: `Error: ${e.message}`,\n      });\n    }\n  };\n\n  const showSwapModal = () => {\n    setSwapModalVisible(true);\n  };\n\n  const handleSwapModalOk = () => {\n    setSwapModalVisible(false);\n    executeSwap();\n  };\n\n  const handleSwapModalCancel = () => {\n    setSwapModalVisible(false);\n  };\n\n  const insufficientBalance = balanceIn\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)) < amountIn\n    : null;\n  const inputIsToken = tokenIn !== \"ETH\";\n  const insufficientAllowance = !inputIsToken\n    ? false\n    : routerAllowance\n    ? parseFloat(ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals)) < amountIn\n    : null;\n  const formattedBalanceIn = balanceIn\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)).toPrecision(6)\n    : null;\n  const formattedBalanceOut = balanceOut\n    ? parseFloat(ethers.utils.formatUnits(balanceOut, tokens[tokenOut].decimals)).toPrecision(6)\n    : null;\n\n  const metaIn =\n    tokens && tokenList && tokenIn\n      ? tokenList.filter(function (t) {\n          return t.address === tokens[tokenIn].address;\n        })[0]\n      : null;\n  const metaOut =\n    tokens && tokenList && tokenOut\n      ? tokenList.filter(function (t) {\n          return t.address === tokens[tokenOut].address;\n        })[0]\n      : null;\n\n  const cleanIpfsURI = uri => {\n    try {\n      return uri.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\");\n    } catch (e) {\n      console.log(e, uri);\n      return uri;\n    }\n  };\n\n  const logoIn = metaIn ? cleanIpfsURI(metaIn.logoURI) : null;\n  const logoOut = metaOut ? cleanIpfsURI(metaOut.logoURI) : null;\n\n  const rawPrice = trades && trades[0] ? trades[0].executionPrice : null;\n  const price = rawPrice ? rawPrice.toSignificant(7) : null;\n  const priceDescription = rawPrice\n    ? invertPrice\n      ? `${rawPrice.invert().toSignificant(7)} ${tokenIn} per ${tokenOut}`\n      : `${price} ${tokenOut} per ${tokenIn}`\n    : null;\n\n  const priceWidget = (\n    <Space>\n      <Text type=\"secondary\">{priceDescription}</Text>\n      <Button\n        type=\"text\"\n        onClick={() => {\n          setInvertPrice(!invertPrice);\n        }}\n      >\n        <RetweetOutlined />\n      </Button>\n    </Space>\n  );\n\n  const swapModal = (\n    <Modal title=\"Confirm swap\" visible={swapModalVisible} onOk={handleSwapModalOk} onCancel={handleSwapModalCancel}>\n      <Row>\n        <Space>\n          <img src={logoIn} alt={tokenIn} width=\"30\" />\n          {amountIn}\n          {tokenIn}\n        </Space>\n      </Row>\n      <Row justify=\"center\" align=\"middle\" style={{ width: 30 }}>\n        <span>↓</span>\n      </Row>\n      <Row>\n        <Space>\n          <img src={logoOut} alt={tokenOut} width=\"30\" />\n          {amountOut}\n          {tokenOut}\n        </Space>\n      </Row>\n      <Divider />\n      <Row>{priceWidget}</Row>\n      <Row>\n        {trades && ((amountOutMin && exact === \"in\") || (amountInMax && exact === \"out\"))\n          ? exact === \"in\"\n            ? `Output is estimated. You will receive at least ${amountOutMin.toSignificant(\n                6,\n              )} ${tokenOut} or the transaction will revert.`\n            : `Input is estimated. You will sell at most ${amountInMax.toSignificant(\n                6,\n              )} ${tokenIn} or the transaction will revert.`\n          : null}\n      </Row>\n    </Modal>\n  );\n\n  return (\n    <Card\n      title={\n        <Space>\n          <img src=\"https://ipfs.io/ipfs/QmXttGpZrECX5qCyXbBQiqgQNytVGeZW5Anewvh2jc4psg\" width=\"40\" alt=\"uniswapLogo\" />\n          <Typography>Uniswapper</Typography>\n        </Space>\n      }\n      extra={\n        <Button\n          type=\"text\"\n          onClick={() => {\n            setSettingsVisible(true);\n          }}\n        >\n          <SettingOutlined />\n        </Button>\n      }\n    >\n      <Space direction=\"vertical\">\n        <Row justify=\"center\" align=\"middle\">\n          <Card\n            size=\"small\"\n            type=\"inner\"\n            title={`From${exact === \"out\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\n            extra={\n              <>\n                <img src={logoIn} alt={tokenIn} width=\"30\" />\n                <Button\n                  type=\"link\"\n                  onClick={() => {\n                    setAmountOut();\n                    setAmountIn(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals));\n                    setAmountOutMin();\n                    setAmountInMax();\n                    setExact(\"in\");\n                  }}\n                >\n                  {formattedBalanceIn}\n                </Button>\n              </>\n            }\n            style={{ width: 400, textAlign: \"left\" }}\n          >\n            <InputNumber\n              style={{ width: \"160px\" }}\n              min={0}\n              size=\"large\"\n              value={amountIn}\n              onChange={e => {\n                setAmountOut();\n                setTrades();\n                setAmountIn(e);\n                setExact(\"in\");\n              }}\n            />\n            <Select\n              showSearch\n              value={tokenIn}\n              style={{ width: \"120px\" }}\n              size=\"large\"\n              bordered={false}\n              defaultValue={defaultToken}\n              onChange={value => {\n                console.log(value);\n                if (value === tokenOut) {\n                  console.log(\"switch!\", tokenIn);\n                  setTokenOut(tokenIn);\n                  setAmountOut(amountIn);\n                  setBalanceOut(balanceIn);\n                }\n                setTokenIn(value);\n                setTrades();\n                setAmountIn();\n                setExact(\"out\");\n                setBalanceIn();\n              }}\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n              optionFilterProp=\"children\"\n            >\n              {tokenList.map(token => (\n                <Option key={token.symbol} value={token.symbol}>\n                  {token.symbol}\n                </Option>\n              ))}\n            </Select>\n          </Card>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Tooltip title={route.join(\"->\")}>\n            <span>↓</span>\n          </Tooltip>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Card\n            size=\"small\"\n            type=\"inner\"\n            title={`To${exact === \"in\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\n            extra={\n              <>\n                <img src={logoOut} width=\"30\" alt={tokenOut} />\n                <Button type=\"text\">{formattedBalanceOut}</Button>\n              </>\n            }\n            style={{ width: 400, textAlign: \"left\" }}\n          >\n            <InputNumber\n              style={{ width: \"160px\" }}\n              size=\"large\"\n              min={0}\n              value={amountOut}\n              onChange={e => {\n                setAmountOut(e);\n                setAmountIn();\n                setTrades();\n                setExact(\"out\");\n              }}\n            />\n            <Select\n              showSearch\n              value={tokenOut}\n              style={{ width: \"120px\" }}\n              size=\"large\"\n              bordered={false}\n              onChange={value => {\n                console.log(value, tokenIn, tokenOut);\n                if (value === tokenIn) {\n                  console.log(\"switch!\", tokenOut);\n                  setTokenIn(tokenOut);\n                  setAmountIn(amountOut);\n                  setBalanceIn(balanceOut);\n                }\n                setTokenOut(value);\n                setExact(\"in\");\n                setAmountOut();\n                setTrades();\n                setBalanceOut();\n              }}\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n              optionFilterProp=\"children\"\n            >\n              {tokenList.map(token => (\n                <Option key={token.symbol} value={token.symbol}>\n                  {token.symbol}\n                </Option>\n              ))}\n            </Select>\n          </Card>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          {priceDescription ? priceWidget : null}\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Space>\n            {inputIsToken ? (\n              <Button size=\"large\" loading={approving} disabled={!insufficientAllowance} onClick={approveRouter}>\n                {!insufficientAllowance && amountIn && amountOut ? \"Approved\" : \"Approve\"}\n              </Button>\n            ) : null}\n            <Button\n              size=\"large\"\n              loading={swapping}\n              disabled={insufficientAllowance || insufficientBalance || !amountIn || !amountOut}\n              onClick={showSwapModal}\n            >\n              {insufficientBalance ? \"Insufficient balance\" : \"Swap!\"}\n            </Button>\n            {swapModal}\n          </Space>\n        </Row>\n      </Space>\n      <Drawer\n        visible={settingsVisible}\n        onClose={() => {\n          setSettingsVisible(false);\n        }}\n        width={500}\n      >\n        <Descriptions title=\"Details\" column={1} style={{ textAlign: \"left\" }}>\n          <Descriptions.Item label=\"blockNumber\">{blockNumber}</Descriptions.Item>\n          <Descriptions.Item label=\"routerAllowance\">\n            <Space>\n              {routerAllowance ? ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals) : null}\n              {routerAllowance > 0 ? <Button onClick={removeRouterAllowance}>Remove Allowance</Button> : null}\n            </Space>\n          </Descriptions.Item>\n          <Descriptions.Item label=\"route\">{route.join(\"->\")}</Descriptions.Item>\n          <Descriptions.Item label=\"exact\">{exact}</Descriptions.Item>\n          <Descriptions.Item label=\"bestPrice\">\n            {trades ? (trades.length > 0 ? trades[0].executionPrice.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"nextMidPrice\">\n            {trades ? (trades.length > 0 ? trades[0].nextMidPrice.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"priceImpact\">\n            {trades ? (trades.length > 0 ? trades[0].priceImpact.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"slippageTolerance\">\n            <InputNumber\n              defaultValue={defaultSlippage}\n              min={0}\n              max={100}\n              precision={2}\n              formatter={value => `${value}%`}\n              parser={value => value.replace(\"%\", \"\")}\n              onChange={value => {\n                console.log(value);\n\n                const slippagePercent = new Percent(Math.round(value * 100).toString(), \"10000\");\n                setSlippageTolerance(slippagePercent);\n              }}\n            />\n          </Descriptions.Item>\n          <Descriptions.Item label=\"amountInMax\">{amountInMax ? amountInMax.toExact() : null}</Descriptions.Item>\n          <Descriptions.Item label=\"amountOutMin\">{amountOutMin ? amountOutMin.toExact() : null}</Descriptions.Item>\n          <Descriptions.Item label=\"timeLimitInSeconds\">\n            <InputNumber\n              min={0}\n              max={3600}\n              defaultValue={defaultTimeLimit}\n              onChange={value => {\n                console.log(value);\n                setTimeLimit(value);\n              }}\n            />\n          </Descriptions.Item>\n        </Descriptions>\n      </Drawer>\n    </Card>\n  );\n}\n\nexport default Swap;\n","import { DownloadOutlined, EditOutlined, SendOutlined } from \"@ant-design/icons\";\nimport { Timeline, Typography } from \"antd\";\nimport React from \"react\";\nimport Blockies from \"react-blockies\";\n\nconst { Text } = Typography;\n\n// displays a timeline for scaffold-eth usage\n\nexport default function TimelineDisplay(props) {\n  return (\n    <Timeline mode=\"right\">\n      <Timeline.Item dot=\"💾\">\n        <Text delete>\n          Clone and Install from the{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/austintgriffith/scaffold-eth\">\n            github repo\n          </a>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⚛️\">\n        <Text delete>\n          Start your frontend app with: <Text strong>yarn start</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⛓\">\n        <Text delete={props.chainIsUp}>\n          Start your local blockchain with: <Text strong>yarn run chain</Text> (and refresh)\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📝\">\n        <Text delete={props.hasOwner}>\n          Compile and deploy your smart contract: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🤡\">\n        <Text delete={props.isNotSmoort}>\n          Fix error in <Text code>SmartContractWallet.sol</Text> then: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot={<SendOutlined style={{ fontSize: \"16px\" }} />} color={props.hasEther ? \"green\" : \"blue\"}>\n        <Text delete={props.hasEther}>\n          Send test ether to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address using\n          (bottom left) faucet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<DownloadOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.contractHasEther ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.contractHasEther}>\n          Deposit some funds into your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<EditOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.amOwnerOfContract ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.amOwnerOfContract}>\n          Set <b>owner</b> of your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"☢️\">\n        <Text>\n          Yikes, anyone can take ownership of <Text code>SmartContractWallet.sol</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🔬\">\n        <Text>\n          Test your contract with <Text code>buidler/test/myTest.js</Text> then:\n          <Text strong>yarn run test</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🚀\">\n        <Text>\n          Build something awesome with 🏗 <a href=\"https://github.com/austintgriffith/scaffold-eth\">scaffold-eth</a> and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://twitter.com/austingriffith\">\n            @ me\n          </a>\n          !\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📖\">\n        <Text>\n          Read more about{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ethereum.org/developers\">\n            Ethereum\n          </a>\n          ,{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://solidity.readthedocs.io/en/develop/contracts.html\">\n            Solidity\n          </a>\n          , and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://buidler.dev/tutorial\">\n            Buidler\n          </a>\n        </Text>\n      </Timeline.Item>\n    </Timeline>\n  );\n}\n","import { utils, ethers } from \"ethers\";\nimport { Button, Input, Form, Select, InputNumber, Table, Radio } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport { useContractLoader, useOnBlock } from \"eth-hooks\";\nimport { NETWORKS } from \"../constants\";\nimport { Transactor } from \"../helpers\";\n\n/*\nThis is a component for bridging between L1 & L2\nCurrently it supports Testnet deposits for Arbitrum & Optimism\n\n __          _______ _____\n \\ \\        / /_   _|  __ \\\n  \\ \\  /\\  / /  | | | |__) |\n   \\ \\/  \\/ /   | | |  ___/\n    \\  /\\  /   _| |_| |\n     \\/  \\/   |_____|_|\n\n\n*/\n\nexport default function L2ArbitrumBridge({ address, userSigner }) {\n  const [L1EthBalance, setL1EthBalance] = useState(\"...\");\n  const [L2EthBalance, setL2EthBalance] = useState(\"...\");\n  const [L1Provider, setL1Provider] = useState(\"\");\n  const [L2Provider, setL2Provider] = useState(\"\");\n  const [rollup, setRollup] = useState(\"arbitrum\");\n  const [environment, setEnvironment] = useState(\"test\");\n\n  const rollupConfig = {\n    arbitrum: {\n      test: { L1: NETWORKS.rinkeby, L2: NETWORKS.rinkebyArbitrum },\n      main: { L1: NETWORKS.mainnet, L2: NETWORKS.arbitrum },\n      local: { L1: NETWORKS.localArbitrumL1, L2: NETWORKS.localArbitrum },\n    },\n    optimism: {\n      test: { L1: NETWORKS.kovan, L2: NETWORKS.kovanOptimism },\n      local: { L1: NETWORKS.localOptimismL1, L2: NETWORKS.localOptimism },\n    },\n  };\n\n  const activeConfig = rollupConfig[rollup][environment];\n\n  const selectedChainId =\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\n\n  const tx = Transactor(userSigner);\n\n  useEffect(() => {\n    async function setProviders() {\n      const L1 = activeConfig.L1;\n      const L2 = activeConfig.L2;\n      setL1Provider(new ethers.providers.StaticJsonRpcProvider(L1.rpcUrl));\n      setL2Provider(new ethers.providers.StaticJsonRpcProvider(L2.rpcUrl));\n      setL1EthBalance(\"...\");\n      setL2EthBalance(\"...\");\n    }\n    setProviders();\n  }, [rollup]);\n\n  const contracts = useContractLoader(userSigner, { externalContracts: L1BridgeMetadata, hardhatContracts: {} });\n\n  useOnBlock(L1Provider, async () => {\n    console.log(`⛓ A new mainnet block is here: ${L1Provider._lastBlockNumber}`);\n    const yourL1Balance = await L1Provider.getBalance(address);\n    setL1EthBalance(yourL1Balance ? ethers.utils.formatEther(yourL1Balance) : \"...\");\n    const yourL2Balance = await L2Provider.getBalance(address);\n    setL2EthBalance(yourL2Balance ? ethers.utils.formatEther(yourL2Balance) : \"...\");\n  });\n\n  const { Option } = Select;\n  const formItemLayout = {\n    labelCol: {\n      xs: { span: 24 },\n      sm: { span: 8 },\n    },\n    wrapperCol: {\n      xs: { span: 24 },\n      sm: { span: 12 },\n    },\n  };\n  const tailFormItemLayout = {\n    wrapperCol: {\n      xs: {\n        span: 24,\n        offset: 0,\n      },\n      sm: {\n        span: 12,\n        offset: 8,\n      },\n    },\n  };\n\n  const columns = [\n    {\n      title: \"\",\n      dataIndex: \"token\",\n      key: \"token\",\n      align: \"center\",\n    },\n    {\n      title: `${activeConfig.L1.name} L1 Balance`,\n      dataIndex: \"l1\",\n      key: \"l1\",\n      align: \"center\",\n    },\n    {\n      title: `${activeConfig.L1.name} ${rollup} Balance`,\n      dataIndex: \"l2\",\n      key: \"l2\",\n      align: \"center\",\n    },\n  ];\n\n  const data = [\n    {\n      key: \"1\",\n      token: \"ETH\",\n      l1: \"Ξ\" + L1EthBalance,\n      l2: \"Ξ\" + L2EthBalance,\n    },\n  ];\n\n  const [form] = Form.useForm();\n\n  const onAssetChange = value => {\n    console.log(value);\n  };\n\n  async function onFinish(values) {\n    console.log(contracts);\n    console.log(values.amount.toString());\n    console.log(rollup);\n    let newTx;\n    try {\n      if (rollup === \"arbitrum\") {\n        newTx = await tx(\n          contracts.Inbox.depositEth(1_300_000, {\n            value: utils.parseEther(values.amount.toString()),\n            gasLimit: 300000,\n          }),\n        );\n      } else if (rollup === \"optimism\") {\n        newTx = await tx(\n          contracts.OVM_L1StandardBridge.depositETH(1_300_000, \"0x\", {\n            value: utils.parseEther(values.amount.toString()),\n          }),\n        );\n      }\n      await newTx.wait();\n      console.log(\"woop!\");\n    } catch (e) {\n      console.log(e);\n      console.log(\"something went wrong!\");\n    }\n  }\n\n  const onReset = () => {\n    form.resetFields();\n  };\n\n  const wrongNetwork = selectedChainId !== activeConfig.L1.chainId;\n\n  return (\n    <div style={{ padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\n        <h2>Welcome to the L2 Deposit Bridge!</h2>\n        <Radio.Group\n          value={rollup}\n          onChange={e => {\n            setRollup(e.target.value);\n          }}\n          style={{ marginBottom: 10 }}\n        >\n          <Radio.Button value=\"arbitrum\">Arbitrum</Radio.Button>\n          <Radio.Button value=\"optimism\">Optimism</Radio.Button>\n        </Radio.Group>\n\n        <Table columns={columns} dataSource={data} pagination={false} style={{ marginBottom: 20 }} />\n\n        <Form\n          {...formItemLayout}\n          form={form}\n          name=\"control-hooks\"\n          onFinish={onFinish}\n          initialValues={{ assetType: \"eth\" }}\n        >\n          <Form.Item\n            name=\"assetType\"\n            label=\"Select Asset Type\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <Select placeholder=\"Select an asset type\" onChange={onAssetChange} allowClear>\n              <Option value=\"eth\">ETH</Option>\n              <Option disabled value=\"erc20\">\n                ERC-20\n              </Option>\n            </Select>\n          </Form.Item>\n          <Form.Item name=\"address\" label=\"Address\">\n            <Input disabled placeholder={address} />\n          </Form.Item>\n          <Form.Item\n            name=\"amount\"\n            label=\"Amount to bridge\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <InputNumber />\n          </Form.Item>\n          <Form.Item {...tailFormItemLayout}>\n            <Button type=\"primary\" htmlType=\"submit\" disabled={wrongNetwork}>\n              {wrongNetwork ? `Switch wallet to ${activeConfig.L1.name}` : \"Deposit\"}\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    </div>\n  );\n}\n\n// Arbitrum Inbox https://rinkeby.etherscan.io/address/0xa157dc79ca26d69c3b1282d03ec42bdee2790a8f#code\nconst ArbitrumInboxABI = [\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" },\n      { indexed: false, internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"InboxMessageDelivered\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" }],\n    name: \"InboxMessageDeliveredFromOrigin\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: false, internalType: \"address\", name: \"newSource\", type: \"address\" }],\n    name: \"WhitelistSourceUpdated\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"bridge\",\n    outputs: [{ internalType: \"contract IBridge\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"l2CallValue\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" },\n      { internalType: \"address\", name: \"excessFeeRefundAddress\", type: \"address\" },\n      { internalType: \"address\", name: \"callValueRefundAddress\", type: \"address\" },\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"createRetryableTicket\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" }],\n    name: \"depositEth\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"contract IBridge\", name: \"_bridge\", type: \"address\" },\n      { internalType: \"address\", name: \"_whitelist\", type: \"address\" },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"isMaster\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendContractTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendL1FundedContractTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendL1FundedUnsignedTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\n    name: \"sendL2Message\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\n    name: \"sendL2MessageFromOrigin\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendUnsignedTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"newSource\", type: \"address\" }],\n    name: \"updateWhitelistSource\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"whitelist\",\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n// https://github.com/ethereum-optimism/optimism/blob/2bd49730fa8d2c10953873f0ccc792198a49d5c9/packages/contracts/contracts/optimistic-ethereum/iOVM/bridge/tokens/iOVM_L1StandardBridge.sol\nconst OVM_L1StandardBridgeABI = [\n  \"function depositETH(uint32 _l2Gas,bytes calldata _data) external payable\",\n  \"function depositETHTo(address _to,uint32 _l2Gas,bytes calldata _data) external payable\",\n  \"function finalizeETHWithdrawal (address _from,address _to,uint _amount,bytes calldata _data) external\",\n];\n\nconst L1BridgeMetadata = {\n  // Arbitrium Contract's\n  44010: {\n    contracts: {\n      Inbox: {\n        address: \"0xA4d796Ad4e79aFB703340a596AEd88f8a5924183\",\n        abi: ArbitrumInboxABI,\n      },\n    },\n  },\n  4: {\n    contracts: {\n      Inbox: {\n        address: \"0x578bade599406a8fe3d24fd7f7211c0911f5b29e\",\n        abi: ArbitrumInboxABI,\n      },\n    },\n  },\n  // Optimism Contract's\n  31337: {\n    contracts: {\n      OVM_L1StandardBridge: {\n        address: \"0x998abeb3E57409262aE5b751f60747921B33613E\",\n        abi: OVM_L1StandardBridgeABI,\n      },\n    },\n  },\n  42: {\n    contracts: {\n      OVM_L1StandardBridge: {\n        address: \"0x22F24361D548e5FaAfb36d1437839f080363982B\",\n        abi: OVM_L1StandardBridgeABI,\n      },\n    },\n  },\n};\n","import { Alert, Button } from \"antd\";\nimport React from \"react\";\nimport { NETWORK } from \"../constants\";\n\nfunction NetworkDisplay({\n  NETWORKCHECK,\n  localChainId,\n  selectedChainId,\n  targetNetwork,\n  USE_NETWORK_SELECTOR,\n  logoutOfWeb3Modal,\n}) {\n  let networkDisplay = \"\";\n  if (NETWORKCHECK && localChainId && selectedChainId && localChainId !== selectedChainId) {\n    const networkSelected = NETWORK(selectedChainId);\n    const networkLocal = NETWORK(localChainId);\n    if (selectedChainId === 1337 && localChainId === 31337) {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network ID\"\n            description={\n              <div>\n                You have <b>chain id 1337</b> for localhost and you need to change it to <b>31337</b> to work with\n                HardHat.\n                <div>(MetaMask -&gt; Settings -&gt; Networks -&gt; Chain ID -&gt; 31337)</div>\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    } else {\n      const showLogout = networkSelected && networkSelected.name !== \"localhost\";\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network\"\n            description={\n              <div>\n                You have <b>{networkSelected && networkSelected.name}</b> selected and you need to be on{\" \"}\n                <Button\n                  onClick={async () => {\n                    const ethereum = window.ethereum;\n                    const data = [\n                      {\n                        chainId: \"0x\" + targetNetwork.chainId.toString(16),\n                        chainName: targetNetwork.name,\n                        nativeCurrency: targetNetwork.nativeCurrency,\n                        rpcUrls: [targetNetwork.rpcUrl],\n                        blockExplorerUrls: [targetNetwork.blockExplorer],\n                      },\n                    ];\n                    console.log(\"data\", data);\n\n                    let switchTx;\n                    // https://docs.metamask.io/guide/rpc-api.html#other-rpc-methods\n                    try {\n                      switchTx = await ethereum.request({\n                        method: \"wallet_switchEthereumChain\",\n                        params: [{ chainId: data[0].chainId }],\n                      });\n                    } catch (switchError) {\n                      // not checking specific error code, because maybe we're not using MetaMask\n                      try {\n                        switchTx = await ethereum.request({\n                          method: \"wallet_addEthereumChain\",\n                          params: data,\n                        });\n                      } catch (addError) {\n                        // handle \"add\" error\n                      }\n                    }\n\n                    if (switchTx) {\n                      console.log(switchTx);\n                    }\n                  }}\n                >\n                  <b>{networkLocal && networkLocal.name}</b>\n                </Button>\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    }\n  } else {\n    networkDisplay = USE_NETWORK_SELECTOR ? null : (\n      <div style={{ zIndex: -1, position: \"absolute\", right: 154, top: 28, padding: 16, color: targetNetwork.color }}>\n        {targetNetwork.name}\n      </div>\n    );\n  }\n\n  // console.log({ networkDisplay });\n\n  return networkDisplay;\n}\n\nexport default NetworkDisplay;\n","import React, { useState } from \"react\";\nimport { useBalance, useGasPrice } from \"eth-hooks\";\nimport { ethers } from \"ethers\";\nimport { Button } from \"antd\";\n\nimport { Transactor } from \"../helpers\";\n\nfunction FaucetHint({ localProvider, targetNetwork, address }) {\n  const [faucetClicked, setFaucetClicked] = useState(false);\n\n  // fetch local balance\n  const yourLocalBalance = useBalance(localProvider, address);\n\n  // get gas Price from network\n  const gasPrice = useGasPrice(targetNetwork, \"fast\");\n\n  // Faucet Tx can be used to send funds from the faucet\n  const faucetTx = Transactor(localProvider, gasPrice);\n\n  let faucetHint = \"\";\n\n  if (\n    !faucetClicked &&\n    localProvider &&\n    localProvider._network &&\n    localProvider._network.chainId === 31337 &&\n    yourLocalBalance &&\n    ethers.utils.formatEther(yourLocalBalance) <= 0\n  ) {\n    faucetHint = (\n      <div style={{ padding: 16, display: \"inline-flex\" }}>\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            faucetTx({\n              to: address,\n              value: ethers.utils.parseEther(\"0.01\"),\n            });\n            setFaucetClicked(true);\n          }}\n        >\n          💰 Grab funds from the faucet ⛽️\n        </Button>\n      </div>\n    );\n  }\n\n  return faucetHint;\n}\n\nexport default FaucetHint;\n","import React from \"react\";\nimport { Button, Dropdown, Menu } from \"antd\";\n\nfunction NetworkSwitch({ networkOptions, selectedNetwork, setSelectedNetwork }) {\n  const menu = (\n    <Menu>\n      {networkOptions\n        .filter(i => i !== selectedNetwork)\n        .map(i => (\n          <Menu.Item key={i}>\n            <a onClick={() => setSelectedNetwork(i)}>\n              <span style={{ textTransform: \"capitalize\" }}>{i}</span>\n            </a>\n          </Menu.Item>\n        ))}\n    </Menu>\n  );\n\n  return (\n    <div>\n      <Dropdown.Button overlay={menu} placement=\"bottomRight\" trigger={[\"click\"]}>\n        <span style={{ textTransform: \"capitalize\" }}>{selectedNetwork}</span>\n      </Dropdown.Button>\n    </div>\n  );\n}\n\nexport default NetworkSwitch;\n","import {SyncOutlined, RightOutlined, DownOutlined} from \"@ant-design/icons\";\nimport {BigNumber, ethers, utils} from \"ethers\";\nimport {Button, Card, DatePicker, Menu, Divider, Input, notification, Progress, Slider, Spin, Switch, Dropdown} from \"antd\";\nimport React, {useState} from \"react\";\nimport {Address, Balance, Events} from \"../components\";\nimport {useContractReader} from \"eth-hooks\";\n\nexport default function OrcsUI({\n                                   address,\n                                   mainnetProvider,\n                                   userSigner,\n                                   localProvider,\n                                   yourLocalBalance,\n                                   tx,\n                                   readContracts,\n                                   writeContracts,\n                               }) {\n    const priceWei = useContractReader(readContracts, \"LazyOrcs\", \"price\");\n    const nWhitelistMints = parseInt(useContractReader(readContracts, \"LazyOrcs\", \"nWhitelistMints\",[address]), 10);\n    const nFreeMints = parseInt(useContractReader(readContracts, \"LazyOrcs\", \"nFreeMints\", [address]), 10);\n\n    async function handleMenuClick(e) {\n        const mintNOrcs = parseInt(e.key);\n        if (mintNOrcs > 5 || mintNOrcs <= 0) {\n            notification.error({\n                message: \"Number Error\",\n                description: \"The provided number of NFTs has to be between 1 and 5 (inclusive).\",\n            });\n        } else {\n            await tx(writeContracts.LazyOrcs.mintOrc(mintNOrcs, {value: priceWei.mul(mintNOrcs)}));\n        }\n    }\n\n    const menu = (\n        <Menu onClick={handleMenuClick}>\n            <Menu.Item key=\"1\" icon={<RightOutlined/>}>1 Orc</Menu.Item>\n            <Menu.Item key=\"2\" icon={<RightOutlined/>}>2 Orcs</Menu.Item>\n            <Menu.Item key=\"3\" icon={<RightOutlined/>}>3 Orcs</Menu.Item>\n            <Menu.Item key=\"4\" icon={<RightOutlined/>}>4 Orcs</Menu.Item>\n            <Menu.Item key=\"5\" icon={<RightOutlined/>}>5 Orcs</Menu.Item>\n        </Menu>\n    );\n\n    return (\n        <div>\n            <div style={{border: \"1px solid #cccccc\", padding: 16, width: 400, margin: \"auto\", marginTop: 64}}>\n                <h2>Lazy Orcs</h2>\n                <Divider/>\n                <div style={{margin: 8}}>\n                    <Dropdown overlay={menu}>\n                        <Button>\n                            MINT Orcs for {priceWei ? utils.formatEther(priceWei) : \"...\"} ether each <DownOutlined/>\n                        </Button>\n                    </Dropdown>\n                </div>\n                <Divider/>\n                <div style={{margin: 8}}>\n                    <Button\n                        disabled={nWhitelistMints === 0}\n                        onClick={() => {\n                            tx(writeContracts.LazyOrcs.whitelistMintOrc({value: priceWei}));\n                        }}\n                    >\n                        Whitelist mint ({nWhitelistMints} remaining)\n                    </Button>\n                </div>\n                <div style={{margin: 8}}>\n                    <Button\n                        disabled={nFreeMints === 0}\n                        onClick={() => {\n                            tx(writeContracts.LazyOrcs.freeMintOrc());\n                        }}\n                    >\n                        Free mint ({nFreeMints} remaining)\n                    </Button>\n                </div>\n                <Divider/>\n                Contract address:&nbsp;\n                <Address\n                    address={readContracts && readContracts.LazyOrcs ? readContracts.LazyOrcs.address : null}\n                    ensProvider={mainnetProvider}\n                    fontSize={16}\n                />\n            </div>\n        </div>\n    );\n}\n","import {Spin} from \"antd\";\nimport \"antd/dist/antd.css\";\nimport {\n    useBalance,\n    useContractLoader,\n    useGasPrice,\n    useOnBlock,\n    useUserProviderAndSigner,\n} from \"eth-hooks\";\nimport {useExchangeEthPrice} from \"eth-hooks/dapps/dex\";\nimport React, {useCallback, useEffect, useState} from \"react\";\nimport {useLocation} from \"react-router-dom\";\nimport \"./App.css\";\nimport {\n    Account,\n    Header,\n    NetworkDisplay,\n    FaucetHint,\n    NetworkSwitch,\n} from \"./components\";\nimport {NETWORKS, ALCHEMY_KEY} from \"./constants\";\nimport externalContracts from \"./contracts/external_contracts\";\n// contracts\nimport deployedContracts from \"./contracts/hardhat_contracts.json\";\nimport {Transactor, Web3ModalSetup} from \"./helpers\";\nimport {Home} from \"./views\";\nimport {useStaticJsonRPC} from \"./hooks\";\n\nconst {ethers} = require(\"ethers\");\n/*\n    Welcome to 🏗 scaffold-eth !\n\n    Code:\n    https://github.com/scaffold-eth/scaffold-eth\n\n    Support:\n    https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\n    or DM @austingriffith on twitter or telegram\n\n    You should get your own Alchemy.com & Infura.io ID and put it in `constants.js`\n    (this is your connection to the main Ethereum network for ENS etc.)\n\n\n    🌏 EXTERNAL CONTRACTS:\n    You can also bring in contract artifacts in `constants.js`\n    (and then use the `useExternalContractLoader()` hook!)\n*/\n\n/// 📡 What chain are your contracts deployed to?\nconst initialNetwork = NETWORKS.ropsten; // <------- select your target frontend network (localhost, rinkeby, xdai, mainnet)\n\n// 😬 Sorry for all the console logging\nconst DEBUG = false;\nconst NETWORKCHECK = true;\nconst USE_BURNER_WALLET = false; // toggle burner wallet feature\nconst USE_NETWORK_SELECTOR = false;\n\nconst web3Modal = Web3ModalSetup();\n\n// 🛰 providers\nconst providers = [\n    \"https://eth-mainnet.gateway.pokt.network/v1/lb/611156b4a585a20035148406\",\n    `https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`,\n    \"https://rpc.scaffoldeth.io:48544\",\n];\n\nfunction App(props) {\n    // specify all the chains your app is available on. Eg: ['localhost', 'mainnet', ...otherNetworks ]\n    // reference './constants.js' for other networks\n    const networkOptions = [initialNetwork.name, \"mainnet\", \"rinkeby\"];\n\n    const [injectedProvider, setInjectedProvider] = useState();\n    const [address, setAddress] = useState();\n    const [selectedNetwork, setSelectedNetwork] = useState(networkOptions[0]);\n    const location = useLocation();\n\n    const targetNetwork = NETWORKS[selectedNetwork];\n\n    // 🔭 block explorer URL\n    const blockExplorer = targetNetwork.blockExplorer;\n\n    // load all your providers\n    const localProvider = useStaticJsonRPC([\n        process.env.REACT_APP_PROVIDER ? process.env.REACT_APP_PROVIDER : targetNetwork.rpcUrl,\n    ]);\n    const mainnetProvider = useStaticJsonRPC(providers);\n\n    if (DEBUG) console.log(`Using ${selectedNetwork} network`);\n\n    // 🛰 providers\n    if (DEBUG) console.log(\"📡 Connecting to Mainnet Ethereum\");\n\n    const logoutOfWeb3Modal = async () => {\n        await web3Modal.clearCachedProvider();\n        if (injectedProvider && injectedProvider.provider && typeof injectedProvider.provider.disconnect == \"function\") {\n            await injectedProvider.provider.disconnect();\n        }\n        setTimeout(() => {\n            window.location.reload();\n        }, 1);\n    };\n\n    /* 💵 This hook will get the price of ETH from 🦄 Uniswap: */\n    const price = useExchangeEthPrice(targetNetwork, mainnetProvider);\n    /* 🔥 This hook will get the price of Gas from ⛽️ EtherGasStation */\n    const gasPrice = useGasPrice(targetNetwork, \"fast\");\n\n    // Use your injected provider from 🦊 Metamask or if you don't have it then instantly generate a 🔥 burner wallet.\n    const userProviderAndSigner = useUserProviderAndSigner(injectedProvider, localProvider, USE_BURNER_WALLET);\n    const userSigner = userProviderAndSigner.signer;\n\n    useEffect(() => {\n        async function getAddress() {\n            if (userSigner) {\n                const newAddress = await userSigner.getAddress();\n                setAddress(newAddress);\n            }\n        }\n\n        getAddress();\n    }, [userSigner]);\n\n    // You can warn the user if you would like them to be on a specific network\n    const localChainId = localProvider && localProvider._network && localProvider._network.chainId;\n    const selectedChainId =\n        userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\n\n    // For more hooks, check out 🔗eth-hooks at: https://www.npmjs.com/package/eth-hooks\n\n    // The transactor wraps transactions and provides notificiations\n    const tx = Transactor(userSigner, gasPrice);\n\n    // 🏗 scaffold-eth is full of handy hooks like this one to get your balance:\n    const yourLocalBalance = useBalance(localProvider, address);\n\n    // Just plug in different 🛰 providers to get your balance on different chains:\n    const yourMainnetBalance = useBalance(mainnetProvider, address);\n\n    // const contractConfig = useContractConfig();\n\n    const contractConfig = {deployedContracts: deployedContracts || {}, externalContracts: externalContracts || {}};\n\n    // Load in your local 📝 contract and read a value from it:\n    const readContracts = useContractLoader(localProvider, contractConfig);\n\n    // If you want to make 🔐 write transactions to your contracts, use the userSigner:\n    const writeContracts = useContractLoader(userSigner, contractConfig, localChainId);\n\n    // EXTERNAL CONTRACT EXAMPLE:\n    //\n    // If you want to bring in the mainnet DAI contract it would look like:\n    const mainnetContracts = useContractLoader(mainnetProvider, contractConfig);\n\n    // If you want to call a function on a new block\n    useOnBlock(mainnetProvider, () => {\n        if(DEBUG) console.log(`⛓ A new mainnet block is here: ${mainnetProvider._lastBlockNumber}`);\n    });\n\n    // Then read your DAI balance like:\n    /*const myMainnetDAIBalance = useContractReader(mainnetContracts, \"DAI\", \"balanceOf\", [\n        \"0x34aA3F359A9D614239015126635CE7732c18fDF3\",\n    ]);*/\n\n    // keep track of a variable from the contract in the local React state:\n    // const purpose = useContractReader(readContracts, \"YourContract\", \"purpose\");\n    /*\n    const addressFromENS = useResolveName(mainnetProvider, \"austingriffith.eth\");\n    console.log(\"🏷 Resolved austingriffith.eth as:\",addressFromENS)\n    */\n\n    //\n    // 🧫 DEBUG 👨🏻‍🔬\n    //\n    useEffect(() => {\n        if (\n            DEBUG &&\n            mainnetProvider &&\n            address &&\n            selectedChainId &&\n            yourLocalBalance &&\n            yourMainnetBalance &&\n            readContracts &&\n            writeContracts &&\n            mainnetContracts\n        ) {\n            console.log(\"_____________________________________ 🏗 scaffold-eth _____________________________________\");\n            console.log(\"🌎 mainnetProvider\", mainnetProvider);\n            console.log(\"🏠 localChainId\", localChainId);\n            console.log(\"👩‍💼 selected address:\", address);\n            console.log(\"🕵🏻‍♂️ selectedChainId:\", selectedChainId);\n            console.log(\"💵 yourLocalBalance\", yourLocalBalance ? ethers.utils.formatEther(yourLocalBalance) : \"...\");\n            console.log(\"💵 yourMainnetBalance\", yourMainnetBalance ? ethers.utils.formatEther(yourMainnetBalance) : \"...\");\n            console.log(\"📝 readContracts\", readContracts);\n            console.log(\"🌍 DAI contract on mainnet:\", mainnetContracts);\n            // console.log(\"💵 yourMainnetDAIBalance\", myMainnetDAIBalance);\n            console.log(\"🔐 writeContracts\", writeContracts);\n        }\n    }, [\n        mainnetProvider,\n        address,\n        selectedChainId,\n        yourLocalBalance,\n        yourMainnetBalance,\n        readContracts,\n        writeContracts,\n        mainnetContracts,\n    ]);\n\n    const loadWeb3Modal = useCallback(async () => {\n        const provider = await web3Modal.connect();\n        setInjectedProvider(new ethers.providers.Web3Provider(provider));\n\n        provider.on(\"chainChanged\", chainId => {\n            if(DEBUG) console.log(`chain changed to ${chainId}! updating providers`);\n            setInjectedProvider(new ethers.providers.Web3Provider(provider));\n        });\n\n        provider.on(\"accountsChanged\", () => {\n            if(DEBUG) console.log(`account changed!`);\n            setInjectedProvider(new ethers.providers.Web3Provider(provider));\n        });\n\n        // Subscribe to session disconnection\n        provider.on(\"disconnect\", (code, reason) => {\n            if(DEBUG) console.log(code, reason);\n            logoutOfWeb3Modal();\n        });\n    }, [setInjectedProvider]);\n\n    useEffect(() => {\n        if (web3Modal.cachedProvider) {\n            loadWeb3Modal();\n        }\n    }, [loadWeb3Modal]);\n\n    return (\n        <div className=\"App\">\n            {/* ✏️ Edit the header and change the title to your project name */}\n            <Header/>\n            <NetworkDisplay\n                NETWORKCHECK={NETWORKCHECK}\n                localChainId={localChainId}\n                selectedChainId={selectedChainId}\n                targetNetwork={targetNetwork}\n                logoutOfWeb3Modal={logoutOfWeb3Modal}\n                USE_NETWORK_SELECTOR={USE_NETWORK_SELECTOR}\n            />\n            {\n                readContracts.LazyOrcs && address ?\n                    (<Home\n                        address={address}\n                        userSigner={userSigner}\n                        mainnetProvider={mainnetProvider}\n                        localProvider={localProvider}\n                        yourLocalBalance={yourLocalBalance}\n                        tx={tx}\n                        writeContracts={writeContracts}\n                        readContracts={readContracts}\n                    />) : (<div style={{marginTop: 32}}>\n                        <Spin/>\n                    </div>)\n            }\n\n            {/* 👨‍💼 Your account is in the top right with a wallet at connect options */}\n            <div style={{position: \"fixed\", textAlign: \"right\", right: 0, top: 0, padding: 10}}>\n                <div style={{display: \"flex\", flex: 1, alignItems: \"center\"}}>\n                    {USE_NETWORK_SELECTOR && (\n                        <div style={{marginRight: 20}}>\n                            <NetworkSwitch\n                                networkOptions={networkOptions}\n                                selectedNetwork={selectedNetwork}\n                                setSelectedNetwork={setSelectedNetwork}\n                            />\n                        </div>\n                    )}\n                    <Account\n                        useBurner={USE_BURNER_WALLET}\n                        address={address}\n                        localProvider={localProvider}\n                        userSigner={userSigner}\n                        mainnetProvider={mainnetProvider}\n                        price={price}\n                        web3Modal={web3Modal}\n                        loadWeb3Modal={loadWeb3Modal}\n                        logoutOfWeb3Modal={logoutOfWeb3Modal}\n                        blockExplorer={blockExplorer}\n                    />\n                </div>\n                {yourLocalBalance.lte(ethers.BigNumber.from(\"0\")) && (\n                    <FaucetHint localProvider={localProvider} targetNetwork={targetNetwork} address={address}/>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport {ThemeSwitcherProvider} from \"react-css-theme-switcher\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nconst themes = {\n    dark: `${process.env.PUBLIC_URL}/dark-theme.css`,\n    light: `${process.env.PUBLIC_URL}/light-theme.css`,\n};\n\nconst prevTheme = window.localStorage.getItem(\"theme\");\n\nReactDOM.render(\n    <ThemeSwitcherProvider themeMap={themes} defaultTheme={prevTheme || \"dark\"}>\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n    </ThemeSwitcherProvider>,\n    document.getElementById(\"root\"),\n);\n","const ERC20ABI = [\n    {\n        constant: true,\n        inputs: [],\n        name: \"name\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                name: \"_spender\",\n                type: \"address\",\n            },\n            {\n                name: \"_value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"approve\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: \"totalSupply\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                name: \"_from\",\n                type: \"address\",\n            },\n            {\n                name: \"_to\",\n                type: \"address\",\n            },\n            {\n                name: \"_value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"transferFrom\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: \"decimals\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        constant: true,\n        inputs: [\n            {\n                name: \"_owner\",\n                type: \"address\",\n            },\n        ],\n        name: \"balanceOf\",\n        outputs: [\n            {\n                name: \"balance\",\n                type: \"uint256\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: \"symbol\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                name: \"_to\",\n                type: \"address\",\n            },\n            {\n                name: \"_value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"transfer\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        constant: true,\n        inputs: [\n            {\n                name: \"_owner\",\n                type: \"address\",\n            },\n            {\n                name: \"_spender\",\n                type: \"address\",\n            },\n        ],\n        name: \"allowance\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        payable: true,\n        stateMutability: \"payable\",\n        type: \"fallback\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                name: \"owner\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                name: \"spender\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                name: \"value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Approval\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                name: \"value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Transfer\",\n        type: \"event\",\n    },\n];\nconst DAIABI = [\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"chainId_\",\n                type: \"uint256\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"src\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"guy\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"wad\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Approval\",\n        type: \"event\",\n    },\n    {\n        anonymous: true,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"bytes4\",\n                name: \"sig\",\n                type: \"bytes4\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"usr\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"arg1\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"arg2\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"LogNote\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"src\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"dst\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"wad\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Transfer\",\n        type: \"event\",\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: \"DOMAIN_SEPARATOR\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: \"PERMIT_TYPEHASH\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        constant: true,\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        name: \"allowance\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"usr\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"wad\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"approve\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        constant: true,\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        name: \"balanceOf\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"usr\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"wad\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"burn\",\n        outputs: [],\n        payable: false,\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: \"decimals\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"guy\",\n                type: \"address\",\n            },\n        ],\n        name: \"deny\",\n        outputs: [],\n        payable: false,\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"usr\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"wad\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"mint\",\n        outputs: [],\n        payable: false,\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"src\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"dst\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"wad\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"move\",\n        outputs: [],\n        payable: false,\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: \"name\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        constant: true,\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        name: \"nonces\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"holder\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"nonce\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"expiry\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"bool\",\n                name: \"allowed\",\n                type: \"bool\",\n            },\n            {\n                internalType: \"uint8\",\n                name: \"v\",\n                type: \"uint8\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"r\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"s\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"permit\",\n        outputs: [],\n        payable: false,\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"usr\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"wad\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"pull\",\n        outputs: [],\n        payable: false,\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"usr\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"wad\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"push\",\n        outputs: [],\n        payable: false,\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"guy\",\n                type: \"address\",\n            },\n        ],\n        name: \"rely\",\n        outputs: [],\n        payable: false,\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: \"symbol\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: \"totalSupply\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"dst\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"wad\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"transfer\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"src\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"dst\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"wad\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"transferFrom\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: \"version\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        constant: true,\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        name: \"wards\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\n\n// Mainnet DAI, Optimism and Arbitrium Rollup Contracts with local addresses\nmodule.exports = {\n    1: {\n        contracts: {\n            DAI: {\n                address: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n                abi: DAIABI,\n            },\n            UNI: {\n                address: \"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\",\n                abi: ERC20ABI,\n            },\n        },\n    },\n};\n","export const INFURA_ID = \"f9e88100f9114c66a44be6d30b69fdb6\";\nexport const BLOCKNATIVE_DAPPID = \"48b13b46-963b-427b-85bb-9995e8cc1cec\";\nexport const ALCHEMY_KEY = \"pRPWIQaCpDtp0HPZSPIYsLs4xrLYrjpw\";\n\nexport const NETWORKS = {\n  localhost: {\n    name: \"localhost\",\n    color: \"#666666\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":8545\",\n  },\n  mainnet: {\n    name: \"mainnet\",\n    color: \"#ff8b9e\",\n    chainId: 1,\n    rpcUrl: `https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`,\n    blockExplorer: \"https://etherscan.io/\",\n  },\n  kovan: {\n    name: \"kovan\",\n    color: \"#7003DD\",\n    chainId: 42,\n    rpcUrl: `https://kovan.infura.io/v3/${INFURA_ID}`,\n    blockExplorer: \"https://kovan.etherscan.io/\",\n    faucet: \"https://gitter.im/kovan-testnet/faucet\", // https://faucet.kovan.network/\n  },\n  rinkeby: {\n    name: \"rinkeby\",\n    color: \"#e0d068\",\n    chainId: 4,\n    rpcUrl: `https://rinkeby.infura.io/v3/${INFURA_ID}`,\n    faucet: \"https://faucet.rinkeby.io/\",\n    blockExplorer: \"https://rinkeby.etherscan.io/\",\n  },\n  ropsten: {\n    name: \"ropsten\",\n    color: \"#F60D09\",\n    chainId: 3,\n    faucet: \"https://faucet.ropsten.be/\",\n    blockExplorer: \"https://ropsten.etherscan.io/\",\n    rpcUrl: `https://ropsten.infura.io/v3/${INFURA_ID}`,\n  },\n  goerli: {\n    name: \"goerli\",\n    color: \"#0975F6\",\n    chainId: 5,\n    faucet: \"https://goerli-faucet.slock.it/\",\n    blockExplorer: \"https://goerli.etherscan.io/\",\n    rpcUrl: `https://goerli.infura.io/v3/${INFURA_ID}`,\n  },\n  xdai: {\n    name: \"xdai\",\n    color: \"#48a9a6\",\n    chainId: 100,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://dai.poa.network\",\n    faucet: \"https://xdai-faucet.top/\",\n    blockExplorer: \"https://blockscout.com/poa/xdai/\",\n  },\n  matic: {\n    name: \"matic\",\n    color: \"#2bbdf7\",\n    chainId: 137,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://rpc-mainnet.maticvigil.com\",\n    faucet: \"https://faucet.matic.network/\",\n    blockExplorer: \"https://explorer-mainnet.maticvigil.com//\",\n  },\n  mumbai: {\n    name: \"mumbai\",\n    color: \"#92D9FA\",\n    chainId: 80001,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://rpc-mumbai.maticvigil.com\",\n    faucet: \"https://faucet.matic.network/\",\n    blockExplorer: \"https://mumbai-explorer.matic.today/\",\n  },\n  localArbitrum: {\n    name: \"localArbitrum\",\n    color: \"#50a0ea\",\n    chainId: 153869338190755,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:8547`,\n  },\n  localArbitrumL1: {\n    name: \"localArbitrumL1\",\n    color: \"#50a0ea\",\n    chainId: 44010,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:7545`,\n  },\n  rinkebyArbitrum: {\n    name: \"Arbitrum Testnet\",\n    color: \"#50a0ea\",\n    chainId: 421611,\n    blockExplorer: \"https://rinkeby-explorer.arbitrum.io/#/\",\n    rpcUrl: `https://rinkeby.arbitrum.io/rpc`,\n  },\n  arbitrum: {\n    name: \"Arbitrum\",\n    color: \"#50a0ea\",\n    chainId: 42161,\n    blockExplorer: \"https://explorer.arbitrum.io/#/\",\n    rpcUrl: `https://arb1.arbitrum.io/rpc`,\n    gasPrice: 0,\n  },\n  localOptimismL1: {\n    name: \"localOptimismL1\",\n    color: \"#f01a37\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":9545\",\n  },\n  localOptimism: {\n    name: \"localOptimism\",\n    color: \"#f01a37\",\n    chainId: 420,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":8545\",\n    gasPrice: 0,\n  },\n  kovanOptimism: {\n    name: \"kovanOptimism\",\n    color: \"#f01a37\",\n    chainId: 69,\n    blockExplorer: \"https://kovan-optimistic.etherscan.io/\",\n    rpcUrl: `https://kovan.optimism.io`,\n    gasPrice: 0,\n  },\n  optimism: {\n    name: \"optimism\",\n    color: \"#f01a37\",\n    chainId: 10,\n    blockExplorer: \"https://optimistic.etherscan.io/\",\n    rpcUrl: `https://mainnet.optimism.io`,\n  },\n  localAvalanche: {\n    name: \"localAvalanche\",\n    color: \"#666666\",\n    chainId: 43112,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:9650/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  fujiAvalanche: {\n    name: \"fujiAvalanche\",\n    color: \"#666666\",\n    chainId: 43113,\n    blockExplorer: \"https://cchain.explorer.avax-test.network/\",\n    rpcUrl: `https://api.avax-test.network/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  mainnetAvalanche: {\n    name: \"mainnetAvalanche\",\n    color: \"#666666\",\n    chainId: 43114,\n    blockExplorer: \"https://cchain.explorer.avax.network/\",\n    rpcUrl: `https://api.avax.network/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  testnetHarmony: {\n    name: \"Harmony Testnet\",\n    color: \"#00b0ef\",\n    chainId: 1666700000,\n    blockExplorer: \"https://explorer.pops.one/\",\n    rpcUrl: `https://api.s0.b.hmny.io`,\n    gasPrice: 1000000000,\n  },\n  mainnetHarmony: {\n    name: \"Harmony Mainnet\",\n    color: \"#00b0ef\",\n    chainId: 1666600000,\n    blockExplorer: \"https://explorer.harmony.one/\",\n    rpcUrl: `https://api.harmony.one`,\n    gasPrice: 1000000000,\n  },\n};\n\nexport const NETWORK = chainId => {\n  for (const n in NETWORKS) {\n    if (NETWORKS[n].chainId === chainId) {\n      return NETWORKS[n];\n    }\n  }\n};\n"],"sourceRoot":""}